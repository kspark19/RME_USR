ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 1


   1              		.cpu cortex-a9
   2              		.arch armv7-a
   3              		.fpu neon-fp16
   4              		.arch_extension mp
   5              		.arch_extension sec
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"rme_benchmark.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Source/rme_benchmark.c"
  20              		.global	RME_Stack
  21              		.section	.bss.RME_Stack,"aw",%nobits
  22              		.align	2
  25              	RME_Stack:
  26 0000 00000000 		.space	8192
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.global	Time
  28              		.section	.bss.Time,"aw",%nobits
  29              		.align	2
  32              	Time:
  33 0000 00000000 		.space	20000
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	RME_Bench_Buf
  35              		.section	.bss.RME_Bench_Buf,"aw",%nobits
  36              		.align	2
  39              	RME_Bench_Buf:
  40 0000 00000000 		.space	1024
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.section	.text.__USR_Putchar,"ax",%progbits
  42              		.align	2
  43              		.global	__USR_Putchar
  44              		.syntax unified
  45              		.arm
  47              	__USR_Putchar:
  48              	.LFB0:
  49              		.file 2 "Include/benchmark.h"
   1:Include/benchmark.h **** 
   2:Include/benchmark.h **** #include"rme.h"
   3:Include/benchmark.h **** /* UART peripheral address */
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 2


   4:Include/benchmark.h **** #define RME_A7A_UART_CONTROL      (*((volatile unsigned int*)(0xE0001000)))
   5:Include/benchmark.h **** #define RME_A7A_UART_MODE         (*((volatile unsigned int*)(0xE0001004)))
   6:Include/benchmark.h **** #define RME_A7A_UART_BRGEN        (*((volatile unsigned int*)(0xE0001018)))
   7:Include/benchmark.h **** #define RME_A7A_UART_STATUS       (*((volatile unsigned int*)(0xE000102C)))
   8:Include/benchmark.h **** #define RME_A7A_UART_FIFO         (*((volatile unsigned int*)(0xE0001030)))
   9:Include/benchmark.h **** #define RME_A7A_UART_BRDIV        (*((volatile unsigned int*)(0xE0001034)))
  10:Include/benchmark.h **** #define RME_A7A_UART_STATUS_TXE   (1U<<3)
  11:Include/benchmark.h **** //#define RME_DBG_S(STR)                              RME_Str_Print((const signed char*)(STR))
  12:Include/benchmark.h **** 
  13:Include/benchmark.h **** 
  14:Include/benchmark.h **** #define RME_A7A_PUTCHAR(CHAR) \
  15:Include/benchmark.h **** do \
  16:Include/benchmark.h **** { \
  17:Include/benchmark.h ****     while((RME_A7A_UART_STATUS&RME_A7A_UART_STATUS_TXE)==0); \
  18:Include/benchmark.h **** 	RME_A7A_UART_FIFO=(CHAR); \
  19:Include/benchmark.h **** } \
  20:Include/benchmark.h **** while(0)
  21:Include/benchmark.h **** 
  22:Include/benchmark.h **** 
  23:Include/benchmark.h **** /* Define ********************************************************************/
  24:Include/benchmark.h **** /* Types */
  25:Include/benchmark.h **** typedef signed int                          s32;
  26:Include/benchmark.h **** typedef signed short                        s16;
  27:Include/benchmark.h **** typedef signed char                         s8;
  28:Include/benchmark.h **** typedef unsigned int                        u32;
  29:Include/benchmark.h **** typedef unsigned short                      u16;
  30:Include/benchmark.h **** typedef unsigned char                       u8;
  31:Include/benchmark.h **** typedef s32                                 tid_t;
  32:Include/benchmark.h **** typedef u32                       			ptr_t;
  33:Include/benchmark.h **** typedef s32                       			cnt_t;
  34:Include/benchmark.h **** typedef s32 								cid_t;
  35:Include/benchmark.h **** typedef s32                        			ret_t;
  36:Include/benchmark.h **** 
  37:Include/benchmark.h **** #define BENCHMARK_STACK_SIZE 4096
  38:Include/benchmark.h **** /* System service stub */
  39:Include/benchmark.h **** #define RME_CAP_OP(OP,CAPID,ARG1,ARG2,ARG3) RME_Svc(((OP)<<(sizeof(ptr_t)*4)|(CAPID)),ARG1,ARG2,ARG
  40:Include/benchmark.h **** #define RME_PARAM_D_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*4))
  41:Include/benchmark.h **** #define RME_PARAM_Q_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*6))
  42:Include/benchmark.h **** #define RME_PARAM_O_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*7))
  43:Include/benchmark.h **** /* The parameter passing - not to be confused with kernel macros. These macros just place the param
  44:Include/benchmark.h **** #define RME_PARAM_D1(X)                     (((X)&RME_PARAM_D_MASK)<<(sizeof(ptr_t)*4))
  45:Include/benchmark.h **** #define RME_PARAM_D0(X)                     ((X)&RME_PARAM_D_MASK)
  46:Include/benchmark.h **** 
  47:Include/benchmark.h **** #define RME_PARAM_Q3(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*6))
  48:Include/benchmark.h **** #define RME_PARAM_Q2(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*4))
  49:Include/benchmark.h **** #define RME_PARAM_Q1(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*2))
  50:Include/benchmark.h **** #define RME_PARAM_Q0(X)                     ((X)&RME_PARAM_Q_MASK)
  51:Include/benchmark.h **** 
  52:Include/benchmark.h **** #define RME_PARAM_O7(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*7))
  53:Include/benchmark.h **** #define RME_PARAM_O6(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*6))
  54:Include/benchmark.h **** #define RME_PARAM_O5(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*5))
  55:Include/benchmark.h **** #define RME_PARAM_O4(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*4))
  56:Include/benchmark.h **** #define RME_PARAM_O3(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*3))
  57:Include/benchmark.h **** #define RME_PARAM_O2(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*2))
  58:Include/benchmark.h **** #define RME_PARAM_O1(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*1))
  59:Include/benchmark.h **** #define RME_PARAM_O0(X)                     ((X)&RME_PARAM_O_MASK)
  60:Include/benchmark.h **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 3


  61:Include/benchmark.h **** /* Initial boot capabilities - This should be in accordnace with the kernel settings */
  62:Include/benchmark.h **** /* The capability table of the init process */
  63:Include/benchmark.h **** #define RME_BOOT_INIT_CPT                 		0
  64:Include/benchmark.h **** /* The top-level page table of the init process - always 4GB full range split into 8 pages */
  65:Include/benchmark.h **** #define RME_BOOT_INIT_PGT                 		1
  66:Include/benchmark.h **** /* The init process */
  67:Include/benchmark.h **** #define RME_BOOT_INIT_PRC                 		2
  68:Include/benchmark.h **** /* The init thread */
  69:Include/benchmark.h **** #define RME_BOOT_INIT_THD                 		3
  70:Include/benchmark.h **** /* The initial kernel function capability */
  71:Include/benchmark.h **** #define RME_BOOT_INIT_KFN          				4
  72:Include/benchmark.h **** /* The initial kernel memory capability */
  73:Include/benchmark.h **** #define RME_BOOT_INIT_KOM         				5
  74:Include/benchmark.h **** /* The initial timer endpoint */
  75:Include/benchmark.h **** #define RME_BOOT_INIT_TIMER      				6
  76:Include/benchmark.h **** /* The test objects */
  77:Include/benchmark.h **** #define RME_BOOT_BENCH_THD       				8
  78:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_TOP   				9
  79:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_SRAM  				10
  80:Include/benchmark.h **** /* The top-level page table of the init process's SRAM */
  81:Include/benchmark.h **** #define RME_BOOT_INIT_PGT_SRAM    				11
  82:Include/benchmark.h **** 
  83:Include/benchmark.h **** /* Power of 2 */
  84:Include/benchmark.h **** #define RME_FIELD(VAL,POW)                      (((ptr_t)(VAL))<<(POW))
  85:Include/benchmark.h **** #define RME_POW2(POW)                           RME_FIELD(1U,POW)
  86:Include/benchmark.h **** /* The order of bits in one CPU machine word */
  87:Include/benchmark.h **** #define RME_WORD_ORDER            				(5U)
  88:Include/benchmark.h **** /* Word size */
  89:Include/benchmark.h **** #define RME_WORD_BIT                            RME_POW2(RME_WORD_ORDER)
  90:Include/benchmark.h **** /* Need to export the memory frontier! */
  91:Include/benchmark.h **** /* Need to export the flags as well ! */
  92:Include/benchmark.h **** /* Export the errno too */
  93:Include/benchmark.h **** #define RME_BOOT_BENCH_KOM_FRONTIER 			0x00009000
  94:Include/benchmark.h **** //0x10005000
  95:Include/benchmark.h **** /* The stack safe size */
  96:Include/benchmark.h **** #define RME_STACK_SAFE_SIZE 					16
  97:Include/benchmark.h **** /* Doesn't want to receive the scheduler signal for the thread */
  98:Include/benchmark.h **** #define RME_CID_NULL   							0x8000
  99:Include/benchmark.h **** 
 100:Include/benchmark.h **** //#define RME_TSC() TIM2->CNT
 101:Include/benchmark.h **** 
 102:Include/benchmark.h **** /* Need to export the system priority limit! */
 103:Include/benchmark.h **** struct RME_CMX_Ret_Stack
 104:Include/benchmark.h **** {
 105:Include/benchmark.h ****     /* Normal registers */
 106:Include/benchmark.h ****     ptr_t R0;
 107:Include/benchmark.h ****     ptr_t R1;
 108:Include/benchmark.h ****     ptr_t R2;
 109:Include/benchmark.h ****     ptr_t R3;
 110:Include/benchmark.h ****     ptr_t R12;
 111:Include/benchmark.h ****     ptr_t LR;
 112:Include/benchmark.h ****     ptr_t PC;
 113:Include/benchmark.h ****     ptr_t XPSR;
 114:Include/benchmark.h ****     /* FPU registers follow - no matter they are used or not, we reserve the space
 115:Include/benchmark.h ****      * in stack creation */
 116:Include/benchmark.h ****     ptr_t S0;
 117:Include/benchmark.h ****     ptr_t S1;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 4


 118:Include/benchmark.h ****     ptr_t S2;
 119:Include/benchmark.h ****     ptr_t S3;
 120:Include/benchmark.h ****     ptr_t S4;
 121:Include/benchmark.h ****     ptr_t S5;
 122:Include/benchmark.h ****     ptr_t S6;
 123:Include/benchmark.h ****     ptr_t S7;
 124:Include/benchmark.h ****     ptr_t S8;
 125:Include/benchmark.h ****     ptr_t S9;
 126:Include/benchmark.h ****     ptr_t S10;
 127:Include/benchmark.h ****     ptr_t S11;
 128:Include/benchmark.h ****     ptr_t S12;
 129:Include/benchmark.h ****     ptr_t S13;
 130:Include/benchmark.h ****     ptr_t S14;
 131:Include/benchmark.h ****     ptr_t S15;
 132:Include/benchmark.h **** };
 133:Include/benchmark.h **** /* End Define ****************************************************************/
 134:Include/benchmark.h **** 
 135:Include/benchmark.h **** 
 136:Include/benchmark.h **** 
 137:Include/benchmark.h **** /* Private Variables *********************************************************/
 138:Include/benchmark.h **** /* The stack of the threads - enough for 4 threads */
 139:Include/benchmark.h **** ptr_t RME_Stack[2048];
 140:Include/benchmark.h **** u16 Time[10000];
 141:Include/benchmark.h **** s8 RME_Bench_Buf[1024];
 142:Include/benchmark.h **** /* End Private Variables *****************************************************/
 143:Include/benchmark.h **** 
 144:Include/benchmark.h **** /* Function Prototypes *******************************************************/
 145:Include/benchmark.h **** extern ret_t RME_Svc(ptr_t Svc_Capid,ptr_t Param1, ptr_t Param2, ptr_t Param3);
 146:Include/benchmark.h **** extern cnt_t RME_Sprint_Uint(s8* Buffer,u32 Arg_Int);
 147:Include/benchmark.h **** extern void RME_Thd_Stub(void);
 148:Include/benchmark.h **** extern void RME_Inv_Stub(void);
 149:Include/benchmark.h **** ptr_t _RME_Stack_Init(ptr_t Stack, ptr_t Stub, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Para
 150:Include/benchmark.h **** void RME_Benchmark(void);
 151:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4);
 152:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test(void);
 153:Include/benchmark.h **** /* End Function Prototypes ***************************************************/
 154:Include/benchmark.h **** 
 155:Include/benchmark.h **** /* Function:__USR_Putchar *****************************************************
 156:Include/benchmark.h **** Description : Output a character to console. In Cortex-M, under most circumstances,
 157:Include/benchmark.h ****               we should use the ITM for such outputs.
 158:Include/benchmark.h **** Input       : char Char - The character to print.
 159:Include/benchmark.h **** Output      : None.
 160:Include/benchmark.h **** Return      : rme_ptr_t - Always 0.
 161:Include/benchmark.h **** ******************************************************************************/
 162:Include/benchmark.h **** ptr_t __USR_Putchar(char Char)
 163:Include/benchmark.h **** {
  50              		.loc 2 163 1
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 8
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55 0000 04B02DE5 		str	fp, [sp, #-4]!
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 11, -4
  58 0004 00B08DE2 		add	fp, sp, #0
  59              		.cfi_def_cfa_register 11
  60 0008 0CD04DE2 		sub	sp, sp, #12
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 5


  61 000c 0030A0E1 		mov	r3, r0
  62 0010 05304BE5 		strb	r3, [fp, #-5]
  63              	.L2:
 164:Include/benchmark.h ****     RME_A7A_PUTCHAR(Char);
  64              		.loc 2 164 5 discriminator 1
  65 0014 2C3001E3 		movw	r3, #4140
  66 0018 00304EE3 		movt	r3, 57344
  67 001c 003093E5 		ldr	r3, [r3]
  68 0020 083003E2 		and	r3, r3, #8
  69 0024 000053E3 		cmp	r3, #0
  70 0028 F9FFFF0A 		beq	.L2
  71              		.loc 2 164 5 is_stmt 0 discriminator 2
  72 002c 303001E3 		movw	r3, #4144
  73 0030 00304EE3 		movt	r3, 57344
  74 0034 D5205BE1 		ldrsb	r2, [fp, #-5]
  75 0038 002083E5 		str	r2, [r3]
 165:Include/benchmark.h ****     return 0;
  76              		.loc 2 165 12 is_stmt 1
  77 003c 0030A0E3 		mov	r3, #0
 166:Include/benchmark.h **** }
  78              		.loc 2 166 1
  79 0040 0300A0E1 		mov	r0, r3
  80 0044 00D08BE2 		add	sp, fp, #0
  81              		.cfi_def_cfa_register 13
  82              		@ sp needed
  83 0048 04B09DE4 		ldr	fp, [sp], #4
  84              		.cfi_restore 11
  85              		.cfi_def_cfa_offset 0
  86 004c 1EFF2FE1 		bx	lr
  87              		.cfi_endproc
  88              	.LFE0:
  90              		.section	.text.USR_DBG_I,"ax",%progbits
  91              		.align	2
  92              		.global	USR_DBG_I
  93              		.syntax unified
  94              		.arm
  96              	USR_DBG_I:
  97              	.LFB1:
 167:Include/benchmark.h **** /* End Function __USR_Putchar ***************************************************/
 168:Include/benchmark.h **** 
 169:Include/benchmark.h **** 
 170:Include/benchmark.h **** /* Function:USR_DBG_I *****************************************************
 171:Include/benchmark.h **** Description : Print a signed integer on the debugging console. This integer is
 172:Include/benchmark.h ****               printed as decimal with sign.
 173:Include/benchmark.h **** Input       : rme_cnt_t Int - The integer to print.
 174:Include/benchmark.h **** Output      : None.
 175:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 176:Include/benchmark.h **** ******************************************************************************/
 177:Include/benchmark.h **** cnt_t USR_DBG_I(cnt_t Int)
 178:Include/benchmark.h **** {
  98              		.loc 2 178 1
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 32
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102 0000 00482DE9 		push	{fp, lr}
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 11, -8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 6


 105              		.cfi_offset 14, -4
 106 0004 04B08DE2 		add	fp, sp, #4
 107              		.cfi_def_cfa 11, 4
 108 0008 20D04DE2 		sub	sp, sp, #32
 109 000c 20000BE5 		str	r0, [fp, #-32]
 179:Include/benchmark.h ****     cnt_t Num;
 180:Include/benchmark.h ****     cnt_t Abs;
 181:Include/benchmark.h ****     cnt_t Iter;
 182:Include/benchmark.h ****     cnt_t Count;
 183:Include/benchmark.h ****     cnt_t Div;
 184:Include/benchmark.h **** 
 185:Include/benchmark.h ****     /* Exit on zero */
 186:Include/benchmark.h ****     if(Int==0)
 110              		.loc 2 186 7
 111 0010 20301BE5 		ldr	r3, [fp, #-32]
 112 0014 000053E3 		cmp	r3, #0
 113 0018 0300001A 		bne	.L5
 187:Include/benchmark.h ****     {
 188:Include/benchmark.h **** 
 189:Include/benchmark.h **** 
 190:Include/benchmark.h ****         __USR_Putchar('0');
 114              		.loc 2 190 9
 115 001c 3000A0E3 		mov	r0, #48
 116 0020 FEFFFFEB 		bl	__USR_Putchar
 191:Include/benchmark.h ****         return 1;
 117              		.loc 2 191 16
 118 0024 0130A0E3 		mov	r3, #1
 119 0028 500000EA 		b	.L6
 120              	.L5:
 192:Include/benchmark.h ****     }
 193:Include/benchmark.h ****     else
 194:Include/benchmark.h ****     {
 195:Include/benchmark.h **** 
 196:Include/benchmark.h ****         /* No action required */
 197:Include/benchmark.h ****     }
 198:Include/benchmark.h **** 
 199:Include/benchmark.h **** 
 200:Include/benchmark.h ****     /* Correct all negatives into positives */
 201:Include/benchmark.h ****     if(Int<0)
 121              		.loc 2 201 7
 122 002c 20301BE5 		ldr	r3, [fp, #-32]
 123 0030 000053E3 		cmp	r3, #0
 124 0034 070000AA 		bge	.L7
 202:Include/benchmark.h ****     {
 203:Include/benchmark.h **** 
 204:Include/benchmark.h **** 
 205:Include/benchmark.h ****         __USR_Putchar('-');
 125              		.loc 2 205 9
 126 0038 2D00A0E3 		mov	r0, #45
 127 003c FEFFFFEB 		bl	__USR_Putchar
 206:Include/benchmark.h ****         Abs=-Int;
 128              		.loc 2 206 12
 129 0040 20301BE5 		ldr	r3, [fp, #-32]
 130 0044 003063E2 		rsb	r3, r3, #0
 131 0048 0C300BE5 		str	r3, [fp, #-12]
 207:Include/benchmark.h ****         Num=1;
 132              		.loc 2 207 12
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 7


 133 004c 0130A0E3 		mov	r3, #1
 134 0050 08300BE5 		str	r3, [fp, #-8]
 135 0054 030000EA 		b	.L8
 136              	.L7:
 208:Include/benchmark.h ****     }
 209:Include/benchmark.h ****     else
 210:Include/benchmark.h ****     {
 211:Include/benchmark.h **** 
 212:Include/benchmark.h **** 
 213:Include/benchmark.h ****         Abs=Int;
 137              		.loc 2 213 12
 138 0058 20301BE5 		ldr	r3, [fp, #-32]
 139 005c 0C300BE5 		str	r3, [fp, #-12]
 214:Include/benchmark.h ****         Num=0;
 140              		.loc 2 214 12
 141 0060 0030A0E3 		mov	r3, #0
 142 0064 08300BE5 		str	r3, [fp, #-8]
 143              	.L8:
 215:Include/benchmark.h ****     }
 216:Include/benchmark.h **** 
 217:Include/benchmark.h ****     /* How many digits are there? */
 218:Include/benchmark.h ****     Count=0;
 144              		.loc 2 218 10
 145 0068 0030A0E3 		mov	r3, #0
 146 006c 14300BE5 		str	r3, [fp, #-20]
 219:Include/benchmark.h ****     Div=1;
 147              		.loc 2 219 8
 148 0070 0130A0E3 		mov	r3, #1
 149 0074 18300BE5 		str	r3, [fp, #-24]
 220:Include/benchmark.h ****     Iter=Abs;
 150              		.loc 2 220 9
 151 0078 0C301BE5 		ldr	r3, [fp, #-12]
 152 007c 10300BE5 		str	r3, [fp, #-16]
 153              	.L12:
 221:Include/benchmark.h ****     while(1U)
 222:Include/benchmark.h ****     {
 223:Include/benchmark.h ****         Iter/=10;
 154              		.loc 2 223 13
 155 0080 10201BE5 		ldr	r2, [fp, #-16]
 156 0084 673606E3 		movw	r3, #26215
 157 0088 663646E3 		movt	r3, 26214
 158 008c 9312C3E0 		smull	r1, r3, r3, r2
 159 0090 4311A0E1 		asr	r1, r3, #2
 160 0094 C23FA0E1 		asr	r3, r2, #31
 161 0098 033041E0 		sub	r3, r1, r3
 162 009c 10300BE5 		str	r3, [fp, #-16]
 224:Include/benchmark.h ****         Count++;
 163              		.loc 2 224 14
 164 00a0 14301BE5 		ldr	r3, [fp, #-20]
 165 00a4 013083E2 		add	r3, r3, #1
 166 00a8 14300BE5 		str	r3, [fp, #-20]
 225:Include/benchmark.h ****         if(Iter!=0)
 167              		.loc 2 225 11
 168 00ac 10301BE5 		ldr	r3, [fp, #-16]
 169 00b0 000053E3 		cmp	r3, #0
 170 00b4 0600000A 		beq	.L15
 226:Include/benchmark.h ****         {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 8


 227:Include/benchmark.h **** 
 228:Include/benchmark.h **** 
 229:Include/benchmark.h ****             Div*=10;
 171              		.loc 2 229 16
 172 00b8 18201BE5 		ldr	r2, [fp, #-24]
 173 00bc 0230A0E1 		mov	r3, r2
 174 00c0 0331A0E1 		lsl	r3, r3, #2
 175 00c4 023083E0 		add	r3, r3, r2
 176 00c8 8330A0E1 		lsl	r3, r3, #1
 177 00cc 18300BE5 		str	r3, [fp, #-24]
 223:Include/benchmark.h ****         Count++;
 178              		.loc 2 223 13
 179 00d0 EAFFFFEA 		b	.L12
 180              	.L15:
 230:Include/benchmark.h ****         }
 231:Include/benchmark.h ****         else
 232:Include/benchmark.h ****         {
 233:Include/benchmark.h **** 
 234:Include/benchmark.h **** 
 235:Include/benchmark.h ****             break;
 181              		.loc 2 235 13
 182 00d4 00F020E3 		nop
 236:Include/benchmark.h ****         }
 237:Include/benchmark.h ****     }
 238:Include/benchmark.h ****     Num+=Count;
 183              		.loc 2 238 8
 184 00d8 08201BE5 		ldr	r2, [fp, #-8]
 185 00dc 14301BE5 		ldr	r3, [fp, #-20]
 186 00e0 033082E0 		add	r3, r2, r3
 187 00e4 08300BE5 		str	r3, [fp, #-8]
 239:Include/benchmark.h **** 
 240:Include/benchmark.h ****     /* Print the integer */
 241:Include/benchmark.h ****     Iter=Abs;
 188              		.loc 2 241 9
 189 00e8 0C301BE5 		ldr	r3, [fp, #-12]
 190 00ec 10300BE5 		str	r3, [fp, #-16]
 242:Include/benchmark.h **** 
 243:Include/benchmark.h ****     while(Count>0)
 191              		.loc 2 243 10
 192 00f0 1A0000EA 		b	.L13
 193              	.L14:
 244:Include/benchmark.h ****     {
 245:Include/benchmark.h ****         Count--;
 194              		.loc 2 245 14
 195 00f4 14301BE5 		ldr	r3, [fp, #-20]
 196 00f8 013043E2 		sub	r3, r3, #1
 197 00fc 14300BE5 		str	r3, [fp, #-20]
 246:Include/benchmark.h ****         __USR_Putchar((s8)(Iter/Div)+'0');
 198              		.loc 2 246 32
 199 0100 18101BE5 		ldr	r1, [fp, #-24]
 200 0104 10001BE5 		ldr	r0, [fp, #-16]
 201 0108 FEFFFFEB 		bl	__aeabi_idiv
 202 010c 0030A0E1 		mov	r3, r0
 203              		.loc 2 246 23
 204 0110 7330EFE6 		uxtb	r3, r3
 205              		.loc 2 246 37
 206 0114 303083E2 		add	r3, r3, #48
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 9


 207 0118 7330EFE6 		uxtb	r3, r3
 208              		.loc 2 246 9
 209 011c 7330AFE6 		sxtb	r3, r3
 210 0120 0300A0E1 		mov	r0, r3
 211 0124 FEFFFFEB 		bl	__USR_Putchar
 247:Include/benchmark.h ****         Iter=Iter%Div;
 212              		.loc 2 247 13
 213 0128 10301BE5 		ldr	r3, [fp, #-16]
 214 012c 18101BE5 		ldr	r1, [fp, #-24]
 215 0130 0300A0E1 		mov	r0, r3
 216 0134 FEFFFFEB 		bl	__aeabi_idivmod
 217 0138 0130A0E1 		mov	r3, r1
 218 013c 10300BE5 		str	r3, [fp, #-16]
 248:Include/benchmark.h ****         Div/=10;
 219              		.loc 2 248 12
 220 0140 18201BE5 		ldr	r2, [fp, #-24]
 221 0144 673606E3 		movw	r3, #26215
 222 0148 663646E3 		movt	r3, 26214
 223 014c 9312C3E0 		smull	r1, r3, r3, r2
 224 0150 4311A0E1 		asr	r1, r3, #2
 225 0154 C23FA0E1 		asr	r3, r2, #31
 226 0158 033041E0 		sub	r3, r1, r3
 227 015c 18300BE5 		str	r3, [fp, #-24]
 228              	.L13:
 243:Include/benchmark.h ****     {
 229              		.loc 2 243 16
 230 0160 14301BE5 		ldr	r3, [fp, #-20]
 231 0164 000053E3 		cmp	r3, #0
 232 0168 E1FFFFCA 		bgt	.L14
 249:Include/benchmark.h ****     }
 250:Include/benchmark.h **** 
 251:Include/benchmark.h ****     return Num;
 233              		.loc 2 251 12
 234 016c 08301BE5 		ldr	r3, [fp, #-8]
 235              	.L6:
 252:Include/benchmark.h **** }
 236              		.loc 2 252 1
 237 0170 0300A0E1 		mov	r0, r3
 238 0174 04D04BE2 		sub	sp, fp, #4
 239              		.cfi_def_cfa 13, 8
 240              		@ sp needed
 241 0178 0088BDE8 		pop	{fp, pc}
 242              		.cfi_endproc
 243              	.LFE1:
 245              		.section	.text.USR_DBG_H,"ax",%progbits
 246              		.align	2
 247              		.global	USR_DBG_H
 248              		.syntax unified
 249              		.arm
 251              	USR_DBG_H:
 252              	.LFB2:
 253:Include/benchmark.h **** /* End Function:USR_DBG_I ************************************************/
 254:Include/benchmark.h **** 
 255:Include/benchmark.h **** /* Function:USR_DBG_H *****************************************************
 256:Include/benchmark.h **** Description : Print a unsigned integer on the debugging console. This integer is
 257:Include/benchmark.h ****               printed as hexadecimal.
 258:Include/benchmark.h **** Input       : rme_ptr_t Uint - The unsigned integer to print.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 10


 259:Include/benchmark.h **** Output      : None.
 260:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 261:Include/benchmark.h **** ******************************************************************************/
 262:Include/benchmark.h **** cnt_t USR_DBG_H(ptr_t Uint)
 263:Include/benchmark.h **** {
 253              		.loc 2 263 1
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 24
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 00482DE9 		push	{fp, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 11, -8
 260              		.cfi_offset 14, -4
 261 0004 04B08DE2 		add	fp, sp, #4
 262              		.cfi_def_cfa 11, 4
 263 0008 18D04DE2 		sub	sp, sp, #24
 264 000c 18000BE5 		str	r0, [fp, #-24]
 264:Include/benchmark.h ****     ptr_t Iter;
 265:Include/benchmark.h ****     ptr_t Count;
 266:Include/benchmark.h ****     ptr_t Num;
 267:Include/benchmark.h **** 
 268:Include/benchmark.h ****     /* Exit on zero */
 269:Include/benchmark.h ****     if(Uint==0U)
 265              		.loc 2 269 7
 266 0010 18301BE5 		ldr	r3, [fp, #-24]
 267 0014 000053E3 		cmp	r3, #0
 268 0018 0300001A 		bne	.L17
 270:Include/benchmark.h ****     {
 271:Include/benchmark.h ****         __USR_Putchar('0');
 269              		.loc 2 271 9
 270 001c 3000A0E3 		mov	r0, #48
 271 0020 FEFFFFEB 		bl	__USR_Putchar
 272:Include/benchmark.h ****         return 1;
 272              		.loc 2 272 16
 273 0024 0130A0E3 		mov	r3, #1
 274 0028 330000EA 		b	.L18
 275              	.L17:
 273:Include/benchmark.h ****     }
 274:Include/benchmark.h ****     else
 275:Include/benchmark.h ****     {
 276:Include/benchmark.h ****         /* No action required */
 277:Include/benchmark.h ****     }
 278:Include/benchmark.h **** 
 279:Include/benchmark.h ****     /* Filter out all the zeroes */
 280:Include/benchmark.h ****     Count=0U;
 276              		.loc 2 280 10
 277 002c 0030A0E3 		mov	r3, #0
 278 0030 0C300BE5 		str	r3, [fp, #-12]
 281:Include/benchmark.h ****     Iter=Uint;
 279              		.loc 2 281 9
 280 0034 18301BE5 		ldr	r3, [fp, #-24]
 281 0038 08300BE5 		str	r3, [fp, #-8]
 282:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 282              		.loc 2 282 10
 283 003c 050000EA 		b	.L19
 284              	.L20:
 283:Include/benchmark.h ****     {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 11


 284:Include/benchmark.h ****         Iter<<=4;
 285              		.loc 2 284 13
 286 0040 08301BE5 		ldr	r3, [fp, #-8]
 287 0044 0332A0E1 		lsl	r3, r3, #4
 288 0048 08300BE5 		str	r3, [fp, #-8]
 285:Include/benchmark.h ****         Count++;
 289              		.loc 2 285 14
 290 004c 0C301BE5 		ldr	r3, [fp, #-12]
 291 0050 013083E2 		add	r3, r3, #1
 292 0054 0C300BE5 		str	r3, [fp, #-12]
 293              	.L19:
 282:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 294              		.loc 2 282 16
 295 0058 08301BE5 		ldr	r3, [fp, #-8]
 296 005c 233EA0E1 		lsr	r3, r3, #28
 282:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 297              		.loc 2 282 36
 298 0060 000053E3 		cmp	r3, #0
 299 0064 F5FFFF0A 		beq	.L20
 286:Include/benchmark.h ****     }
 287:Include/benchmark.h **** 
 288:Include/benchmark.h ****     /* Count is the number of pts to print */
 289:Include/benchmark.h ****     Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
 300              		.loc 2 289 10
 301 0068 0C301BE5 		ldr	r3, [fp, #-12]
 302 006c 083063E2 		rsb	r3, r3, #8
 303 0070 0C300BE5 		str	r3, [fp, #-12]
 290:Include/benchmark.h ****     Num=Count;
 304              		.loc 2 290 8
 305 0074 0C301BE5 		ldr	r3, [fp, #-12]
 306 0078 10300BE5 		str	r3, [fp, #-16]
 291:Include/benchmark.h ****     while(Count>0U)
 307              		.loc 2 291 10
 308 007c 1A0000EA 		b	.L21
 309              	.L23:
 292:Include/benchmark.h ****     {
 293:Include/benchmark.h ****         Count--;
 310              		.loc 2 293 14
 311 0080 0C301BE5 		ldr	r3, [fp, #-12]
 312 0084 013043E2 		sub	r3, r3, #1
 313 0088 0C300BE5 		str	r3, [fp, #-12]
 294:Include/benchmark.h ****         Iter=(Uint>>(Count<<2U))&0x0FU;
 314              		.loc 2 294 27
 315 008c 0C301BE5 		ldr	r3, [fp, #-12]
 316 0090 0331A0E1 		lsl	r3, r3, #2
 317              		.loc 2 294 19
 318 0094 18201BE5 		ldr	r2, [fp, #-24]
 319 0098 3233A0E1 		lsr	r3, r2, r3
 320              		.loc 2 294 13
 321 009c 0F3003E2 		and	r3, r3, #15
 322 00a0 08300BE5 		str	r3, [fp, #-8]
 295:Include/benchmark.h ****         if(Iter<10U)
 323              		.loc 2 295 11
 324 00a4 08301BE5 		ldr	r3, [fp, #-8]
 325 00a8 090053E3 		cmp	r3, #9
 326 00ac 0700008A 		bhi	.L22
 296:Include/benchmark.h ****         {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 12


 297:Include/benchmark.h **** 
 298:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'0');
 327              		.loc 2 298 27
 328 00b0 08301BE5 		ldr	r3, [fp, #-8]
 329 00b4 7330EFE6 		uxtb	r3, r3
 330              		.loc 2 298 35
 331 00b8 303083E2 		add	r3, r3, #48
 332 00bc 7330EFE6 		uxtb	r3, r3
 333              		.loc 2 298 13
 334 00c0 7330AFE6 		sxtb	r3, r3
 335 00c4 0300A0E1 		mov	r0, r3
 336 00c8 FEFFFFEB 		bl	__USR_Putchar
 337 00cc 060000EA 		b	.L21
 338              	.L22:
 299:Include/benchmark.h ****         }
 300:Include/benchmark.h ****         else
 301:Include/benchmark.h ****         {
 302:Include/benchmark.h **** 
 303:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'A'-10);
 339              		.loc 2 303 27
 340 00d0 08301BE5 		ldr	r3, [fp, #-8]
 341 00d4 7330EFE6 		uxtb	r3, r3
 342              		.loc 2 303 39
 343 00d8 373083E2 		add	r3, r3, #55
 344 00dc 7330EFE6 		uxtb	r3, r3
 345              		.loc 2 303 13
 346 00e0 7330AFE6 		sxtb	r3, r3
 347 00e4 0300A0E1 		mov	r0, r3
 348 00e8 FEFFFFEB 		bl	__USR_Putchar
 349              	.L21:
 291:Include/benchmark.h ****     {
 350              		.loc 2 291 16
 351 00ec 0C301BE5 		ldr	r3, [fp, #-12]
 352 00f0 000053E3 		cmp	r3, #0
 353 00f4 E1FFFF1A 		bne	.L23
 304:Include/benchmark.h ****         }
 305:Include/benchmark.h ****     }
 306:Include/benchmark.h **** 
 307:Include/benchmark.h ****     return (cnt_t)Num;
 354              		.loc 2 307 12
 355 00f8 10301BE5 		ldr	r3, [fp, #-16]
 356              	.L18:
 308:Include/benchmark.h **** }
 357              		.loc 2 308 1
 358 00fc 0300A0E1 		mov	r0, r3
 359 0100 04D04BE2 		sub	sp, fp, #4
 360              		.cfi_def_cfa 13, 8
 361              		@ sp needed
 362 0104 0088BDE8 		pop	{fp, pc}
 363              		.cfi_endproc
 364              	.LFE2:
 366              		.section	.text.USR_DBG_S,"ax",%progbits
 367              		.align	2
 368              		.global	USR_DBG_S
 369              		.syntax unified
 370              		.arm
 372              	USR_DBG_S:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 13


 373              	.LFB3:
 309:Include/benchmark.h **** /* End Function:USR_DBG_H ************************************************/
 310:Include/benchmark.h **** cnt_t USR_DBG_S(const s8* String)
 311:Include/benchmark.h **** {
 374              		.loc 2 311 1
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 16
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 00482DE9 		push	{fp, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 11, -8
 381              		.cfi_offset 14, -4
 382 0004 04B08DE2 		add	fp, sp, #4
 383              		.cfi_def_cfa 11, 4
 384 0008 10D04DE2 		sub	sp, sp, #16
 385 000c 10000BE5 		str	r0, [fp, #-16]
 312:Include/benchmark.h ****     ptr_t Count;
 313:Include/benchmark.h **** 
 314:Include/benchmark.h ****     for(Count=0U;Count<255;Count++)
 386              		.loc 2 314 14
 387 0010 0030A0E3 		mov	r3, #0
 388 0014 08300BE5 		str	r3, [fp, #-8]
 389              		.loc 2 314 5
 390 0018 0E0000EA 		b	.L25
 391              	.L28:
 315:Include/benchmark.h ****     {
 316:Include/benchmark.h ****         if(String[Count]==(s8)'\0')
 392              		.loc 2 316 18
 393 001c 10201BE5 		ldr	r2, [fp, #-16]
 394 0020 08301BE5 		ldr	r3, [fp, #-8]
 395 0024 033082E0 		add	r3, r2, r3
 396 0028 D030D3E1 		ldrsb	r3, [r3]
 397              		.loc 2 316 11
 398 002c 000053E3 		cmp	r3, #0
 399 0030 0C00000A 		beq	.L30
 317:Include/benchmark.h ****         {
 318:Include/benchmark.h **** 
 319:Include/benchmark.h ****             break;
 320:Include/benchmark.h ****         }
 321:Include/benchmark.h ****         else
 322:Include/benchmark.h ****         {
 323:Include/benchmark.h ****             /* No action required */
 324:Include/benchmark.h ****         }
 325:Include/benchmark.h **** 
 326:Include/benchmark.h ****         __USR_Putchar(String[Count]);
 400              		.loc 2 326 29
 401 0034 10201BE5 		ldr	r2, [fp, #-16]
 402 0038 08301BE5 		ldr	r3, [fp, #-8]
 403 003c 033082E0 		add	r3, r2, r3
 404              		.loc 2 326 9
 405 0040 D030D3E1 		ldrsb	r3, [r3]
 406 0044 0300A0E1 		mov	r0, r3
 407 0048 FEFFFFEB 		bl	__USR_Putchar
 314:Include/benchmark.h ****     {
 408              		.loc 2 314 33 discriminator 2
 409 004c 08301BE5 		ldr	r3, [fp, #-8]
 410 0050 013083E2 		add	r3, r3, #1
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 14


 411 0054 08300BE5 		str	r3, [fp, #-8]
 412              	.L25:
 314:Include/benchmark.h ****     {
 413              		.loc 2 314 23 discriminator 1
 414 0058 08301BE5 		ldr	r3, [fp, #-8]
 415 005c FE0053E3 		cmp	r3, #254
 416 0060 EDFFFF9A 		bls	.L28
 417 0064 000000EA 		b	.L27
 418              	.L30:
 319:Include/benchmark.h ****         }
 419              		.loc 2 319 13
 420 0068 00F020E3 		nop
 421              	.L27:
 327:Include/benchmark.h ****     }
 328:Include/benchmark.h **** 
 329:Include/benchmark.h ****     return (cnt_t)Count;
 422              		.loc 2 329 12
 423 006c 08301BE5 		ldr	r3, [fp, #-8]
 330:Include/benchmark.h **** }
 424              		.loc 2 330 1
 425 0070 0300A0E1 		mov	r0, r3
 426 0074 04D04BE2 		sub	sp, fp, #4
 427              		.cfi_def_cfa 13, 8
 428              		@ sp needed
 429 0078 0088BDE8 		pop	{fp, pc}
 430              		.cfi_endproc
 431              	.LFE3:
 433              		.section	.text._RME_Tsc_Init,"ax",%progbits
 434              		.align	2
 435              		.global	_RME_Tsc_Init
 436              		.syntax unified
 437              		.arm
 439              	_RME_Tsc_Init:
 440              	.LFB4:
   1:Source/rme_benchmark.c **** /******************************************************************************
   2:Source/rme_benchmark.c **** Filename    : benchmark.c
   3:Source/rme_benchmark.c **** Author      : pry
   4:Source/rme_benchmark.c **** Date        : 04/09/2017
   5:Source/rme_benchmark.c **** Licence     : The Unlicense; see LICENSE for details.
   6:Source/rme_benchmark.c **** Description : The benchmark file for RME.
   7:Source/rme_benchmark.c **** ******************************************************************************/
   8:Source/rme_benchmark.c **** 
   9:Source/rme_benchmark.c **** /* Include *******************************************************************/
  10:Source/rme_benchmark.c **** #include"benchmark.h"
  11:Source/rme_benchmark.c **** /* Need to export error codes, and size of each object, in words! */
  12:Source/rme_benchmark.c **** /* End Include ***************************************************************/
  13:Source/rme_benchmark.c **** 
  14:Source/rme_benchmark.c **** /* Function:_RME_Tsc_Init *****************************************************
  15:Source/rme_benchmark.c **** Description : The initialization of timestamp counter. 19 secs before overflowing.
  16:Source/rme_benchmark.c **** Input       : None.
  17:Source/rme_benchmark.c **** Output      : None.
  18:Source/rme_benchmark.c **** Return      : None.
  19:Source/rme_benchmark.c **** ******************************************************************************/
  20:Source/rme_benchmark.c **** void _RME_Tsc_Init(void)
  21:Source/rme_benchmark.c **** {
 441              		.loc 1 21 1
 442              		.cfi_startproc
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 15


 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 04B02DE5 		str	fp, [sp, #-4]!
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 11, -4
 449 0004 00B08DE2 		add	fp, sp, #0
 450              		.cfi_def_cfa_register 11
  22:Source/rme_benchmark.c **** //    TIM_HandleTypeDef TIM2_Handle;
  23:Source/rme_benchmark.c **** //    
  24:Source/rme_benchmark.c **** //    /* Initialize timer 2 to run at the same speed as the CPU */
  25:Source/rme_benchmark.c **** //    TIM2_Handle.Instance=TIM2;
  26:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Prescaler=0;
  27:Source/rme_benchmark.c **** //    TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
  28:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Period=(ptr_t)(-1);
  29:Source/rme_benchmark.c **** //    TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
  30:Source/rme_benchmark.c **** //    HAL_TIM_Base_Init(&TIM2_Handle);
  31:Source/rme_benchmark.c **** //    __HAL_RCC_TIM2_CLK_ENABLE();
  32:Source/rme_benchmark.c **** //    __HAL_TIM_ENABLE(&TIM2_Handle);
  33:Source/rme_benchmark.c **** }
 451              		.loc 1 33 1
 452 0008 00F020E3 		nop
 453 000c 00D08BE2 		add	sp, fp, #0
 454              		.cfi_def_cfa_register 13
 455              		@ sp needed
 456 0010 04B09DE4 		ldr	fp, [sp], #4
 457              		.cfi_restore 11
 458              		.cfi_def_cfa_offset 0
 459 0014 1EFF2FE1 		bx	lr
 460              		.cfi_endproc
 461              	.LFE4:
 463              		.section	.text._RME_Stack_Init,"ax",%progbits
 464              		.align	2
 465              		.global	_RME_Stack_Init
 466              		.syntax unified
 467              		.arm
 469              	_RME_Stack_Init:
 470              	.LFB5:
  34:Source/rme_benchmark.c **** /* End Function:_RME_Tsc_Init ************************************************/
  35:Source/rme_benchmark.c **** 
  36:Source/rme_benchmark.c **** /* Function:_RME_Stack_Init ***************************************************
  37:Source/rme_benchmark.c **** Description : The thread's stack initializer, initializes the thread's stack.
  38:Source/rme_benchmark.c **** Input       : None.
  39:Source/rme_benchmark.c **** Output      : None.
  40:Source/rme_benchmark.c **** Return      : None.
  41:Source/rme_benchmark.c **** ******************************************************************************/
  42:Source/rme_benchmark.c **** ptr_t _RME_Stack_Init(ptr_t Stack, ptr_t Stub, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Para
  43:Source/rme_benchmark.c **** {
 471              		.loc 1 43 1
 472              		.cfi_startproc
 473              		@ args = 8, pretend = 0, frame = 24
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 476 0000 04B02DE5 		str	fp, [sp, #-4]!
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 11, -4
 479 0004 00B08DE2 		add	fp, sp, #0
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 16


 480              		.cfi_def_cfa_register 11
 481 0008 1CD04DE2 		sub	sp, sp, #28
 482 000c 10000BE5 		str	r0, [fp, #-16]
 483 0010 14100BE5 		str	r1, [fp, #-20]
 484 0014 18200BE5 		str	r2, [fp, #-24]
 485 0018 1C300BE5 		str	r3, [fp, #-28]
  44:Source/rme_benchmark.c ****     struct RME_CMX_Ret_Stack* Stack_Ptr;
  45:Source/rme_benchmark.c ****     
  46:Source/rme_benchmark.c ****     Stack_Ptr=(struct RME_CMX_Ret_Stack*)(Stack-RME_STACK_SAFE_SIZE-sizeof(struct RME_CMX_Ret_Stack
 486              		.loc 1 46 68
 487 001c 10301BE5 		ldr	r3, [fp, #-16]
 488 0020 703043E2 		sub	r3, r3, #112
 489              		.loc 1 46 14
 490 0024 08300BE5 		str	r3, [fp, #-8]
  47:Source/rme_benchmark.c ****     Stack_Ptr->R0=Param1;
 491              		.loc 1 47 18
 492 0028 08301BE5 		ldr	r3, [fp, #-8]
 493 002c 18201BE5 		ldr	r2, [fp, #-24]
 494 0030 002083E5 		str	r2, [r3]
  48:Source/rme_benchmark.c ****     Stack_Ptr->R1=Param2;
 495              		.loc 1 48 18
 496 0034 08301BE5 		ldr	r3, [fp, #-8]
 497 0038 1C201BE5 		ldr	r2, [fp, #-28]
 498 003c 042083E5 		str	r2, [r3, #4]
  49:Source/rme_benchmark.c ****     Stack_Ptr->R2=Param3;
 499              		.loc 1 49 18
 500 0040 08301BE5 		ldr	r3, [fp, #-8]
 501 0044 04209BE5 		ldr	r2, [fp, #4]
 502 0048 082083E5 		str	r2, [r3, #8]
  50:Source/rme_benchmark.c ****     Stack_Ptr->R3=Param4;
 503              		.loc 1 50 18
 504 004c 08301BE5 		ldr	r3, [fp, #-8]
 505 0050 08209BE5 		ldr	r2, [fp, #8]
 506 0054 0C2083E5 		str	r2, [r3, #12]
  51:Source/rme_benchmark.c ****     Stack_Ptr->R12=0;
 507              		.loc 1 51 19
 508 0058 08301BE5 		ldr	r3, [fp, #-8]
 509 005c 0020A0E3 		mov	r2, #0
 510 0060 102083E5 		str	r2, [r3, #16]
  52:Source/rme_benchmark.c ****     Stack_Ptr->LR=0;
 511              		.loc 1 52 18
 512 0064 08301BE5 		ldr	r3, [fp, #-8]
 513 0068 0020A0E3 		mov	r2, #0
 514 006c 142083E5 		str	r2, [r3, #20]
  53:Source/rme_benchmark.c ****     Stack_Ptr->PC=Stub;
 515              		.loc 1 53 18
 516 0070 08301BE5 		ldr	r3, [fp, #-8]
 517 0074 14201BE5 		ldr	r2, [fp, #-20]
 518 0078 182083E5 		str	r2, [r3, #24]
  54:Source/rme_benchmark.c ****     /* Initialize the xPSR to avoid a transition to ARM state */
  55:Source/rme_benchmark.c ****     Stack_Ptr->XPSR=0x01000200;
 519              		.loc 1 55 20
 520 007c 08201BE5 		ldr	r2, [fp, #-8]
 521 0080 023CA0E3 		mov	r3, #512
 522 0084 003140E3 		movt	r3, 256
 523 0088 1C3082E5 		str	r3, [r2, #28]
  56:Source/rme_benchmark.c ****     
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 17


  57:Source/rme_benchmark.c ****     return (ptr_t)Stack_Ptr;
 524              		.loc 1 57 12
 525 008c 08301BE5 		ldr	r3, [fp, #-8]
  58:Source/rme_benchmark.c **** }
 526              		.loc 1 58 1
 527 0090 0300A0E1 		mov	r0, r3
 528 0094 00D08BE2 		add	sp, fp, #0
 529              		.cfi_def_cfa_register 13
 530              		@ sp needed
 531 0098 04B09DE4 		ldr	fp, [sp], #4
 532              		.cfi_restore 11
 533              		.cfi_def_cfa_offset 0
 534 009c 1EFF2FE1 		bx	lr
 535              		.cfi_endproc
 536              	.LFE5:
 538              		.section	.text.RME_Same_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 539              		.align	2
 540              		.global	RME_Same_Prc_Thd_Switch_Test_Thd
 541              		.syntax unified
 542              		.arm
 544              	RME_Same_Prc_Thd_Switch_Test_Thd:
 545              	.LFB6:
  59:Source/rme_benchmark.c **** /* End Function:_RME_Stack_Init **********************************************/
  60:Source/rme_benchmark.c **** 
  61:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
  62:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
  63:Source/rme_benchmark.c **** Input       : None.
  64:Source/rme_benchmark.c **** Output      : None.
  65:Source/rme_benchmark.c **** Return      : None.
  66:Source/rme_benchmark.c **** ******************************************************************************/
  67:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
  68:Source/rme_benchmark.c **** {
 546              		.loc 1 68 1
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 24
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550 0000 00482DE9 		push	{fp, lr}
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 11, -8
 553              		.cfi_offset 14, -4
 554 0004 04B08DE2 		add	fp, sp, #4
 555              		.cfi_def_cfa 11, 4
 556 0008 18D04DE2 		sub	sp, sp, #24
 557 000c 10000BE5 		str	r0, [fp, #-16]
 558 0010 14100BE5 		str	r1, [fp, #-20]
 559 0014 18200BE5 		str	r2, [fp, #-24]
 560 0018 1C300BE5 		str	r3, [fp, #-28]
 561              	.L35:
  69:Source/rme_benchmark.c ****     ret_t Retval;
  70:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
  71:Source/rme_benchmark.c ****     while(1)
  72:Source/rme_benchmark.c ****     {
  73:Source/rme_benchmark.c ****         Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 562              		.loc 1 73 16 discriminator 1
 563 001c 0030A0E3 		mov	r3, #0
 564 0020 0020A0E3 		mov	r2, #0
 565 0024 0310A0E3 		mov	r1, #3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 18


 566 0028 0908A0E3 		mov	r0, #589824
 567 002c FEFFFFEB 		bl	RME_Svc
 568 0030 08000BE5 		str	r0, [fp, #-8]
 569              		.loc 1 73 15
 570 0034 F8FFFFEA 		b	.L35
 571              		.cfi_endproc
 572              	.LFE6:
 574              		.section	.rodata
 575              		.align	2
 576              	.LC0:
 577 0000 0D0A2870 		.ascii	"\015\012(ptr_t)(&RME_Stack[2047])= \000"
 577      74725F74 
 577      29282652 
 577      4D455F53 
 577      7461636B 
 578 001e 0000     		.align	2
 579              	.LC1:
 580 0020 0D0A496E 		.ascii	"\015\012Initialize the thread's stack Stack_Addr= \000"
 580      69746961 
 580      6C697A65 
 580      20746865 
 580      20746872 
 581 004d 000000   		.align	2
 582              	.LC2:
 583 0050 0D0A6372 		.ascii	"\015\012create a thread      retval= \000"
 583      65617465 
 583      20612074 
 583      68726561 
 583      64202020 
 584              		.align	2
 585              	.LC3:
 586 0070 0D0A4269 		.ascii	"\015\012Bind the thread to the processor retval= \000"
 586      6E642074 
 586      68652074 
 586      68726561 
 586      6420746F 
 587              		.align	2
 588              	.LC4:
 589 009c 0D0A5365 		.ascii	"\015\012Set the execution information retval= \000"
 589      74207468 
 589      65206578 
 589      65637574 
 589      696F6E20 
 590 00c5 000000   		.align	2
 591              	.LC5:
 592 00c8 0D0A5472 		.ascii	"\015\012Try to switch to that thread - should fail "
 592      7920746F 
 592      20737769 
 592      74636820 
 592      746F2074 
 593 00f5 20726574 		.ascii	" retval= \000"
 593      76616C3D 
 593      2000
 594 00ff 00       		.align	2
 595              	.LC6:
 596 0100 0D0A5472 		.ascii	"\015\012Try to switch to that thread  retval= \000"
 596      7920746F 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 19


 596      20737769 
 596      74636820 
 596      746F2074 
 597              		.section	.text.RME_Same_Prc_Thd_Switch_Test,"ax",%progbits
 598              		.align	2
 599              		.global	RME_Same_Prc_Thd_Switch_Test
 600              		.syntax unified
 601              		.arm
 603              	RME_Same_Prc_Thd_Switch_Test:
 604              	.LFB7:
  74:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
  75:Source/rme_benchmark.c ****                           0,
  76:Source/rme_benchmark.c ****                           0);
  77:Source/rme_benchmark.c ****     }
  78:Source/rme_benchmark.c **** }
  79:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test_Thd ****************************/
  80:Source/rme_benchmark.c **** 
  81:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test *************************************
  82:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
  83:Source/rme_benchmark.c **** Input       : None.
  84:Source/rme_benchmark.c **** Output      : None.
  85:Source/rme_benchmark.c **** Return      : None.
  86:Source/rme_benchmark.c **** ******************************************************************************/
  87:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test(void)
  88:Source/rme_benchmark.c **** {
 605              		.loc 1 88 1
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 16
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 00482DE9 		push	{fp, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 11, -8
 612              		.cfi_offset 14, -4
 613 0004 04B08DE2 		add	fp, sp, #4
 614              		.cfi_def_cfa 11, 4
 615 0008 18D04DE2 		sub	sp, sp, #24
  89:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
  90:Source/rme_benchmark.c ****     ret_t Retval;
  91:Source/rme_benchmark.c ****     cnt_t Count;
  92:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
  93:Source/rme_benchmark.c ****     ptr_t Temp;
  94:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
  95:Source/rme_benchmark.c ****     Stack_Addr=_RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 616              		.loc 1 95 16
 617 000c 88019FE5 		ldr	r0, .L40
 618 0010 001000E3 		movw	r1, #:lower16:RME_Thd_Stub
 619 0014 001040E3 		movt	r1, #:upper16:RME_Thd_Stub
 620 0018 0430A0E3 		mov	r3, #4
 621 001c 04308DE5 		str	r3, [sp, #4]
 622 0020 0330A0E3 		mov	r3, #3
 623 0024 00308DE5 		str	r3, [sp]
 624 0028 0230A0E3 		mov	r3, #2
 625 002c 0120A0E3 		mov	r2, #1
 626 0030 FEFFFFEB 		bl	_RME_Stack_Init
 627 0034 0C000BE5 		str	r0, [fp, #-12]
  96:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
  97:Source/rme_benchmark.c ****                                1, 2, 3, 4);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 20


  98:Source/rme_benchmark.c **** 
  99:Source/rme_benchmark.c ****     USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 628              		.loc 1 99 5
 629 0038 000000E3 		movw	r0, #:lower16:.LC0
 630 003c 000040E3 		movt	r0, #:upper16:.LC0
 631 0040 FEFFFFEB 		bl	USR_DBG_S
 100:Source/rme_benchmark.c ****         USR_DBG_H((ptr_t)(&RME_Stack[2047]));
 632              		.loc 1 100 9
 633 0044 50319FE5 		ldr	r3, .L40
 634 0048 0300A0E1 		mov	r0, r3
 635 004c FEFFFFEB 		bl	USR_DBG_H
 101:Source/rme_benchmark.c ****     USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 636              		.loc 1 101 5
 637 0050 000000E3 		movw	r0, #:lower16:.LC1
 638 0054 000040E3 		movt	r0, #:upper16:.LC1
 639 0058 FEFFFFEB 		bl	USR_DBG_S
 102:Source/rme_benchmark.c ****     USR_DBG_H(Stack_Addr);
 640              		.loc 1 102 5
 641 005c 0C001BE5 		ldr	r0, [fp, #-12]
 642 0060 FEFFFFEB 		bl	USR_DBG_H
 103:Source/rme_benchmark.c **** 
 104:Source/rme_benchmark.c ****     /* There are still many bugs in the kernel. Need a white-box test to guarantee
 105:Source/rme_benchmark.c ****      * that it is free of bugs. Find a scheme to do that */
 106:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 643              		.loc 1 106 12
 644 0064 093AA0E3 		mov	r3, #36864
 645 0068 1F20A0E3 		mov	r2, #31
 646 006c 022040E3 		movt	r2, 2
 647 0070 0810A0E3 		mov	r1, #8
 648 0074 051040E3 		movt	r1, 5
 649 0078 1908A0E3 		mov	r0, #1638400
 650 007c FEFFFFEB 		bl	RME_Svc
 651 0080 10000BE5 		str	r0, [fp, #-16]
 107:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 108:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 109:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);
 110:Source/rme_benchmark.c ****     USR_DBG_S("\r\ncreate a thread      retval= ");
 652              		.loc 1 110 5
 653 0084 000000E3 		movw	r0, #:lower16:.LC2
 654 0088 000040E3 		movt	r0, #:upper16:.LC2
 655 008c FEFFFFEB 		bl	USR_DBG_S
 111:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 656              		.loc 1 111 5
 657 0090 10001BE5 		ldr	r0, [fp, #-16]
 658 0094 FEFFFFEB 		bl	USR_DBG_I
 112:Source/rme_benchmark.c **** 
 113:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 114:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,RME_BOOT_BENCH_THD,
 659              		.loc 1 114 12
 660 0098 0030A0E3 		mov	r3, #0
 661 009c 0220A0E3 		mov	r2, #2
 662 00a0 0B2040E3 		movt	r2, 11
 663 00a4 0E19A0E3 		mov	r1, #229376
 664 00a8 0800A0E3 		mov	r0, #8
 665 00ac 1B0040E3 		movt	r0, 27
 666 00b0 FEFFFFEB 		bl	RME_Svc
 667 00b4 10000BE5 		str	r0, [fp, #-16]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 21


 115:Source/rme_benchmark.c ****     		          RME_PARAM_D1(RME_BOOT_INIT_THD)|RME_PARAM_D0(RME_CID_NULL),
 116:Source/rme_benchmark.c **** 					  RME_PARAM_D1(11)|RME_PARAM_D0(RME_BOOT_INIT_PRC),
 117:Source/rme_benchmark.c ****                       0);
 118:Source/rme_benchmark.c ****     USR_DBG_S("\r\nBind the thread to the processor retval= ");
 668              		.loc 1 118 5
 669 00b8 000000E3 		movw	r0, #:lower16:.LC3
 670 00bc 000040E3 		movt	r0, #:upper16:.LC3
 671 00c0 FEFFFFEB 		bl	USR_DBG_S
 119:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 672              		.loc 1 119 5
 673 00c4 10001BE5 		ldr	r0, [fp, #-16]
 674 00c8 FEFFFFEB 		bl	USR_DBG_I
 120:Source/rme_benchmark.c ****     
 121:Source/rme_benchmark.c ****     /* Set the execution information */
 122:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,0,
 675              		.loc 1 122 12
 676 00cc 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Switch_Test_Thd
 677 00d0 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Switch_Test_Thd
 678 00d4 0C301BE5 		ldr	r3, [fp, #-12]
 679 00d8 0810A0E3 		mov	r1, #8
 680 00dc 0608A0E3 		mov	r0, #393216
 681 00e0 FEFFFFEB 		bl	RME_Svc
 682 00e4 10000BE5 		str	r0, [fp, #-16]
 123:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 124:Source/rme_benchmark.c ****                       (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 125:Source/rme_benchmark.c ****                       Stack_Addr);
 126:Source/rme_benchmark.c **** 
 127:Source/rme_benchmark.c ****     USR_DBG_S("\r\nSet the execution information retval= ");
 683              		.loc 1 127 5
 684 00e8 000000E3 		movw	r0, #:lower16:.LC4
 685 00ec 000040E3 		movt	r0, #:upper16:.LC4
 686 00f0 FEFFFFEB 		bl	USR_DBG_S
 128:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 687              		.loc 1 128 5
 688 00f4 10001BE5 		ldr	r0, [fp, #-16]
 689 00f8 FEFFFFEB 		bl	USR_DBG_I
 129:Source/rme_benchmark.c **** 
 130:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 131:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,0,
 690              		.loc 1 131 12
 691 00fc 803609E3 		movw	r3, #38528
 692 0100 983040E3 		movt	r3, 152
 693 0104 0320A0E3 		mov	r2, #3
 694 0108 0810A0E3 		mov	r1, #8
 695 010c 0207A0E3 		mov	r0, #524288
 696 0110 FEFFFFEB 		bl	RME_Svc
 697 0114 10000BE5 		str	r0, [fp, #-16]
 132:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 133:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 134:Source/rme_benchmark.c ****                       10000000);
 135:Source/rme_benchmark.c ****     
 136:Source/rme_benchmark.c ****     /* Try to switch to that thread - should fail */
 137:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 698              		.loc 1 137 12
 699 0118 0030A0E3 		mov	r3, #0
 700 011c 0020A0E3 		mov	r2, #0
 701 0120 0810A0E3 		mov	r1, #8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 22


 702 0124 0908A0E3 		mov	r0, #589824
 703 0128 FEFFFFEB 		bl	RME_Svc
 704 012c 10000BE5 		str	r0, [fp, #-16]
 138:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 139:Source/rme_benchmark.c ****                       0,
 140:Source/rme_benchmark.c ****                       0);
 141:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTry to switch to that thread - should fail  retval= ");
 705              		.loc 1 141 5
 706 0130 000000E3 		movw	r0, #:lower16:.LC5
 707 0134 000040E3 		movt	r0, #:upper16:.LC5
 708 0138 FEFFFFEB 		bl	USR_DBG_S
 142:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 709              		.loc 1 142 5
 710 013c 10001BE5 		ldr	r0, [fp, #-16]
 711 0140 FEFFFFEB 		bl	USR_DBG_I
 143:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 144:Source/rme_benchmark.c ****     * composite 324. opted max:323
 145:Source/rme_benchmark.c ****     * all:33.0
 146:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 147:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 148:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 149:Source/rme_benchmark.c ****     * total:16.57
 150:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 151:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 152:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 153:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 154:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 155:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 156:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 157:Source/rme_benchmark.c ****     */
 158:Source/rme_benchmark.c ****     _RME_Tsc_Init();
 712              		.loc 1 158 5
 713 0144 FEFFFFEB 		bl	_RME_Tsc_Init
 159:Source/rme_benchmark.c ****     //for(Count=0;Count<10000;Count++)
 160:Source/rme_benchmark.c ****     for(Count=0;Count<10;Count++)
 714              		.loc 1 160 14
 715 0148 0030A0E3 		mov	r3, #0
 716 014c 08300BE5 		str	r3, [fp, #-8]
 717              		.loc 1 160 5
 718 0150 0D0000EA 		b	.L37
 719              	.L38:
 161:Source/rme_benchmark.c ****     {
 162:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 163:Source/rme_benchmark.c ****         Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 720              		.loc 1 163 16
 721 0154 0030A0E3 		mov	r3, #0
 722 0158 0020A0E3 		mov	r2, #0
 723 015c 0810A0E3 		mov	r1, #8
 724 0160 0908A0E3 		mov	r0, #589824
 725 0164 FEFFFFEB 		bl	RME_Svc
 726 0168 10000BE5 		str	r0, [fp, #-16]
 164:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 165:Source/rme_benchmark.c ****                           0,
 166:Source/rme_benchmark.c ****                           0);
 167:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 168:Source/rme_benchmark.c ****        // Time[Count]=Temp-8;
 169:Source/rme_benchmark.c ****         USR_DBG_S("\r\nTry to switch to that thread  retval= ");
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 23


 727              		.loc 1 169 9
 728 016c 000000E3 		movw	r0, #:lower16:.LC6
 729 0170 000040E3 		movt	r0, #:upper16:.LC6
 730 0174 FEFFFFEB 		bl	USR_DBG_S
 170:Source/rme_benchmark.c ****         USR_DBG_I(Retval);
 731              		.loc 1 170 9
 732 0178 10001BE5 		ldr	r0, [fp, #-16]
 733 017c FEFFFFEB 		bl	USR_DBG_I
 160:Source/rme_benchmark.c ****     {
 734              		.loc 1 160 31 discriminator 3
 735 0180 08301BE5 		ldr	r3, [fp, #-8]
 736 0184 013083E2 		add	r3, r3, #1
 737 0188 08300BE5 		str	r3, [fp, #-8]
 738              	.L37:
 160:Source/rme_benchmark.c ****     {
 739              		.loc 1 160 22 discriminator 1
 740 018c 08301BE5 		ldr	r3, [fp, #-8]
 741 0190 090053E3 		cmp	r3, #9
 742 0194 EEFFFFDA 		ble	.L38
 743              	.L39:
 171:Source/rme_benchmark.c ****     }
 172:Source/rme_benchmark.c ****     
 173:Source/rme_benchmark.c ****     while(1);
 744              		.loc 1 173 10
 745 0198 FEFFFFEA 		b	.L39
 746              	.L41:
 747              		.align	2
 748              	.L40:
 749 019c FC1F0000 		.word	RME_Stack+8188
 750              		.cfi_endproc
 751              	.LFE7:
 753              		.section	.text.RME_Diff_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 754              		.align	2
 755              		.global	RME_Diff_Prc_Thd_Switch_Test_Thd
 756              		.syntax unified
 757              		.arm
 759              	RME_Diff_Prc_Thd_Switch_Test_Thd:
 760              	.LFB8:
 174:Source/rme_benchmark.c **** }
 175:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test ********************************/
 176:Source/rme_benchmark.c **** 
 177:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test_Thd *********************************
 178:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
 179:Source/rme_benchmark.c **** Input       : None.
 180:Source/rme_benchmark.c **** Output      : None.
 181:Source/rme_benchmark.c **** Return      : None.
 182:Source/rme_benchmark.c **** ******************************************************************************/
 183:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
 184:Source/rme_benchmark.c **** {
 761              		.loc 1 184 1
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 24
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 0000 00482DE9 		push	{fp, lr}
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 11, -8
 768              		.cfi_offset 14, -4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 24


 769 0004 04B08DE2 		add	fp, sp, #4
 770              		.cfi_def_cfa 11, 4
 771 0008 18D04DE2 		sub	sp, sp, #24
 772 000c 10000BE5 		str	r0, [fp, #-16]
 773 0010 14100BE5 		str	r1, [fp, #-20]
 774 0014 18200BE5 		str	r2, [fp, #-24]
 775 0018 1C300BE5 		str	r3, [fp, #-28]
 776              	.L43:
 185:Source/rme_benchmark.c ****     ret_t Retval;
 186:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
 187:Source/rme_benchmark.c ****     while(1)
 188:Source/rme_benchmark.c ****     {
 189:Source/rme_benchmark.c ****         Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 777              		.loc 1 189 16 discriminator 1
 778 001c 0030A0E3 		mov	r3, #0
 779 0020 0020A0E3 		mov	r2, #0
 780 0024 0310A0E3 		mov	r1, #3
 781 0028 0908A0E3 		mov	r0, #589824
 782 002c FEFFFFEB 		bl	RME_Svc
 783 0030 08000BE5 		str	r0, [fp, #-8]
 784              		.loc 1 189 15
 785 0034 F8FFFFEA 		b	.L43
 786              		.cfi_endproc
 787              	.LFE8:
 789              		.section	.text.RME_Diff_Prc_Thd_Switch_Test,"ax",%progbits
 790              		.align	2
 791              		.global	RME_Diff_Prc_Thd_Switch_Test
 792              		.syntax unified
 793              		.arm
 795              	RME_Diff_Prc_Thd_Switch_Test:
 796              	.LFB9:
 190:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
 191:Source/rme_benchmark.c ****                           0,
 192:Source/rme_benchmark.c ****                           0);
 193:Source/rme_benchmark.c ****     }
 194:Source/rme_benchmark.c **** }
 195:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test_Thd ****************************/
 196:Source/rme_benchmark.c **** 
 197:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test *************************************
 198:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 199:Source/rme_benchmark.c **** Input       : None.
 200:Source/rme_benchmark.c **** Output      : None.
 201:Source/rme_benchmark.c **** Return      : None.
 202:Source/rme_benchmark.c **** ******************************************************************************/
 203:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test(void)
 204:Source/rme_benchmark.c **** {
 797              		.loc 1 204 1
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 00482DE9 		push	{fp, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 11, -8
 804              		.cfi_offset 14, -4
 805 0004 04B08DE2 		add	fp, sp, #4
 806              		.cfi_def_cfa 11, 4
 807 0008 18D04DE2 		sub	sp, sp, #24
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 25


 205:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 206:Source/rme_benchmark.c ****     ret_t Retval;
 207:Source/rme_benchmark.c ****     cnt_t Count;
 208:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 209:Source/rme_benchmark.c ****     ptr_t Temp;
 210:Source/rme_benchmark.c ****     ptr_t Frontier;
 211:Source/rme_benchmark.c ****     
 212:Source/rme_benchmark.c ****     Frontier=RME_BOOT_BENCH_KOM_FRONTIER;
 808              		.loc 1 212 13
 809 000c 093AA0E3 		mov	r3, #36864
 810 0010 0C300BE5 		str	r3, [fp, #-12]
 213:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 214:Source/rme_benchmark.c ****     Stack_Addr=_RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 811              		.loc 1 214 16
 812 0014 10019FE5 		ldr	r0, .L48
 813 0018 001000E3 		movw	r1, #:lower16:RME_Thd_Stub
 814 001c 001040E3 		movt	r1, #:upper16:RME_Thd_Stub
 815 0020 0430A0E3 		mov	r3, #4
 816 0024 04308DE5 		str	r3, [sp, #4]
 817 0028 0330A0E3 		mov	r3, #3
 818 002c 00308DE5 		str	r3, [sp]
 819 0030 0230A0E3 		mov	r3, #2
 820 0034 0120A0E3 		mov	r2, #1
 821 0038 FEFFFFEB 		bl	_RME_Stack_Init
 822 003c 10000BE5 		str	r0, [fp, #-16]
 215:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 216:Source/rme_benchmark.c ****                                1, 2, 3, 4);
 217:Source/rme_benchmark.c ****     
 218:Source/rme_benchmark.c ****     /* Create the page table for the whole address space range */
 219:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 823              		.loc 1 219 12
 824 0040 0130A0E3 		mov	r3, #1
 825 0044 0C201BE5 		ldr	r2, [fp, #-12]
 826 0048 D31900E3 		movw	r1, #2515
 827 004c 051040E3 		movt	r1, 5
 828 0050 0F08A0E3 		mov	r0, #983040
 829 0054 FEFFFFEB 		bl	RME_Svc
 830 0058 14000BE5 		str	r0, [fp, #-20]
 220:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|
 221:Source/rme_benchmark.c ****                       RME_PARAM_O1(29)|RME_PARAM_O0(3),
 222:Source/rme_benchmark.c ****                       Frontier,
 223:Source/rme_benchmark.c ****                       1);
 224:Source/rme_benchmark.c **** //    Frontier+=;
 225:Source/rme_benchmark.c **** //    /* Create the page table for the SRAM range */
 226:Source/rme_benchmark.c **** //    Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 227:Source/rme_benchmark.c **** //                      RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_SRAM)|
 228:Source/rme_benchmark.c **** //                      RME_PARAM_O1(16)|RME_PARAM_O0(3),
 229:Source/rme_benchmark.c **** //                      Frontier,
 230:Source/rme_benchmark.c **** //                      0x20000001);
 231:Source/rme_benchmark.c **** //    Frontier+=;
 232:Source/rme_benchmark.c **** //    /* Map the pages into the top-level and the second-level */
 233:Source/rme_benchmark.c **** //    RME_CAP_OP(RME_SVC_PGT_ADD,0,
 234:Source/rme_benchmark.c **** //               RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|0,
 235:Source/rme_benchmark.c **** //               RME_PARAM_D1(RME_BOOT_INIT_PGT)|0,
 236:Source/rme_benchmark.c **** //               |0)
 237:Source/rme_benchmark.c ****                       
 238:Source/rme_benchmark.c ****                   
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 26


 239:Source/rme_benchmark.c ****     
 240:Source/rme_benchmark.c ****     
 241:Source/rme_benchmark.c ****     
 242:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 831              		.loc 1 242 12
 832 005c 093AA0E3 		mov	r3, #36864
 833 0060 1F20A0E3 		mov	r2, #31
 834 0064 022040E3 		movt	r2, 2
 835 0068 0810A0E3 		mov	r1, #8
 836 006c 051040E3 		movt	r1, 5
 837 0070 1908A0E3 		mov	r0, #1638400
 838 0074 FEFFFFEB 		bl	RME_Svc
 839 0078 14000BE5 		str	r0, [fp, #-20]
 243:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 244:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 245:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);
 246:Source/rme_benchmark.c ****     
 247:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 248:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,0,
 840              		.loc 1 248 12
 841 007c 0030A0E3 		mov	r3, #0
 842 0080 0320A0E3 		mov	r2, #3
 843 0084 0810A0E3 		mov	r1, #8
 844 0088 1B08A0E3 		mov	r0, #1769472
 845 008c FEFFFFEB 		bl	RME_Svc
 846 0090 14000BE5 		str	r0, [fp, #-20]
 249:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 250:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 251:Source/rme_benchmark.c ****                       0);
 252:Source/rme_benchmark.c ****     
 253:Source/rme_benchmark.c ****     /* Set the execution information */
 254:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,0,
 847              		.loc 1 254 12
 848 0094 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Switch_Test_Thd
 849 0098 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Switch_Test_Thd
 850 009c 10301BE5 		ldr	r3, [fp, #-16]
 851 00a0 0810A0E3 		mov	r1, #8
 852 00a4 0608A0E3 		mov	r0, #393216
 853 00a8 FEFFFFEB 		bl	RME_Svc
 854 00ac 14000BE5 		str	r0, [fp, #-20]
 255:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 256:Source/rme_benchmark.c ****                       (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 257:Source/rme_benchmark.c ****                       Stack_Addr);
 258:Source/rme_benchmark.c ****                       
 259:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 260:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,0,
 855              		.loc 1 260 12
 856 00b0 803609E3 		movw	r3, #38528
 857 00b4 983040E3 		movt	r3, 152
 858 00b8 0320A0E3 		mov	r2, #3
 859 00bc 0810A0E3 		mov	r1, #8
 860 00c0 0207A0E3 		mov	r0, #524288
 861 00c4 FEFFFFEB 		bl	RME_Svc
 862 00c8 14000BE5 		str	r0, [fp, #-20]
 261:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 262:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 263:Source/rme_benchmark.c ****                       10000000);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 27


 264:Source/rme_benchmark.c ****     
 265:Source/rme_benchmark.c ****     /* Try to switch to that thread - should fail */
 266:Source/rme_benchmark.c ****     Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 863              		.loc 1 266 12
 864 00cc 0030A0E3 		mov	r3, #0
 865 00d0 0020A0E3 		mov	r2, #0
 866 00d4 0810A0E3 		mov	r1, #8
 867 00d8 0908A0E3 		mov	r0, #589824
 868 00dc FEFFFFEB 		bl	RME_Svc
 869 00e0 14000BE5 		str	r0, [fp, #-20]
 267:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 268:Source/rme_benchmark.c ****                       0,
 269:Source/rme_benchmark.c ****                       0);
 270:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 271:Source/rme_benchmark.c ****     * composite 324. opted max:323
 272:Source/rme_benchmark.c ****     * all:33.0
 273:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 274:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 275:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 276:Source/rme_benchmark.c ****     * total:16.57
 277:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 278:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 279:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 280:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 281:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 282:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 283:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 284:Source/rme_benchmark.c ****     */
 285:Source/rme_benchmark.c ****     _RME_Tsc_Init();
 870              		.loc 1 285 5
 871 00e4 FEFFFFEB 		bl	_RME_Tsc_Init
 286:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 872              		.loc 1 286 14
 873 00e8 0030A0E3 		mov	r3, #0
 874 00ec 08300BE5 		str	r3, [fp, #-8]
 875              		.loc 1 286 5
 876 00f0 080000EA 		b	.L45
 877              	.L46:
 287:Source/rme_benchmark.c ****     {
 288:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 289:Source/rme_benchmark.c ****         Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 878              		.loc 1 289 16
 879 00f4 0030A0E3 		mov	r3, #0
 880 00f8 0020A0E3 		mov	r2, #0
 881 00fc 0810A0E3 		mov	r1, #8
 882 0100 0908A0E3 		mov	r0, #589824
 883 0104 FEFFFFEB 		bl	RME_Svc
 884 0108 14000BE5 		str	r0, [fp, #-20]
 286:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 885              		.loc 1 286 34 discriminator 3
 886 010c 08301BE5 		ldr	r3, [fp, #-8]
 887 0110 013083E2 		add	r3, r3, #1
 888 0114 08300BE5 		str	r3, [fp, #-8]
 889              	.L45:
 286:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 890              		.loc 1 286 22 discriminator 1
 891 0118 08301BE5 		ldr	r3, [fp, #-8]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 28


 892 011c 0F2702E3 		movw	r2, #9999
 893 0120 020053E1 		cmp	r3, r2
 894 0124 F2FFFFDA 		ble	.L46
 895              	.L47:
 290:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 291:Source/rme_benchmark.c ****                           0,
 292:Source/rme_benchmark.c ****                           0);
 293:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 294:Source/rme_benchmark.c ****         //Time[Count]=Temp-8;
 295:Source/rme_benchmark.c ****     }
 296:Source/rme_benchmark.c ****     
 297:Source/rme_benchmark.c ****     while(1);
 896              		.loc 1 297 10
 897 0128 FEFFFFEA 		b	.L47
 898              	.L49:
 899              		.align	2
 900              	.L48:
 901 012c FC1F0000 		.word	RME_Stack+8188
 902              		.cfi_endproc
 903              	.LFE9:
 905              		.section	.rodata
 906 0129 000000   		.align	2
 907              	.LC7:
 908 012c 0D0A6265 		.ascii	"\015\012begin test \000"
 908      67696E20 
 908      74657374 
 908      2000
 909              		.section	.text.RME_Benchmark,"ax",%progbits
 910              		.align	2
 911              		.global	RME_Benchmark
 912              		.syntax unified
 913              		.arm
 915              	RME_Benchmark:
 916              	.LFB10:
 298:Source/rme_benchmark.c **** }
 299:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test ********************************/
 300:Source/rme_benchmark.c **** 
 301:Source/rme_benchmark.c **** /* Function:RME_Benchmark *****************************************************
 302:Source/rme_benchmark.c **** Description : The benchmark entry, also the init thread.
 303:Source/rme_benchmark.c **** Input       : None.
 304:Source/rme_benchmark.c **** Output      : None.
 305:Source/rme_benchmark.c **** Return      : None.
 306:Source/rme_benchmark.c **** ******************************************************************************/
 307:Source/rme_benchmark.c **** void RME_Benchmark(void)
 308:Source/rme_benchmark.c **** {
 917              		.loc 1 308 1
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 1, uses_anonymous_args = 0
 921 0000 00482DE9 		push	{fp, lr}
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925 0004 04B08DE2 		add	fp, sp, #4
 926              		.cfi_def_cfa 11, 4
 309:Source/rme_benchmark.c ****     USR_DBG_S("\r\nbegin test ");
 927              		.loc 1 309 5
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 29


 928 0008 000000E3 		movw	r0, #:lower16:.LC7
 929 000c 000040E3 		movt	r0, #:upper16:.LC7
 930 0010 FEFFFFEB 		bl	USR_DBG_S
 310:Source/rme_benchmark.c ****     USR_DBG_H(0x111111);
 931              		.loc 1 310 5
 932 0014 110101E3 		movw	r0, #4369
 933 0018 110040E3 		movt	r0, 17
 934 001c FEFFFFEB 		bl	USR_DBG_H
 311:Source/rme_benchmark.c ****     RME_Same_Prc_Thd_Switch_Test();
 935              		.loc 1 311 5
 936 0020 FEFFFFEB 		bl	RME_Same_Prc_Thd_Switch_Test
 312:Source/rme_benchmark.c **** }
 937              		.loc 1 312 1
 938 0024 00F020E3 		nop
 939 0028 0088BDE8 		pop	{fp, pc}
 940              		.cfi_endproc
 941              	.LFE10:
 943              		.text
 944              	.Letext0:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccBBZTwm.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 rme_benchmark.c
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:25     .bss.RME_Stack:00000000 RME_Stack
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:22     .bss.RME_Stack:00000000 $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:32     .bss.Time:00000000 Time
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:29     .bss.Time:00000000 $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:39     .bss.RME_Bench_Buf:00000000 RME_Bench_Buf
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:36     .bss.RME_Bench_Buf:00000000 $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:42     .text.__USR_Putchar:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:47     .text.__USR_Putchar:00000000 __USR_Putchar
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:91     .text.USR_DBG_I:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:96     .text.USR_DBG_I:00000000 USR_DBG_I
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:246    .text.USR_DBG_H:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:251    .text.USR_DBG_H:00000000 USR_DBG_H
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:367    .text.USR_DBG_S:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:372    .text.USR_DBG_S:00000000 USR_DBG_S
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:434    .text._RME_Tsc_Init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:439    .text._RME_Tsc_Init:00000000 _RME_Tsc_Init
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:464    .text._RME_Stack_Init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:469    .text._RME_Stack_Init:00000000 _RME_Stack_Init
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:539    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:544    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 RME_Same_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:575    .rodata:00000000 $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:576    .rodata:00000000 .LC0
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:579    .rodata:00000020 .LC1
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:582    .rodata:00000050 .LC2
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:585    .rodata:00000070 .LC3
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:588    .rodata:0000009c .LC4
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:591    .rodata:000000c8 .LC5
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:595    .rodata:00000100 .LC6
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:598    .text.RME_Same_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:603    .text.RME_Same_Prc_Thd_Switch_Test:00000000 RME_Same_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:749    .text.RME_Same_Prc_Thd_Switch_Test:0000019c $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:754    .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:759    .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 RME_Diff_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:790    .text.RME_Diff_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:795    .text.RME_Diff_Prc_Thd_Switch_Test:00000000 RME_Diff_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:901    .text.RME_Diff_Prc_Thd_Switch_Test:0000012c $d
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:907    .rodata:0000012c .LC7
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:910    .text.RME_Benchmark:00000000 $a
C:\Users\even\AppData\Local\Temp\ccBBZTwm.s:915    .text.RME_Benchmark:00000000 RME_Benchmark
                           .group:00000000 wm4.0.3b9f63523dc4e8d86e863c7e7e762be7
                           .group:00000000 wm4.rme.h.11.105c42759f88404be372052d8d99e5e6
                           .group:00000000 wm4.benchmark.h.4.4fbf7d42e85f7460496b2d1dcd83513f

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_idivmod
RME_Svc
RME_Thd_Stub
