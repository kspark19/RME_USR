ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 1


   1              		.cpu cortex-a9
   2              		.arch armv7-a
   3              		.fpu neon-fp16
   4              		.arch_extension mp
   5              		.arch_extension sec
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"rme_benchmark.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Source/rme_benchmark.c"
  20              		.global	RME_Stack1
  21              		.section	.bss.RME_Stack1,"aw",%nobits
  22              		.align	2
  25              	RME_Stack1:
  26 0000 00000000 		.space	8192
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.global	RME_Stack2
  28              		.section	.bss.RME_Stack2,"aw",%nobits
  29              		.align	2
  32              	RME_Stack2:
  33 0000 00000000 		.space	8192
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	RME_Stack3
  35              		.section	.bss.RME_Stack3,"aw",%nobits
  36              		.align	2
  39              	RME_Stack3:
  40 0000 00000000 		.space	8192
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.global	RME_Stack4
  42              		.section	.bss.RME_Stack4,"aw",%nobits
  43              		.align	2
  46              	RME_Stack4:
  47 0000 00000000 		.space	8192
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	RME_Stack5
  49              		.section	.bss.RME_Stack5,"aw",%nobits
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 2


  50              		.align	2
  53              	RME_Stack5:
  54 0000 00000000 		.space	8192
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	Time
  56              		.section	.bss.Time,"aw",%nobits
  57              		.align	2
  60              	Time:
  61 0000 00000000 		.space	20000
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.global	RME_Bench_Buf
  63              		.section	.bss.RME_Bench_Buf,"aw",%nobits
  64              		.align	2
  67              	RME_Bench_Buf:
  68 0000 00000000 		.space	1024
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.text.__USR_Putchar,"ax",%progbits
  70              		.align	2
  71              		.global	__USR_Putchar
  72              		.syntax unified
  73              		.arm
  75              	__USR_Putchar:
  76              	.LFB0:
  77              		.file 2 "Include/benchmark.h"
   1:Include/benchmark.h **** 
   2:Include/benchmark.h **** #include"rme.h"
   3:Include/benchmark.h **** /* Word size */
   4:Include/benchmark.h **** #define RME_WORD_BIT                                RME_POW2(RME_WORD_ORDER)
   5:Include/benchmark.h **** #define RME_WORD_BYTE                               (RME_WORD_BIT>>3)
   6:Include/benchmark.h **** #define RME_WORD_BIT_O1                             (RME_WORD_BYTE)
   7:Include/benchmark.h **** #define RME_WORD_BIT_O2                             (RME_WORD_BYTE*2U)
   8:Include/benchmark.h **** #define RME_WORD_BIT_O3                             (RME_WORD_BYTE*3U)
   9:Include/benchmark.h **** #define RME_WORD_BIT_O4                             (RME_WORD_BYTE*4U)
  10:Include/benchmark.h **** #define RME_WORD_BIT_O5                             (RME_WORD_BYTE*5U)
  11:Include/benchmark.h **** #define RME_WORD_BIT_O6                             (RME_WORD_BYTE*6U)
  12:Include/benchmark.h **** #define RME_WORD_BIT_O7                             (RME_WORD_BYTE*7U)
  13:Include/benchmark.h **** #define RME_WORD_BIT_Q1                             RME_WORD_BIT_O2
  14:Include/benchmark.h **** #define RME_WORD_BIT_Q2                             RME_WORD_BIT_O4
  15:Include/benchmark.h **** #define RME_WORD_BIT_Q3                             RME_WORD_BIT_O6
  16:Include/benchmark.h **** #define RME_WORD_BIT_D1                             RME_WORD_BIT_Q2
  17:Include/benchmark.h **** /* Thread creation */
  18:Include/benchmark.h **** #define RME_THD_SVC(ATTR,IS_HYP,SVC)                (RME_FIELD(ATTR,7U)|RME_FIELD(IS_HYP,6U)|(SVC))
  19:Include/benchmark.h **** /* UART peripheral address */
  20:Include/benchmark.h **** #define RME_A7A_UART_CONTROL      					(*((volatile unsigned int*)(0xE0001000)))
  21:Include/benchmark.h **** #define RME_A7A_UART_MODE         					(*((volatile unsigned int*)(0xE0001004)))
  22:Include/benchmark.h **** #define RME_A7A_UART_BRGEN        					(*((volatile unsigned int*)(0xE0001018)))
  23:Include/benchmark.h **** #define RME_A7A_UART_STATUS       					(*((volatile unsigned int*)(0xE000102C)))
  24:Include/benchmark.h **** #define RME_A7A_UART_FIFO         					(*((volatile unsigned int*)(0xE0001030)))
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 3


  25:Include/benchmark.h **** #define RME_A7A_UART_BRDIV        					(*((volatile unsigned int*)(0xE0001034)))
  26:Include/benchmark.h **** #define RME_A7A_UART_STATUS_TXE   					(1U<<3)
  27:Include/benchmark.h **** //#define RME_DBG_S(STR)                              RME_Str_Print((const signed char*)(STR))
  28:Include/benchmark.h **** /* NULL */
  29:Include/benchmark.h **** #define RME_NULL 									0
  30:Include/benchmark.h **** 
  31:Include/benchmark.h **** #define RME_A7A_PUTCHAR(CHAR) \
  32:Include/benchmark.h **** do \
  33:Include/benchmark.h **** { \
  34:Include/benchmark.h ****     while((RME_A7A_UART_STATUS&RME_A7A_UART_STATUS_TXE)==0); \
  35:Include/benchmark.h **** 	RME_A7A_UART_FIFO=(CHAR); \
  36:Include/benchmark.h **** } \
  37:Include/benchmark.h **** while(0)
  38:Include/benchmark.h **** 
  39:Include/benchmark.h **** /* Define ********************************************************************/
  40:Include/benchmark.h **** /* Types */
  41:Include/benchmark.h **** typedef signed int                          s32;
  42:Include/benchmark.h **** typedef signed short                        s16;
  43:Include/benchmark.h **** typedef signed char                         s8;
  44:Include/benchmark.h **** typedef unsigned int                        u32;
  45:Include/benchmark.h **** typedef unsigned short                      u16;
  46:Include/benchmark.h **** typedef unsigned char                       u8;
  47:Include/benchmark.h **** typedef s32                                 tid_t;
  48:Include/benchmark.h **** typedef u32                       			ptr_t;
  49:Include/benchmark.h **** typedef s32                       			cnt_t;
  50:Include/benchmark.h **** typedef s32 								cid_t;
  51:Include/benchmark.h **** typedef s32                        			ret_t;
  52:Include/benchmark.h **** 
  53:Include/benchmark.h **** #define BENCHMARK_STACK_SIZE 4096
  54:Include/benchmark.h **** /* System service stub */
  55:Include/benchmark.h **** //#define RME_CAP_OP(OP,CAPID,ARG1,ARG2,ARG3) RME_Svc(((OP)<<(sizeof(ptr_t)*4)|(CAPID)),ARG1,ARG2,A
  56:Include/benchmark.h **** #define RME_PARAM_D_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*4))
  57:Include/benchmark.h **** #define RME_PARAM_Q_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*6))
  58:Include/benchmark.h **** #define RME_PARAM_O_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*7))
  59:Include/benchmark.h **** /* The parameter passing - not to be confused with kernel macros. These macros just place the param
  60:Include/benchmark.h **** #define RME_PARAM_D1(X)                     (((X)&RME_PARAM_D_MASK)<<(sizeof(ptr_t)*4))
  61:Include/benchmark.h **** #define RME_PARAM_D0(X)                     ((X)&RME_PARAM_D_MASK)
  62:Include/benchmark.h **** 
  63:Include/benchmark.h **** #define RME_PARAM_Q3(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*6))
  64:Include/benchmark.h **** #define RME_PARAM_Q2(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*4))
  65:Include/benchmark.h **** #define RME_PARAM_Q1(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*2))
  66:Include/benchmark.h **** #define RME_PARAM_Q0(X)                     ((X)&RME_PARAM_Q_MASK)
  67:Include/benchmark.h **** 
  68:Include/benchmark.h **** #define RME_PARAM_O7(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*7))
  69:Include/benchmark.h **** #define RME_PARAM_O6(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*6))
  70:Include/benchmark.h **** #define RME_PARAM_O5(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*5))
  71:Include/benchmark.h **** #define RME_PARAM_O4(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*4))
  72:Include/benchmark.h **** #define RME_PARAM_O3(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*3))
  73:Include/benchmark.h **** #define RME_PARAM_O2(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*2))
  74:Include/benchmark.h **** #define RME_PARAM_O1(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*1))
  75:Include/benchmark.h **** #define RME_PARAM_O0(X)                     ((X)&RME_PARAM_O_MASK)
  76:Include/benchmark.h **** 
  77:Include/benchmark.h **** 
  78:Include/benchmark.h **** /* Bit mask */
  79:Include/benchmark.h **** #define RME_MASK_FULL                               (~((ptr_t)0U))
  80:Include/benchmark.h **** #define RME_MASK_WORD                               (~(RME_MASK_FULL<<RME_WORD_ORDER))
  81:Include/benchmark.h **** #define RME_MASK_WORD_O                             RME_MASK_END(RME_WORD_BIT_O1-1U)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 4


  82:Include/benchmark.h **** #define RME_MASK_WORD_Q                             RME_MASK_END(RME_WORD_BIT_Q1-1U)
  83:Include/benchmark.h **** #define RME_MASK_WORD_D                             RME_MASK_END(RME_WORD_BIT_D1-1U)
  84:Include/benchmark.h **** /* Init thread infinite time marker */
  85:Include/benchmark.h **** #define RME_THD_INIT_TIME                           (RME_MASK_FULL>>1)
  86:Include/benchmark.h **** /* Other thread infinite time marker */
  87:Include/benchmark.h **** #define RME_THD_INF_TIME                            (RME_THD_INIT_TIME-1U)
  88:Include/benchmark.h **** 
  89:Include/benchmark.h **** /* Initial boot capabilities - This should be in accordnace with the kernel settings */
  90:Include/benchmark.h **** /* The capability table of the init process */
  91:Include/benchmark.h **** #define RME_BOOT_INIT_CPT                 		0
  92:Include/benchmark.h **** /* The top-level page table of the init process - always 4GB full range split into 8 pages */
  93:Include/benchmark.h **** #define RME_BOOT_INIT_PGT                 		1
  94:Include/benchmark.h **** /* The init process */
  95:Include/benchmark.h **** #define RME_BOOT_INIT_PRC                 		2
  96:Include/benchmark.h **** /* The init thread */
  97:Include/benchmark.h **** #define RME_BOOT_INIT_THD                 		3
  98:Include/benchmark.h **** /* The initial kernel function capability */
  99:Include/benchmark.h **** #define RME_BOOT_INIT_KFN          				4
 100:Include/benchmark.h **** /* The initial kernel memory capability */
 101:Include/benchmark.h **** #define RME_BOOT_INIT_KOM         				5
 102:Include/benchmark.h **** /* The initial timer endpoint */
 103:Include/benchmark.h **** #define RME_BOOT_INIT_TIMER      				6
 104:Include/benchmark.h **** /* The test objects */
 105:Include/benchmark.h **** #define RME_BOOT_BENCH_THD       				8
 106:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_TOP   				9
 107:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_SRAM  				10
 108:Include/benchmark.h **** #define RME_BOOT_BENCH_SEN_THD					14
 109:Include/benchmark.h **** #define RME_BOOT_BENCH_RCV_THD					15
 110:Include/benchmark.h **** #define RME_BOOT_BENCH_THD_MAIN					16
 111:Include/benchmark.h **** /* The top-level page table of the init process's SRAM */
 112:Include/benchmark.h **** #define RME_BOOT_INIT_PGT_SRAM    				11
 113:Include/benchmark.h **** /* the signal capability */
 114:Include/benchmark.h **** #define RME_BOOT_SIG_BENCH						13
 115:Include/benchmark.h **** /* Power of 2 */
 116:Include/benchmark.h **** #define RME_FIELD(VAL,POW)                      (((ptr_t)(VAL))<<(POW))
 117:Include/benchmark.h **** #define RME_POW2(POW)                           RME_FIELD(1U,POW)
 118:Include/benchmark.h **** /* The order of bits in one CPU machine word */
 119:Include/benchmark.h **** #define RME_WORD_ORDER            				(5U)
 120:Include/benchmark.h **** /* Word size */
 121:Include/benchmark.h **** #define RME_WORD_BIT                            RME_POW2(RME_WORD_ORDER)
 122:Include/benchmark.h **** /* Need to export the memory frontier! */
 123:Include/benchmark.h **** /* Need to export the flags as well ! */
 124:Include/benchmark.h **** /* Export the errno too */
 125:Include/benchmark.h **** #define RME_BOOT_BENCH_KOM_FRONTIER 			0x00009000U
 126:Include/benchmark.h **** /* The kernel-accessible virtual memory address,for this thread's register sets */
 127:Include/benchmark.h **** #define RME_BOOT_HYPER_KOM_VADDR                0x00000000U
 128:Include/benchmark.h **** //0x10005000
 129:Include/benchmark.h **** /* The stack safe size */
 130:Include/benchmark.h **** #define RME_STACK_SAFE_SIZE 					16
 131:Include/benchmark.h **** /* Doesn't want to receive the scheduler signal for the thread */
 132:Include/benchmark.h **** #define RME_CID_NULL   							0x8000
 133:Include/benchmark.h **** /* The maximum priority allowed for this thread. Once set, this cannot be changed. */
 134:Include/benchmark.h **** #define RME_THD_PRIO_MAX                        31
 135:Include/benchmark.h **** /*The thread ID*/
 136:Include/benchmark.h **** #define RME_TID_1                               1
 137:Include/benchmark.h **** #define RME_TID_2                               2
 138:Include/benchmark.h **** #define RME_TID_3                               3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 5


 139:Include/benchmark.h **** #define RME_TID_4                               4
 140:Include/benchmark.h **** #define RME_TID_6                               6
 141:Include/benchmark.h **** 
 142:Include/benchmark.h **** /* End Define ****************************************************************/
 143:Include/benchmark.h **** 
 144:Include/benchmark.h **** 
 145:Include/benchmark.h **** 
 146:Include/benchmark.h **** /* Private Variables *********************************************************/
 147:Include/benchmark.h **** /* The stack of the threads - enough for 4 threads */
 148:Include/benchmark.h **** ptr_t RME_Stack1[2048];
 149:Include/benchmark.h **** ptr_t RME_Stack2[2048];
 150:Include/benchmark.h **** ptr_t RME_Stack3[2048];
 151:Include/benchmark.h **** ptr_t RME_Stack4[2048];
 152:Include/benchmark.h **** ptr_t RME_Stack5[2048];
 153:Include/benchmark.h **** u16 Time[10000];
 154:Include/benchmark.h **** s8 RME_Bench_Buf[1024];
 155:Include/benchmark.h **** /* End Private Variables *****************************************************/
 156:Include/benchmark.h **** 
 157:Include/benchmark.h **** /* Function Prototypes *******************************************************/
 158:Include/benchmark.h **** extern ret_t RME_Svc(ptr_t Svc_Capid,ptr_t Param1, ptr_t Param2, ptr_t Param3);
 159:Include/benchmark.h **** /* System service stub */
 160:Include/benchmark.h **** #define RME_SVC(SVC,CID,ARG1,ARG2,ARG3)             RME_Svc(RME_FIELD(SVC,RME_WORD_BIT_D1)|((ptr_t)
 161:Include/benchmark.h **** extern cnt_t RME_Sprint_Uint(s8* Buffer,u32 Arg_Int);
 162:Include/benchmark.h **** extern void RME_Thd_Stub(void);
 163:Include/benchmark.h **** extern void RME_Inv_Stub(void);
 164:Include/benchmark.h **** ptr_t _RME_Stack_Init(ptr_t Stack, ptr_t Stub, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Para
 165:Include/benchmark.h **** void RME_Benchmark(void);
 166:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1);
 167:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test(void);
 168:Include/benchmark.h **** /* End Function Prototypes ***************************************************/
 169:Include/benchmark.h **** 
 170:Include/benchmark.h **** /* Function:__USR_Putchar *****************************************************
 171:Include/benchmark.h **** Description : Output a character to console. In Cortex-M, under most circumstances,
 172:Include/benchmark.h ****               we should use the ITM for such outputs.
 173:Include/benchmark.h **** Input       : char Char - The character to print.
 174:Include/benchmark.h **** Output      : None.
 175:Include/benchmark.h **** Return      : rme_ptr_t - Always 0.
 176:Include/benchmark.h **** ******************************************************************************/
 177:Include/benchmark.h **** ptr_t __USR_Putchar(char Char)
 178:Include/benchmark.h **** {
  78              		.loc 2 178 1
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 8
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83 0000 04B02DE5 		str	fp, [sp, #-4]!
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 11, -4
  86 0004 00B08DE2 		add	fp, sp, #0
  87              		.cfi_def_cfa_register 11
  88 0008 0CD04DE2 		sub	sp, sp, #12
  89 000c 0030A0E1 		mov	r3, r0
  90 0010 05304BE5 		strb	r3, [fp, #-5]
  91              	.L2:
 179:Include/benchmark.h ****     RME_A7A_PUTCHAR(Char);
  92              		.loc 2 179 5 discriminator 1
  93 0014 2C3001E3 		movw	r3, #4140
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 6


  94 0018 00304EE3 		movt	r3, 57344
  95 001c 003093E5 		ldr	r3, [r3]
  96 0020 083003E2 		and	r3, r3, #8
  97 0024 000053E3 		cmp	r3, #0
  98 0028 F9FFFF0A 		beq	.L2
  99              		.loc 2 179 5 is_stmt 0 discriminator 2
 100 002c 303001E3 		movw	r3, #4144
 101 0030 00304EE3 		movt	r3, 57344
 102 0034 D5205BE1 		ldrsb	r2, [fp, #-5]
 103 0038 002083E5 		str	r2, [r3]
 180:Include/benchmark.h ****     return 0;
 104              		.loc 2 180 12 is_stmt 1
 105 003c 0030A0E3 		mov	r3, #0
 181:Include/benchmark.h **** }
 106              		.loc 2 181 1
 107 0040 0300A0E1 		mov	r0, r3
 108 0044 00D08BE2 		add	sp, fp, #0
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 0048 04B09DE4 		ldr	fp, [sp], #4
 112              		.cfi_restore 11
 113              		.cfi_def_cfa_offset 0
 114 004c 1EFF2FE1 		bx	lr
 115              		.cfi_endproc
 116              	.LFE0:
 118              		.section	.text.USR_DBG_I,"ax",%progbits
 119              		.align	2
 120              		.global	USR_DBG_I
 121              		.syntax unified
 122              		.arm
 124              	USR_DBG_I:
 125              	.LFB1:
 182:Include/benchmark.h **** /* End Function __USR_Putchar ***************************************************/
 183:Include/benchmark.h **** 
 184:Include/benchmark.h **** 
 185:Include/benchmark.h **** /* Function:USR_DBG_I *****************************************************
 186:Include/benchmark.h **** Description : Print a signed integer on the debugging console. This integer is
 187:Include/benchmark.h ****               printed as decimal with sign.
 188:Include/benchmark.h **** Input       : rme_cnt_t Int - The integer to print.
 189:Include/benchmark.h **** Output      : None.
 190:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 191:Include/benchmark.h **** ******************************************************************************/
 192:Include/benchmark.h **** cnt_t USR_DBG_I(cnt_t Int)
 193:Include/benchmark.h **** {
 126              		.loc 2 193 1
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 32
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130 0000 00482DE9 		push	{fp, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 11, -8
 133              		.cfi_offset 14, -4
 134 0004 04B08DE2 		add	fp, sp, #4
 135              		.cfi_def_cfa 11, 4
 136 0008 20D04DE2 		sub	sp, sp, #32
 137 000c 20000BE5 		str	r0, [fp, #-32]
 194:Include/benchmark.h ****     cnt_t Num;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 7


 195:Include/benchmark.h ****     cnt_t Abs;
 196:Include/benchmark.h ****     cnt_t Iter;
 197:Include/benchmark.h ****     cnt_t Count;
 198:Include/benchmark.h ****     cnt_t Div;
 199:Include/benchmark.h **** 
 200:Include/benchmark.h ****     /* Exit on zero */
 201:Include/benchmark.h ****     if(Int==0)
 138              		.loc 2 201 7
 139 0010 20301BE5 		ldr	r3, [fp, #-32]
 140 0014 000053E3 		cmp	r3, #0
 141 0018 0300001A 		bne	.L5
 202:Include/benchmark.h ****     {
 203:Include/benchmark.h **** 
 204:Include/benchmark.h **** 
 205:Include/benchmark.h ****         __USR_Putchar('0');
 142              		.loc 2 205 9
 143 001c 3000A0E3 		mov	r0, #48
 144 0020 FEFFFFEB 		bl	__USR_Putchar
 206:Include/benchmark.h ****         return 1;
 145              		.loc 2 206 16
 146 0024 0130A0E3 		mov	r3, #1
 147 0028 500000EA 		b	.L6
 148              	.L5:
 207:Include/benchmark.h ****     }
 208:Include/benchmark.h ****     else
 209:Include/benchmark.h ****     {
 210:Include/benchmark.h **** 
 211:Include/benchmark.h ****         /* No action required */
 212:Include/benchmark.h ****     }
 213:Include/benchmark.h **** 
 214:Include/benchmark.h **** 
 215:Include/benchmark.h ****     /* Correct all negatives into positives */
 216:Include/benchmark.h ****     if(Int<0)
 149              		.loc 2 216 7
 150 002c 20301BE5 		ldr	r3, [fp, #-32]
 151 0030 000053E3 		cmp	r3, #0
 152 0034 070000AA 		bge	.L7
 217:Include/benchmark.h ****     {
 218:Include/benchmark.h **** 
 219:Include/benchmark.h **** 
 220:Include/benchmark.h ****         __USR_Putchar('-');
 153              		.loc 2 220 9
 154 0038 2D00A0E3 		mov	r0, #45
 155 003c FEFFFFEB 		bl	__USR_Putchar
 221:Include/benchmark.h ****         Abs=-Int;
 156              		.loc 2 221 12
 157 0040 20301BE5 		ldr	r3, [fp, #-32]
 158 0044 003063E2 		rsb	r3, r3, #0
 159 0048 0C300BE5 		str	r3, [fp, #-12]
 222:Include/benchmark.h ****         Num=1;
 160              		.loc 2 222 12
 161 004c 0130A0E3 		mov	r3, #1
 162 0050 08300BE5 		str	r3, [fp, #-8]
 163 0054 030000EA 		b	.L8
 164              	.L7:
 223:Include/benchmark.h ****     }
 224:Include/benchmark.h ****     else
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 8


 225:Include/benchmark.h ****     {
 226:Include/benchmark.h **** 
 227:Include/benchmark.h **** 
 228:Include/benchmark.h ****         Abs=Int;
 165              		.loc 2 228 12
 166 0058 20301BE5 		ldr	r3, [fp, #-32]
 167 005c 0C300BE5 		str	r3, [fp, #-12]
 229:Include/benchmark.h ****         Num=0;
 168              		.loc 2 229 12
 169 0060 0030A0E3 		mov	r3, #0
 170 0064 08300BE5 		str	r3, [fp, #-8]
 171              	.L8:
 230:Include/benchmark.h ****     }
 231:Include/benchmark.h **** 
 232:Include/benchmark.h ****     /* How many digits are there? */
 233:Include/benchmark.h ****     Count=0;
 172              		.loc 2 233 10
 173 0068 0030A0E3 		mov	r3, #0
 174 006c 14300BE5 		str	r3, [fp, #-20]
 234:Include/benchmark.h ****     Div=1;
 175              		.loc 2 234 8
 176 0070 0130A0E3 		mov	r3, #1
 177 0074 18300BE5 		str	r3, [fp, #-24]
 235:Include/benchmark.h ****     Iter=Abs;
 178              		.loc 2 235 9
 179 0078 0C301BE5 		ldr	r3, [fp, #-12]
 180 007c 10300BE5 		str	r3, [fp, #-16]
 181              	.L12:
 236:Include/benchmark.h ****     while(1U)
 237:Include/benchmark.h ****     {
 238:Include/benchmark.h ****         Iter/=10;
 182              		.loc 2 238 13
 183 0080 10201BE5 		ldr	r2, [fp, #-16]
 184 0084 673606E3 		movw	r3, #26215
 185 0088 663646E3 		movt	r3, 26214
 186 008c 9312C3E0 		smull	r1, r3, r3, r2
 187 0090 4311A0E1 		asr	r1, r3, #2
 188 0094 C23FA0E1 		asr	r3, r2, #31
 189 0098 033041E0 		sub	r3, r1, r3
 190 009c 10300BE5 		str	r3, [fp, #-16]
 239:Include/benchmark.h ****         Count++;
 191              		.loc 2 239 14
 192 00a0 14301BE5 		ldr	r3, [fp, #-20]
 193 00a4 013083E2 		add	r3, r3, #1
 194 00a8 14300BE5 		str	r3, [fp, #-20]
 240:Include/benchmark.h ****         if(Iter!=0)
 195              		.loc 2 240 11
 196 00ac 10301BE5 		ldr	r3, [fp, #-16]
 197 00b0 000053E3 		cmp	r3, #0
 198 00b4 0600000A 		beq	.L15
 241:Include/benchmark.h ****         {
 242:Include/benchmark.h **** 
 243:Include/benchmark.h **** 
 244:Include/benchmark.h ****             Div*=10;
 199              		.loc 2 244 16
 200 00b8 18201BE5 		ldr	r2, [fp, #-24]
 201 00bc 0230A0E1 		mov	r3, r2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 9


 202 00c0 0331A0E1 		lsl	r3, r3, #2
 203 00c4 023083E0 		add	r3, r3, r2
 204 00c8 8330A0E1 		lsl	r3, r3, #1
 205 00cc 18300BE5 		str	r3, [fp, #-24]
 238:Include/benchmark.h ****         Count++;
 206              		.loc 2 238 13
 207 00d0 EAFFFFEA 		b	.L12
 208              	.L15:
 245:Include/benchmark.h ****         }
 246:Include/benchmark.h ****         else
 247:Include/benchmark.h ****         {
 248:Include/benchmark.h **** 
 249:Include/benchmark.h **** 
 250:Include/benchmark.h ****             break;
 209              		.loc 2 250 13
 210 00d4 00F020E3 		nop
 251:Include/benchmark.h ****         }
 252:Include/benchmark.h ****     }
 253:Include/benchmark.h ****     Num+=Count;
 211              		.loc 2 253 8
 212 00d8 08201BE5 		ldr	r2, [fp, #-8]
 213 00dc 14301BE5 		ldr	r3, [fp, #-20]
 214 00e0 033082E0 		add	r3, r2, r3
 215 00e4 08300BE5 		str	r3, [fp, #-8]
 254:Include/benchmark.h **** 
 255:Include/benchmark.h ****     /* Print the integer */
 256:Include/benchmark.h ****     Iter=Abs;
 216              		.loc 2 256 9
 217 00e8 0C301BE5 		ldr	r3, [fp, #-12]
 218 00ec 10300BE5 		str	r3, [fp, #-16]
 257:Include/benchmark.h **** 
 258:Include/benchmark.h ****     while(Count>0)
 219              		.loc 2 258 10
 220 00f0 1A0000EA 		b	.L13
 221              	.L14:
 259:Include/benchmark.h ****     {
 260:Include/benchmark.h ****         Count--;
 222              		.loc 2 260 14
 223 00f4 14301BE5 		ldr	r3, [fp, #-20]
 224 00f8 013043E2 		sub	r3, r3, #1
 225 00fc 14300BE5 		str	r3, [fp, #-20]
 261:Include/benchmark.h ****         __USR_Putchar((s8)(Iter/Div)+'0');
 226              		.loc 2 261 32
 227 0100 18101BE5 		ldr	r1, [fp, #-24]
 228 0104 10001BE5 		ldr	r0, [fp, #-16]
 229 0108 FEFFFFEB 		bl	__aeabi_idiv
 230 010c 0030A0E1 		mov	r3, r0
 231              		.loc 2 261 23
 232 0110 7330EFE6 		uxtb	r3, r3
 233              		.loc 2 261 37
 234 0114 303083E2 		add	r3, r3, #48
 235 0118 7330EFE6 		uxtb	r3, r3
 236              		.loc 2 261 9
 237 011c 7330AFE6 		sxtb	r3, r3
 238 0120 0300A0E1 		mov	r0, r3
 239 0124 FEFFFFEB 		bl	__USR_Putchar
 262:Include/benchmark.h ****         Iter=Iter%Div;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 10


 240              		.loc 2 262 13
 241 0128 10301BE5 		ldr	r3, [fp, #-16]
 242 012c 18101BE5 		ldr	r1, [fp, #-24]
 243 0130 0300A0E1 		mov	r0, r3
 244 0134 FEFFFFEB 		bl	__aeabi_idivmod
 245 0138 0130A0E1 		mov	r3, r1
 246 013c 10300BE5 		str	r3, [fp, #-16]
 263:Include/benchmark.h ****         Div/=10;
 247              		.loc 2 263 12
 248 0140 18201BE5 		ldr	r2, [fp, #-24]
 249 0144 673606E3 		movw	r3, #26215
 250 0148 663646E3 		movt	r3, 26214
 251 014c 9312C3E0 		smull	r1, r3, r3, r2
 252 0150 4311A0E1 		asr	r1, r3, #2
 253 0154 C23FA0E1 		asr	r3, r2, #31
 254 0158 033041E0 		sub	r3, r1, r3
 255 015c 18300BE5 		str	r3, [fp, #-24]
 256              	.L13:
 258:Include/benchmark.h ****     {
 257              		.loc 2 258 16
 258 0160 14301BE5 		ldr	r3, [fp, #-20]
 259 0164 000053E3 		cmp	r3, #0
 260 0168 E1FFFFCA 		bgt	.L14
 264:Include/benchmark.h ****     }
 265:Include/benchmark.h **** 
 266:Include/benchmark.h ****     return Num;
 261              		.loc 2 266 12
 262 016c 08301BE5 		ldr	r3, [fp, #-8]
 263              	.L6:
 267:Include/benchmark.h **** }
 264              		.loc 2 267 1
 265 0170 0300A0E1 		mov	r0, r3
 266 0174 04D04BE2 		sub	sp, fp, #4
 267              		.cfi_def_cfa 13, 8
 268              		@ sp needed
 269 0178 0088BDE8 		pop	{fp, pc}
 270              		.cfi_endproc
 271              	.LFE1:
 273              		.section	.text.USR_DBG_H,"ax",%progbits
 274              		.align	2
 275              		.global	USR_DBG_H
 276              		.syntax unified
 277              		.arm
 279              	USR_DBG_H:
 280              	.LFB2:
 268:Include/benchmark.h **** /* End Function:USR_DBG_I ************************************************/
 269:Include/benchmark.h **** 
 270:Include/benchmark.h **** /* Function:USR_DBG_H *****************************************************
 271:Include/benchmark.h **** Description : Print a unsigned integer on the debugging console. This integer is
 272:Include/benchmark.h ****               printed as hexadecimal.
 273:Include/benchmark.h **** Input       : rme_ptr_t Uint - The unsigned integer to print.
 274:Include/benchmark.h **** Output      : None.
 275:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 276:Include/benchmark.h **** ******************************************************************************/
 277:Include/benchmark.h **** cnt_t USR_DBG_H(ptr_t Uint)
 278:Include/benchmark.h **** {
 281              		.loc 2 278 1
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 11


 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 24
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0000 00482DE9 		push	{fp, lr}
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 11, -8
 288              		.cfi_offset 14, -4
 289 0004 04B08DE2 		add	fp, sp, #4
 290              		.cfi_def_cfa 11, 4
 291 0008 18D04DE2 		sub	sp, sp, #24
 292 000c 18000BE5 		str	r0, [fp, #-24]
 279:Include/benchmark.h ****     ptr_t Iter;
 280:Include/benchmark.h ****     ptr_t Count;
 281:Include/benchmark.h ****     ptr_t Num;
 282:Include/benchmark.h **** 
 283:Include/benchmark.h ****     /* Exit on zero */
 284:Include/benchmark.h ****     if(Uint==0U)
 293              		.loc 2 284 7
 294 0010 18301BE5 		ldr	r3, [fp, #-24]
 295 0014 000053E3 		cmp	r3, #0
 296 0018 0300001A 		bne	.L17
 285:Include/benchmark.h ****     {
 286:Include/benchmark.h ****         __USR_Putchar('0');
 297              		.loc 2 286 9
 298 001c 3000A0E3 		mov	r0, #48
 299 0020 FEFFFFEB 		bl	__USR_Putchar
 287:Include/benchmark.h ****         return 1;
 300              		.loc 2 287 16
 301 0024 0130A0E3 		mov	r3, #1
 302 0028 330000EA 		b	.L18
 303              	.L17:
 288:Include/benchmark.h ****     }
 289:Include/benchmark.h ****     else
 290:Include/benchmark.h ****     {
 291:Include/benchmark.h ****         /* No action required */
 292:Include/benchmark.h ****     }
 293:Include/benchmark.h **** 
 294:Include/benchmark.h ****     /* Filter out all the zeroes */
 295:Include/benchmark.h ****     Count=0U;
 304              		.loc 2 295 10
 305 002c 0030A0E3 		mov	r3, #0
 306 0030 0C300BE5 		str	r3, [fp, #-12]
 296:Include/benchmark.h ****     Iter=Uint;
 307              		.loc 2 296 9
 308 0034 18301BE5 		ldr	r3, [fp, #-24]
 309 0038 08300BE5 		str	r3, [fp, #-8]
 297:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 310              		.loc 2 297 10
 311 003c 050000EA 		b	.L19
 312              	.L20:
 298:Include/benchmark.h ****     {
 299:Include/benchmark.h ****         Iter<<=4;
 313              		.loc 2 299 13
 314 0040 08301BE5 		ldr	r3, [fp, #-8]
 315 0044 0332A0E1 		lsl	r3, r3, #4
 316 0048 08300BE5 		str	r3, [fp, #-8]
 300:Include/benchmark.h ****         Count++;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 12


 317              		.loc 2 300 14
 318 004c 0C301BE5 		ldr	r3, [fp, #-12]
 319 0050 013083E2 		add	r3, r3, #1
 320 0054 0C300BE5 		str	r3, [fp, #-12]
 321              	.L19:
 297:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 322              		.loc 2 297 16
 323 0058 08301BE5 		ldr	r3, [fp, #-8]
 324 005c 233EA0E1 		lsr	r3, r3, #28
 297:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 325              		.loc 2 297 36
 326 0060 000053E3 		cmp	r3, #0
 327 0064 F5FFFF0A 		beq	.L20
 301:Include/benchmark.h ****     }
 302:Include/benchmark.h **** 
 303:Include/benchmark.h ****     /* Count is the number of pts to print */
 304:Include/benchmark.h ****     Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
 328              		.loc 2 304 10
 329 0068 0C301BE5 		ldr	r3, [fp, #-12]
 330 006c 083063E2 		rsb	r3, r3, #8
 331 0070 0C300BE5 		str	r3, [fp, #-12]
 305:Include/benchmark.h ****     Num=Count;
 332              		.loc 2 305 8
 333 0074 0C301BE5 		ldr	r3, [fp, #-12]
 334 0078 10300BE5 		str	r3, [fp, #-16]
 306:Include/benchmark.h ****     while(Count>0U)
 335              		.loc 2 306 10
 336 007c 1A0000EA 		b	.L21
 337              	.L23:
 307:Include/benchmark.h ****     {
 308:Include/benchmark.h ****         Count--;
 338              		.loc 2 308 14
 339 0080 0C301BE5 		ldr	r3, [fp, #-12]
 340 0084 013043E2 		sub	r3, r3, #1
 341 0088 0C300BE5 		str	r3, [fp, #-12]
 309:Include/benchmark.h ****         Iter=(Uint>>(Count<<2U))&0x0FU;
 342              		.loc 2 309 27
 343 008c 0C301BE5 		ldr	r3, [fp, #-12]
 344 0090 0331A0E1 		lsl	r3, r3, #2
 345              		.loc 2 309 19
 346 0094 18201BE5 		ldr	r2, [fp, #-24]
 347 0098 3233A0E1 		lsr	r3, r2, r3
 348              		.loc 2 309 13
 349 009c 0F3003E2 		and	r3, r3, #15
 350 00a0 08300BE5 		str	r3, [fp, #-8]
 310:Include/benchmark.h ****         if(Iter<10U)
 351              		.loc 2 310 11
 352 00a4 08301BE5 		ldr	r3, [fp, #-8]
 353 00a8 090053E3 		cmp	r3, #9
 354 00ac 0700008A 		bhi	.L22
 311:Include/benchmark.h ****         {
 312:Include/benchmark.h **** 
 313:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'0');
 355              		.loc 2 313 27
 356 00b0 08301BE5 		ldr	r3, [fp, #-8]
 357 00b4 7330EFE6 		uxtb	r3, r3
 358              		.loc 2 313 35
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 13


 359 00b8 303083E2 		add	r3, r3, #48
 360 00bc 7330EFE6 		uxtb	r3, r3
 361              		.loc 2 313 13
 362 00c0 7330AFE6 		sxtb	r3, r3
 363 00c4 0300A0E1 		mov	r0, r3
 364 00c8 FEFFFFEB 		bl	__USR_Putchar
 365 00cc 060000EA 		b	.L21
 366              	.L22:
 314:Include/benchmark.h ****         }
 315:Include/benchmark.h ****         else
 316:Include/benchmark.h ****         {
 317:Include/benchmark.h **** 
 318:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'A'-10);
 367              		.loc 2 318 27
 368 00d0 08301BE5 		ldr	r3, [fp, #-8]
 369 00d4 7330EFE6 		uxtb	r3, r3
 370              		.loc 2 318 39
 371 00d8 373083E2 		add	r3, r3, #55
 372 00dc 7330EFE6 		uxtb	r3, r3
 373              		.loc 2 318 13
 374 00e0 7330AFE6 		sxtb	r3, r3
 375 00e4 0300A0E1 		mov	r0, r3
 376 00e8 FEFFFFEB 		bl	__USR_Putchar
 377              	.L21:
 306:Include/benchmark.h ****     {
 378              		.loc 2 306 16
 379 00ec 0C301BE5 		ldr	r3, [fp, #-12]
 380 00f0 000053E3 		cmp	r3, #0
 381 00f4 E1FFFF1A 		bne	.L23
 319:Include/benchmark.h ****         }
 320:Include/benchmark.h ****     }
 321:Include/benchmark.h **** 
 322:Include/benchmark.h ****     return (cnt_t)Num;
 382              		.loc 2 322 12
 383 00f8 10301BE5 		ldr	r3, [fp, #-16]
 384              	.L18:
 323:Include/benchmark.h **** }
 385              		.loc 2 323 1
 386 00fc 0300A0E1 		mov	r0, r3
 387 0100 04D04BE2 		sub	sp, fp, #4
 388              		.cfi_def_cfa 13, 8
 389              		@ sp needed
 390 0104 0088BDE8 		pop	{fp, pc}
 391              		.cfi_endproc
 392              	.LFE2:
 394              		.section	.text.USR_DBG_S,"ax",%progbits
 395              		.align	2
 396              		.global	USR_DBG_S
 397              		.syntax unified
 398              		.arm
 400              	USR_DBG_S:
 401              	.LFB3:
 324:Include/benchmark.h **** /* End Function:USR_DBG_H ************************************************/
 325:Include/benchmark.h **** cnt_t USR_DBG_S(const s8* String)
 326:Include/benchmark.h **** {
 402              		.loc 2 326 1
 403              		.cfi_startproc
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 14


 404              		@ args = 0, pretend = 0, frame = 16
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 00482DE9 		push	{fp, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 11, -8
 409              		.cfi_offset 14, -4
 410 0004 04B08DE2 		add	fp, sp, #4
 411              		.cfi_def_cfa 11, 4
 412 0008 10D04DE2 		sub	sp, sp, #16
 413 000c 10000BE5 		str	r0, [fp, #-16]
 327:Include/benchmark.h ****     ptr_t Count;
 328:Include/benchmark.h **** 
 329:Include/benchmark.h ****     for(Count=0U;Count<255;Count++)
 414              		.loc 2 329 14
 415 0010 0030A0E3 		mov	r3, #0
 416 0014 08300BE5 		str	r3, [fp, #-8]
 417              		.loc 2 329 5
 418 0018 0E0000EA 		b	.L25
 419              	.L28:
 330:Include/benchmark.h ****     {
 331:Include/benchmark.h ****         if(String[Count]==(s8)'\0')
 420              		.loc 2 331 18
 421 001c 10201BE5 		ldr	r2, [fp, #-16]
 422 0020 08301BE5 		ldr	r3, [fp, #-8]
 423 0024 033082E0 		add	r3, r2, r3
 424 0028 D030D3E1 		ldrsb	r3, [r3]
 425              		.loc 2 331 11
 426 002c 000053E3 		cmp	r3, #0
 427 0030 0C00000A 		beq	.L30
 332:Include/benchmark.h ****         {
 333:Include/benchmark.h **** 
 334:Include/benchmark.h ****             break;
 335:Include/benchmark.h ****         }
 336:Include/benchmark.h ****         else
 337:Include/benchmark.h ****         {
 338:Include/benchmark.h ****             /* No action required */
 339:Include/benchmark.h ****         }
 340:Include/benchmark.h **** 
 341:Include/benchmark.h ****         __USR_Putchar(String[Count]);
 428              		.loc 2 341 29
 429 0034 10201BE5 		ldr	r2, [fp, #-16]
 430 0038 08301BE5 		ldr	r3, [fp, #-8]
 431 003c 033082E0 		add	r3, r2, r3
 432              		.loc 2 341 9
 433 0040 D030D3E1 		ldrsb	r3, [r3]
 434 0044 0300A0E1 		mov	r0, r3
 435 0048 FEFFFFEB 		bl	__USR_Putchar
 329:Include/benchmark.h ****     {
 436              		.loc 2 329 33 discriminator 2
 437 004c 08301BE5 		ldr	r3, [fp, #-8]
 438 0050 013083E2 		add	r3, r3, #1
 439 0054 08300BE5 		str	r3, [fp, #-8]
 440              	.L25:
 329:Include/benchmark.h ****     {
 441              		.loc 2 329 23 discriminator 1
 442 0058 08301BE5 		ldr	r3, [fp, #-8]
 443 005c FE0053E3 		cmp	r3, #254
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 15


 444 0060 EDFFFF9A 		bls	.L28
 445 0064 000000EA 		b	.L27
 446              	.L30:
 334:Include/benchmark.h ****         }
 447              		.loc 2 334 13
 448 0068 00F020E3 		nop
 449              	.L27:
 342:Include/benchmark.h ****     }
 343:Include/benchmark.h **** 
 344:Include/benchmark.h ****     return (cnt_t)Count;
 450              		.loc 2 344 12
 451 006c 08301BE5 		ldr	r3, [fp, #-8]
 345:Include/benchmark.h **** }
 452              		.loc 2 345 1
 453 0070 0300A0E1 		mov	r0, r3
 454 0074 04D04BE2 		sub	sp, fp, #4
 455              		.cfi_def_cfa 13, 8
 456              		@ sp needed
 457 0078 0088BDE8 		pop	{fp, pc}
 458              		.cfi_endproc
 459              	.LFE3:
 461              		.section	.text.RME_Thd_Crt,"ax",%progbits
 462              		.align	2
 463              		.global	RME_Thd_Crt
 464              		.syntax unified
 465              		.arm
 467              	RME_Thd_Crt:
 468              	.LFB4:
 346:Include/benchmark.h **** 
 347:Include/benchmark.h **** 
 348:Include/benchmark.h **** 
 349:Include/benchmark.h **** /* Function:RME_Thd_Crt *******************************************************
 350:Include/benchmark.h **** Description : Create a thread. A thread is the minimal kernel-level execution
 351:Include/benchmark.h ****               unit.
 352:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table.
 353:Include/benchmark.h ****                                   2-Level.
 354:Include/benchmark.h ****               RME_cid_t Cap_Kom - The kernel memory capability.
 355:Include/benchmark.h ****                                   2-Level.
 356:Include/benchmark.h ****               RME_cid_t Cap_Thd - The capability slot that you want this newly
 357:Include/benchmark.h ****                                   created thread capability to be in.
 358:Include/benchmark.h ****                                   1-Level.
 359:Include/benchmark.h ****               RME_cid_t Cap_Prc - The capability to the process that it is in.
 360:Include/benchmark.h ****                                   2-Level.
 361:Include/benchmark.h ****               RME_ptr_t Prio_Max - The maximum priority allowed for this
 362:Include/benchmark.h ****                                    thread. Once set, this cannot be changed.
 363:Include/benchmark.h ****               RME_ptr_t Raddr - The relative virtual address to store the
 364:Include/benchmark.h ****                                 thread kernel object.
 365:Include/benchmark.h ****               RME_ptr_t Attr - The context attributes.
 366:Include/benchmark.h **** Output      : None.
 367:Include/benchmark.h **** Return      : RME_ret_t - If successful, the Thread ID; or an error code.
 368:Include/benchmark.h **** ******************************************************************************/
 369:Include/benchmark.h **** ret_t RME_Thd_Crt(cid_t Cap_Cpt,
 370:Include/benchmark.h ****                       cid_t Cap_Kom,
 371:Include/benchmark.h ****                       cid_t Cap_Thd,
 372:Include/benchmark.h ****                       cid_t Cap_Prc,
 373:Include/benchmark.h ****                       ptr_t Prio_Max,
 374:Include/benchmark.h ****                       ptr_t Raddr,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 16


 375:Include/benchmark.h ****                       ptr_t Attr)
 376:Include/benchmark.h **** {
 469              		.loc 2 376 1
 470              		.cfi_startproc
 471              		@ args = 12, pretend = 0, frame = 16
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473 0000 00482DE9 		push	{fp, lr}
 474              		.cfi_def_cfa_offset 8
 475              		.cfi_offset 11, -8
 476              		.cfi_offset 14, -4
 477 0004 04B08DE2 		add	fp, sp, #4
 478              		.cfi_def_cfa 11, 4
 479 0008 10D04DE2 		sub	sp, sp, #16
 480 000c 08000BE5 		str	r0, [fp, #-8]
 481 0010 0C100BE5 		str	r1, [fp, #-12]
 482 0014 10200BE5 		str	r2, [fp, #-16]
 483 0018 14300BE5 		str	r3, [fp, #-20]
 377:Include/benchmark.h ****     return RME_SVC(RME_THD_SVC(Attr,0U,RME_SVC_THD_CRT),
 484              		.loc 2 377 12
 485 001c 0C309BE5 		ldr	r3, [fp, #12]
 486 0020 832BA0E1 		lsl	r2, r3, #23
 487 0024 08301BE5 		ldr	r3, [fp, #-8]
 488 0028 033082E1 		orr	r3, r2, r3
 489 002c 190883E3 		orr	r0, r3, #1638400
 490 0030 0C301BE5 		ldr	r3, [fp, #-12]
 491 0034 0328A0E1 		lsl	r2, r3, #16
 492 0038 10301BE5 		ldr	r3, [fp, #-16]
 493 003c 7330FFE6 		uxth	r3, r3
 494 0040 031082E1 		orr	r1, r2, r3
 495 0044 14301BE5 		ldr	r3, [fp, #-20]
 496 0048 0328A0E1 		lsl	r2, r3, #16
 497 004c 04309BE5 		ldr	r3, [fp, #4]
 498 0050 7330FFE6 		uxth	r3, r3
 499 0054 032082E1 		orr	r2, r2, r3
 500 0058 08309BE5 		ldr	r3, [fp, #8]
 501 005c FEFFFFEB 		bl	RME_Svc
 502 0060 0030A0E1 		mov	r3, r0
 378:Include/benchmark.h ****                    Cap_Cpt,
 379:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Kom)|RME_PARAM_D0(Cap_Thd),
 380:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Prc)|RME_PARAM_D0(Prio_Max),
 381:Include/benchmark.h ****                    Raddr);
 382:Include/benchmark.h **** }
 503              		.loc 2 382 1
 504 0064 0300A0E1 		mov	r0, r3
 505 0068 04D04BE2 		sub	sp, fp, #4
 506              		.cfi_def_cfa 13, 8
 507              		@ sp needed
 508 006c 0088BDE8 		pop	{fp, pc}
 509              		.cfi_endproc
 510              	.LFE4:
 512              		.section	.text.RME_Thd_Exec_Set,"ax",%progbits
 513              		.align	2
 514              		.global	RME_Thd_Exec_Set
 515              		.syntax unified
 516              		.arm
 518              	RME_Thd_Exec_Set:
 519              	.LFB5:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 17


 383:Include/benchmark.h **** /* End Function:RME_Thd_Crt **************************************************/
 384:Include/benchmark.h **** 
 385:Include/benchmark.h **** /* Function:RME_Thd_Exec_Set **************************************************
 386:Include/benchmark.h **** Description : Set a thread's entry point and stack. The registers will be
 387:Include/benchmark.h ****               initialized with these contents.
 388:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 389:Include/benchmark.h ****                                   2-Level.
 390:Include/benchmark.h ****               void* Entry - The entry address of the thread.
 391:Include/benchmark.h ****               void* Stack - The stack address to use for execution.
 392:Include/benchmark.h ****               void* Param - The parameter to pass to the thread.
 393:Include/benchmark.h **** Output      : None.
 394:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 395:Include/benchmark.h **** ******************************************************************************/
 396:Include/benchmark.h **** ret_t RME_Thd_Exec_Set(cid_t Cap_Thd,
 397:Include/benchmark.h ****                            ptr_t Entry,
 398:Include/benchmark.h ****                            ptr_t Stack,
 399:Include/benchmark.h ****                            ptr_t Param)
 400:Include/benchmark.h **** {
 520              		.loc 2 400 1
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 16
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524 0000 00482DE9 		push	{fp, lr}
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 11, -8
 527              		.cfi_offset 14, -4
 528 0004 04B08DE2 		add	fp, sp, #4
 529              		.cfi_def_cfa 11, 4
 530 0008 10D04DE2 		sub	sp, sp, #16
 531 000c 08000BE5 		str	r0, [fp, #-8]
 532 0010 0C100BE5 		str	r1, [fp, #-12]
 533 0014 10200BE5 		str	r2, [fp, #-16]
 534 0018 14300BE5 		str	r3, [fp, #-20]
 401:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_EXEC_SET,
 535              		.loc 2 401 12
 536 001c 08301BE5 		ldr	r3, [fp, #-8]
 537 0020 060883E3 		orr	r0, r3, #393216
 538 0024 14301BE5 		ldr	r3, [fp, #-20]
 539 0028 10201BE5 		ldr	r2, [fp, #-16]
 540 002c 0C101BE5 		ldr	r1, [fp, #-12]
 541 0030 FEFFFFEB 		bl	RME_Svc
 542 0034 0030A0E1 		mov	r3, r0
 402:Include/benchmark.h ****                    Cap_Thd,
 403:Include/benchmark.h ****                    (ptr_t)Entry,
 404:Include/benchmark.h ****                    (ptr_t)Stack,
 405:Include/benchmark.h ****                    (ptr_t)Param);
 406:Include/benchmark.h **** }
 543              		.loc 2 406 1
 544 0038 0300A0E1 		mov	r0, r3
 545 003c 04D04BE2 		sub	sp, fp, #4
 546              		.cfi_def_cfa 13, 8
 547              		@ sp needed
 548 0040 0088BDE8 		pop	{fp, pc}
 549              		.cfi_endproc
 550              	.LFE5:
 552              		.section	.text.RME_Thd_Time_Xfer,"ax",%progbits
 553              		.align	2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 18


 554              		.global	RME_Thd_Time_Xfer
 555              		.syntax unified
 556              		.arm
 558              	RME_Thd_Time_Xfer:
 559              	.LFB6:
 407:Include/benchmark.h **** /* End Function:RME_Thd_Exec_Set *********************************************/
 408:Include/benchmark.h **** 
 409:Include/benchmark.h **** /* Function:RME_Thd_Time_Xfer *************************************************
 410:Include/benchmark.h **** Description : Transfer time from one thread to another. This can only be called
 411:Include/benchmark.h ****               from the core that the thread is on, and the the two threads
 412:Include/benchmark.h ****               involved in the time transfer must be on the same core.
 413:Include/benchmark.h ****               If the time transfered is more than or equal to what the source
 414:Include/benchmark.h ****               have, the source will be out of time or blocked. If the source is
 415:Include/benchmark.h ****               both out of time and blocked, we do not send the notification;
 416:Include/benchmark.h ****               Instead, we send the notification when the receive endpoint
 417:Include/benchmark.h ****               actually receive something.
 418:Include/benchmark.h ****               It is possible to transfer time to threads have a lower priority,
 419:Include/benchmark.h ****               and it is also possible to transfer time to threads that have a
 420:Include/benchmark.h ****               higher priority. In the latter case, and if the source is
 421:Include/benchmark.h ****               currently running, a preemption will occur.
 422:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd_Dst - The destination thread.
 423:Include/benchmark.h ****                                       2-Level.
 424:Include/benchmark.h ****               RME_cid_t Cap_Thd_Src - The source thread.
 425:Include/benchmark.h ****                                       2-Level.
 426:Include/benchmark.h ****               RME_ptr_t Time - The time to transfer, in slices. A slice is the
 427:Include/benchmark.h ****                                minimal amount of time transfered in the system
 428:Include/benchmark.h ****                                usually on the order of 100us or 1ms.
 429:Include/benchmark.h ****                                Use RME_THD_INIT_TIME for revoking transfer.
 430:Include/benchmark.h ****                                Use RME_THD_INF_TIME for infinite trasnfer.
 431:Include/benchmark.h **** Output      : None.
 432:Include/benchmark.h **** Return      : RME_ret_t - If successful, the destination time amount; or an
 433:Include/benchmark.h ****                           error code.
 434:Include/benchmark.h **** ******************************************************************************/
 435:Include/benchmark.h **** ret_t RME_Thd_Time_Xfer(cid_t Cap_Thd_Dst,
 436:Include/benchmark.h ****                         cid_t Cap_Thd_Src,
 437:Include/benchmark.h ****                         ptr_t Time)
 438:Include/benchmark.h **** {
 560              		.loc 2 438 1
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 16
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564 0000 00482DE9 		push	{fp, lr}
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 11, -8
 567              		.cfi_offset 14, -4
 568 0004 04B08DE2 		add	fp, sp, #4
 569              		.cfi_def_cfa 11, 4
 570 0008 10D04DE2 		sub	sp, sp, #16
 571 000c 08000BE5 		str	r0, [fp, #-8]
 572 0010 0C100BE5 		str	r1, [fp, #-12]
 573 0014 10200BE5 		str	r2, [fp, #-16]
 439:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_TIME_XFER,
 574              		.loc 2 439 12
 575 0018 08101BE5 		ldr	r1, [fp, #-8]
 576 001c 0C201BE5 		ldr	r2, [fp, #-12]
 577 0020 10301BE5 		ldr	r3, [fp, #-16]
 578 0024 0207A0E3 		mov	r0, #524288
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 19


 579 0028 FEFFFFEB 		bl	RME_Svc
 580 002c 0030A0E1 		mov	r3, r0
 440:Include/benchmark.h ****                    0U,
 441:Include/benchmark.h ****                    Cap_Thd_Dst,
 442:Include/benchmark.h ****                    Cap_Thd_Src,
 443:Include/benchmark.h ****                    Time);
 444:Include/benchmark.h **** }
 581              		.loc 2 444 1
 582 0030 0300A0E1 		mov	r0, r3
 583 0034 04D04BE2 		sub	sp, fp, #4
 584              		.cfi_def_cfa 13, 8
 585              		@ sp needed
 586 0038 0088BDE8 		pop	{fp, pc}
 587              		.cfi_endproc
 588              	.LFE6:
 590              		.section	.text.RME_Thd_Sched_Bind,"ax",%progbits
 591              		.align	2
 592              		.global	RME_Thd_Sched_Bind
 593              		.syntax unified
 594              		.arm
 596              	RME_Thd_Sched_Bind:
 597              	.LFB7:
 445:Include/benchmark.h **** /* End Function:RME_Thd_Time_Xfer ********************************************/
 446:Include/benchmark.h **** 
 447:Include/benchmark.h **** 
 448:Include/benchmark.h **** /* Function:RME_Thd_Sched_Bind ************************************************
 449:Include/benchmark.h **** Description : Set a thread's priority level, and its scheduler thread. When
 450:Include/benchmark.h ****               there are any state changes on this thread, a notification will
 451:Include/benchmark.h ****               be sent to its scheduler thread. If the state of the thread
 452:Include/benchmark.h ****               changes for multiple times, then only the most recent state will
 453:Include/benchmark.h ****               be reflected in the scheduler's receive queue.
 454:Include/benchmark.h ****               The scheduler and the threads that it schedule must be on the
 455:Include/benchmark.h ****               same core. When a thread wants to go from one core to another,
 456:Include/benchmark.h ****               its notification to the scheduler must all be processed, and it
 457:Include/benchmark.h ****               must have no scheduler notifications in itself.
 458:Include/benchmark.h ****               This must be called on the same core with the Cap_Thd_Sched, and
 459:Include/benchmark.h ****               the Cap_Thd itself must be free.
 460:Include/benchmark.h ****               It is impossible to set a thread's priority beyond its maximum
 461:Include/benchmark.h ****               priority.
 462:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 463:Include/benchmark.h ****                                   2-Level.
 464:Include/benchmark.h ****               RME_cid_t Cap_Thd_Sched - The scheduler thread.
 465:Include/benchmark.h ****                                         2-Level.
 466:Include/benchmark.h ****               RME_cid_t Cap_Sig - The signal endpoint for scheduler
 467:Include/benchmark.h ****                                   notifications. This signal endpoint will be
 468:Include/benchmark.h ****                                   sent to whenever this thread has a fault, or
 469:Include/benchmark.h ****                                   timeouts. This is purely optional; if it is
 470:Include/benchmark.h ****                                   not needed, pass in RME_CID_NULL.
 471:Include/benchmark.h ****               RME_tid_t TID - The thread ID. This is user-supplied, and the
 472:Include/benchmark.h ****                               kernel will not check whether there are two
 473:Include/benchmark.h ****                               threads that have the same TID.
 474:Include/benchmark.h ****               RME_ptr_t Prio - The priority level, higher is more critical.
 475:Include/benchmark.h ****               rme_ptr_t Haddr - The kernel-accessible virtual memory address
 476:Include/benchmark.h ****                                 for this thread's register sets, only used by
 477:Include/benchmark.h ****                                 hypervisor-managed threads. For other threads,
 478:Include/benchmark.h ****                                 please pass in NULL instead.
 479:Include/benchmark.h **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 20


 480:Include/benchmark.h **** Output      : None.
 481:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 482:Include/benchmark.h **** ******************************************************************************/
 483:Include/benchmark.h **** ret_t RME_Thd_Sched_Bind(cid_t Cap_Thd,
 484:Include/benchmark.h ****                          cid_t Cap_Thd_Sched,
 485:Include/benchmark.h ****                          cid_t Cap_Sig,
 486:Include/benchmark.h ****                          tid_t TID,
 487:Include/benchmark.h ****                          ptr_t Prio,
 488:Include/benchmark.h ****                          ptr_t Haddr)
 489:Include/benchmark.h **** {
 598              		.loc 2 489 1
 599              		.cfi_startproc
 600              		@ args = 8, pretend = 0, frame = 16
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602 0000 00482DE9 		push	{fp, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 11, -8
 605              		.cfi_offset 14, -4
 606 0004 04B08DE2 		add	fp, sp, #4
 607              		.cfi_def_cfa 11, 4
 608 0008 10D04DE2 		sub	sp, sp, #16
 609 000c 08000BE5 		str	r0, [fp, #-8]
 610 0010 0C100BE5 		str	r1, [fp, #-12]
 611 0014 10200BE5 		str	r2, [fp, #-16]
 612 0018 14300BE5 		str	r3, [fp, #-20]
 490:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SCHED_BIND,
 613              		.loc 2 490 12
 614 001c 08301BE5 		ldr	r3, [fp, #-8]
 615 0020 1B0883E3 		orr	r0, r3, #1769472
 616 0024 0C301BE5 		ldr	r3, [fp, #-12]
 617 0028 0328A0E1 		lsl	r2, r3, #16
 618 002c 10301BE5 		ldr	r3, [fp, #-16]
 619 0030 7330FFE6 		uxth	r3, r3
 620 0034 031082E1 		orr	r1, r2, r3
 621 0038 14301BE5 		ldr	r3, [fp, #-20]
 622 003c 0328A0E1 		lsl	r2, r3, #16
 623 0040 04309BE5 		ldr	r3, [fp, #4]
 624 0044 7330FFE6 		uxth	r3, r3
 625 0048 032082E1 		orr	r2, r2, r3
 626 004c 08309BE5 		ldr	r3, [fp, #8]
 627 0050 FEFFFFEB 		bl	RME_Svc
 628 0054 0030A0E1 		mov	r3, r0
 491:Include/benchmark.h ****                    Cap_Thd,
 492:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Thd_Sched)|RME_PARAM_D0(Cap_Sig),
 493:Include/benchmark.h ****                    RME_PARAM_D1(TID)|RME_PARAM_D0(Prio),
 494:Include/benchmark.h ****                    Haddr);
 495:Include/benchmark.h **** }
 629              		.loc 2 495 1
 630 0058 0300A0E1 		mov	r0, r3
 631 005c 04D04BE2 		sub	sp, fp, #4
 632              		.cfi_def_cfa 13, 8
 633              		@ sp needed
 634 0060 0088BDE8 		pop	{fp, pc}
 635              		.cfi_endproc
 636              	.LFE7:
 638              		.section	.text.RME_Thd_Swt,"ax",%progbits
 639              		.align	2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 21


 640              		.global	RME_Thd_Swt
 641              		.syntax unified
 642              		.arm
 644              	RME_Thd_Swt:
 645              	.LFB8:
 496:Include/benchmark.h **** /* End Function:RME_Thd_Sched_Bind *******************************************/
 497:Include/benchmark.h **** 
 498:Include/benchmark.h **** 
 499:Include/benchmark.h **** /* Function:RME_Thd_Swt *******************************************************
 500:Include/benchmark.h **** Description : Switch to another thread. The thread to switch to must have the
 501:Include/benchmark.h ****               same preemptive priority as this thread, and have time, and not
 502:Include/benchmark.h ****               blocked.
 503:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread. If this is -1,
 504:Include/benchmark.h ****                                   the kernel will pickup whatever thread that
 505:Include/benchmark.h ****                                   has the highest priority and time to run.
 506:Include/benchmark.h ****                                   2-Level.
 507:Include/benchmark.h ****               RME_ptr_t Is_Yield - This is a flag to indicate whether this
 508:Include/benchmark.h ****                                    is a full yield. If it is, the kernel will
 509:Include/benchmark.h ****                                    discard all the time alloted on this
 510:Include/benchmark.h ****                                    thread.
 511:Include/benchmark.h **** Output      : None.
 512:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 513:Include/benchmark.h **** ******************************************************************************/
 514:Include/benchmark.h **** ret_t RME_Thd_Swt(cid_t Cap_Thd,
 515:Include/benchmark.h ****                   ptr_t Is_Yield)
 516:Include/benchmark.h **** {
 646              		.loc 2 516 1
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 00482DE9 		push	{fp, lr}
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 11, -8
 653              		.cfi_offset 14, -4
 654 0004 04B08DE2 		add	fp, sp, #4
 655              		.cfi_def_cfa 11, 4
 656 0008 08D04DE2 		sub	sp, sp, #8
 657 000c 08000BE5 		str	r0, [fp, #-8]
 658 0010 0C100BE5 		str	r1, [fp, #-12]
 517:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SWT,
 659              		.loc 2 517 12
 660 0014 08101BE5 		ldr	r1, [fp, #-8]
 661 0018 0030A0E3 		mov	r3, #0
 662 001c 0C201BE5 		ldr	r2, [fp, #-12]
 663 0020 0908A0E3 		mov	r0, #589824
 664 0024 FEFFFFEB 		bl	RME_Svc
 665 0028 0030A0E1 		mov	r3, r0
 518:Include/benchmark.h ****                    0U,
 519:Include/benchmark.h ****                    Cap_Thd,
 520:Include/benchmark.h ****                    Is_Yield,
 521:Include/benchmark.h ****                    0U);
 522:Include/benchmark.h **** }
 666              		.loc 2 522 1
 667 002c 0300A0E1 		mov	r0, r3
 668 0030 04D04BE2 		sub	sp, fp, #4
 669              		.cfi_def_cfa 13, 8
 670              		@ sp needed
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 22


 671 0034 0088BDE8 		pop	{fp, pc}
 672              		.cfi_endproc
 673              	.LFE8:
 675              		.section	.text.RME_Sig_Crt,"ax",%progbits
 676              		.align	2
 677              		.global	RME_Sig_Crt
 678              		.syntax unified
 679              		.arm
 681              	RME_Sig_Crt:
 682              	.LFB9:
 523:Include/benchmark.h **** /* End Function:RME_Thd_Swt **************************************************/
 524:Include/benchmark.h **** /*asynchronous communication function*/
 525:Include/benchmark.h **** /* Function:RME_Sig_Crt *******************************************************
 526:Include/benchmark.h **** Description : Create a signal endpoint.
 527:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to use
 528:Include/benchmark.h ****                                   for this signal.
 529:Include/benchmark.h ****                                   2-Level.
 530:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability slot that you want this newly
 531:Include/benchmark.h ****                                   created signal capability to be in.
 532:Include/benchmark.h ****                                   1-Level.
 533:Include/benchmark.h **** Output      : None.
 534:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 535:Include/benchmark.h **** ******************************************************************************/
 536:Include/benchmark.h **** ret_t RME_Sig_Crt(cid_t Cap_Cpt,
 537:Include/benchmark.h ****                   cid_t Cap_Sig)
 538:Include/benchmark.h **** {
 683              		.loc 2 538 1
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687 0000 00482DE9 		push	{fp, lr}
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 11, -8
 690              		.cfi_offset 14, -4
 691 0004 04B08DE2 		add	fp, sp, #4
 692              		.cfi_def_cfa 11, 4
 693 0008 08D04DE2 		sub	sp, sp, #8
 694 000c 08000BE5 		str	r0, [fp, #-8]
 695 0010 0C100BE5 		str	r1, [fp, #-12]
 539:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_CRT,
 696              		.loc 2 539 12
 697 0014 08301BE5 		ldr	r3, [fp, #-8]
 698 0018 1D0883E3 		orr	r0, r3, #1900544
 699 001c 0C101BE5 		ldr	r1, [fp, #-12]
 700 0020 0030A0E3 		mov	r3, #0
 701 0024 0020A0E3 		mov	r2, #0
 702 0028 FEFFFFEB 		bl	RME_Svc
 703 002c 0030A0E1 		mov	r3, r0
 540:Include/benchmark.h ****                    Cap_Cpt,
 541:Include/benchmark.h ****                    Cap_Sig,
 542:Include/benchmark.h ****                    0U,
 543:Include/benchmark.h ****                    0U);
 544:Include/benchmark.h **** }
 704              		.loc 2 544 1
 705 0030 0300A0E1 		mov	r0, r3
 706 0034 04D04BE2 		sub	sp, fp, #4
 707              		.cfi_def_cfa 13, 8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 23


 708              		@ sp needed
 709 0038 0088BDE8 		pop	{fp, pc}
 710              		.cfi_endproc
 711              	.LFE9:
 713              		.section	.text.RME_Sig_Del,"ax",%progbits
 714              		.align	2
 715              		.global	RME_Sig_Del
 716              		.syntax unified
 717              		.arm
 719              	RME_Sig_Del:
 720              	.LFB10:
 545:Include/benchmark.h **** /* End Function:RME_Sig_Crt **************************************************/
 546:Include/benchmark.h **** /* Function:RME_Sig_Del *******************************************************
 547:Include/benchmark.h **** Description : Delete a signal endpoint.
 548:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to
 549:Include/benchmark.h ****                                   delete from.
 550:Include/benchmark.h ****                                   2-Level.
 551:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability to the signal.
 552:Include/benchmark.h ****                                   1-Level.
 553:Include/benchmark.h **** Output      : None.
 554:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 555:Include/benchmark.h **** ******************************************************************************/
 556:Include/benchmark.h **** ret_t RME_Sig_Del(cid_t Cap_Cpt,
 557:Include/benchmark.h ****                   cid_t Cap_Sig)
 558:Include/benchmark.h **** {
 721              		.loc 2 558 1
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 8
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725 0000 00482DE9 		push	{fp, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 11, -8
 728              		.cfi_offset 14, -4
 729 0004 04B08DE2 		add	fp, sp, #4
 730              		.cfi_def_cfa 11, 4
 731 0008 08D04DE2 		sub	sp, sp, #8
 732 000c 08000BE5 		str	r0, [fp, #-8]
 733 0010 0C100BE5 		str	r1, [fp, #-12]
 559:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_DEL,
 734              		.loc 2 559 12
 735 0014 08301BE5 		ldr	r3, [fp, #-8]
 736 0018 1E0883E3 		orr	r0, r3, #1966080
 737 001c 0C101BE5 		ldr	r1, [fp, #-12]
 738 0020 0030A0E3 		mov	r3, #0
 739 0024 0020A0E3 		mov	r2, #0
 740 0028 FEFFFFEB 		bl	RME_Svc
 741 002c 0030A0E1 		mov	r3, r0
 560:Include/benchmark.h ****                    Cap_Cpt,
 561:Include/benchmark.h ****                    Cap_Sig,
 562:Include/benchmark.h ****                    0U,
 563:Include/benchmark.h ****                    0U);
 564:Include/benchmark.h **** }
 742              		.loc 2 564 1
 743 0030 0300A0E1 		mov	r0, r3
 744 0034 04D04BE2 		sub	sp, fp, #4
 745              		.cfi_def_cfa 13, 8
 746              		@ sp needed
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 24


 747 0038 0088BDE8 		pop	{fp, pc}
 748              		.cfi_endproc
 749              	.LFE10:
 751              		.section	.text.RME_Sig_Snd,"ax",%progbits
 752              		.align	2
 753              		.global	RME_Sig_Snd
 754              		.syntax unified
 755              		.arm
 757              	RME_Sig_Snd:
 758              	.LFB11:
 565:Include/benchmark.h **** /* End Function:RME_Sig_Del **************************************************/
 566:Include/benchmark.h **** /* Function:RME_Sig_Snd ******************************************************
 567:Include/benchmark.h **** Description : Try to send to a signal endpoint. This system call can cause
 568:Include/benchmark.h ****               a potential context switch.
 569:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 570:Include/benchmark.h ****                                   2-Level.
 571:Include/benchmark.h **** Output      : None.
 572:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0, or an error code.
 573:Include/benchmark.h **** ******************************************************************************/
 574:Include/benchmark.h **** ret_t RME_Sig_Snd(cid_t Cap_Sig)
 575:Include/benchmark.h **** {
 759              		.loc 2 575 1
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 8
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763 0000 00482DE9 		push	{fp, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 11, -8
 766              		.cfi_offset 14, -4
 767 0004 04B08DE2 		add	fp, sp, #4
 768              		.cfi_def_cfa 11, 4
 769 0008 08D04DE2 		sub	sp, sp, #8
 770 000c 08000BE5 		str	r0, [fp, #-8]
 576:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_SND,
 771              		.loc 2 576 12
 772 0010 08101BE5 		ldr	r1, [fp, #-8]
 773 0014 0030A0E3 		mov	r3, #0
 774 0018 0020A0E3 		mov	r2, #0
 775 001c 0208A0E3 		mov	r0, #131072
 776 0020 FEFFFFEB 		bl	RME_Svc
 777 0024 0030A0E1 		mov	r3, r0
 577:Include/benchmark.h ****                    0U,
 578:Include/benchmark.h ****                    Cap_Sig,
 579:Include/benchmark.h ****                    0U,
 580:Include/benchmark.h ****                    0U);
 581:Include/benchmark.h **** }
 778              		.loc 2 581 1
 779 0028 0300A0E1 		mov	r0, r3
 780 002c 04D04BE2 		sub	sp, fp, #4
 781              		.cfi_def_cfa 13, 8
 782              		@ sp needed
 783 0030 0088BDE8 		pop	{fp, pc}
 784              		.cfi_endproc
 785              	.LFE11:
 787              		.section	.text.RME_Sig_Rcv,"ax",%progbits
 788              		.align	2
 789              		.global	RME_Sig_Rcv
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 25


 790              		.syntax unified
 791              		.arm
 793              	RME_Sig_Rcv:
 794              	.LFB12:
 582:Include/benchmark.h **** /* End Function:RME_Sig_Snd **************************************************/
 583:Include/benchmark.h **** /* Function:RME_Sig_Rcv *******************************************************
 584:Include/benchmark.h **** Description : Try to receive from a signal endpoint. The rules for signal
 585:Include/benchmark.h ****               endpoint receive is:
 586:Include/benchmark.h ****               1.If a receive endpoint have many send endpoints, everyone can
 587:Include/benchmark.h ****                 send to it, and sending to it will increase the count by 1.
 588:Include/benchmark.h ****               2.If some thread blocks on a receive endpoint, the wakeup is only
 589:Include/benchmark.h ****                 possible from the same core that thread is on.
 590:Include/benchmark.h ****               3.It is not recommended to let 2 cores operate on the rcv
 591:Include/benchmark.h ****                 endpoint simutaneously.
 592:Include/benchmark.h ****               This system call can potentially trigger a context switch.
 593:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 594:Include/benchmark.h ****                                   2-Level.
 595:Include/benchmark.h ****               RME_ptr_t Option - The receive option.
 596:Include/benchmark.h **** Output      : None.
 597:Include/benchmark.h **** Return      : RME_ret_t - If successful, a non-negative number containing the
 598:Include/benchmark.h ****                           number of signals received; or an error code.
 599:Include/benchmark.h **** ******************************************************************************/
 600:Include/benchmark.h **** ret_t RME_Sig_Rcv(cid_t Cap_Sig,
 601:Include/benchmark.h ****                   ptr_t Option)
 602:Include/benchmark.h **** {
 795              		.loc 2 602 1
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 8
 798              		@ frame_needed = 1, uses_anonymous_args = 0
 799 0000 00482DE9 		push	{fp, lr}
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 11, -8
 802              		.cfi_offset 14, -4
 803 0004 04B08DE2 		add	fp, sp, #4
 804              		.cfi_def_cfa 11, 4
 805 0008 08D04DE2 		sub	sp, sp, #8
 806 000c 08000BE5 		str	r0, [fp, #-8]
 807 0010 0C100BE5 		str	r1, [fp, #-12]
 603:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_RCV,
 808              		.loc 2 603 12
 809 0014 08101BE5 		ldr	r1, [fp, #-8]
 810 0018 0030A0E3 		mov	r3, #0
 811 001c 0C201BE5 		ldr	r2, [fp, #-12]
 812 0020 0308A0E3 		mov	r0, #196608
 813 0024 FEFFFFEB 		bl	RME_Svc
 814 0028 0030A0E1 		mov	r3, r0
 604:Include/benchmark.h ****                    0U,
 605:Include/benchmark.h ****                    Cap_Sig,
 606:Include/benchmark.h ****                    Option,
 607:Include/benchmark.h ****                    0U);
 608:Include/benchmark.h **** }
 815              		.loc 2 608 1
 816 002c 0300A0E1 		mov	r0, r3
 817 0030 04D04BE2 		sub	sp, fp, #4
 818              		.cfi_def_cfa 13, 8
 819              		@ sp needed
 820 0034 0088BDE8 		pop	{fp, pc}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 26


 821              		.cfi_endproc
 822              	.LFE12:
 824              		.global	Cur_addr
 825              		.section	.bss.Cur_addr,"aw",%nobits
 826              		.align	2
 829              	Cur_addr:
 830 0000 00000000 		.space	4
 831              		.section	.text._RME_Tsc_Init,"ax",%progbits
 832              		.align	2
 833              		.global	_RME_Tsc_Init
 834              		.syntax unified
 835              		.arm
 837              	_RME_Tsc_Init:
 838              	.LFB13:
   1:Source/rme_benchmark.c **** /******************************************************************************
   2:Source/rme_benchmark.c **** Filename    : benchmark.c
   3:Source/rme_benchmark.c **** Author      : pry
   4:Source/rme_benchmark.c **** Date        : 04/09/2017
   5:Source/rme_benchmark.c **** Licence     : The Unlicense; see LICENSE for details.
   6:Source/rme_benchmark.c **** Description : The benchmark file for RME.
   7:Source/rme_benchmark.c **** ******************************************************************************/
   8:Source/rme_benchmark.c **** 
   9:Source/rme_benchmark.c **** /* Include *******************************************************************/
  10:Source/rme_benchmark.c **** #include"benchmark.h"
  11:Source/rme_benchmark.c **** 
  12:Source/rme_benchmark.c **** ptr_t Cur_addr;
  13:Source/rme_benchmark.c **** 
  14:Source/rme_benchmark.c **** /* Need to export error codes, and size of each object, in words! */
  15:Source/rme_benchmark.c **** /* End Include ***************************************************************/
  16:Source/rme_benchmark.c **** 
  17:Source/rme_benchmark.c **** /* Function:_RME_Tsc_Init *****************************************************
  18:Source/rme_benchmark.c **** Description : The initialization of timestamp counter. 19 secs before overflowing.
  19:Source/rme_benchmark.c **** Input       : None.
  20:Source/rme_benchmark.c **** Output      : None.
  21:Source/rme_benchmark.c **** Return      : None.
  22:Source/rme_benchmark.c **** ******************************************************************************/
  23:Source/rme_benchmark.c **** void _RME_Tsc_Init(void)
  24:Source/rme_benchmark.c **** {
 839              		.loc 1 24 1
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844 0000 04B02DE5 		str	fp, [sp, #-4]!
 845              		.cfi_def_cfa_offset 4
 846              		.cfi_offset 11, -4
 847 0004 00B08DE2 		add	fp, sp, #0
 848              		.cfi_def_cfa_register 11
  25:Source/rme_benchmark.c **** //    TIM_HandleTypeDef TIM2_Handle;
  26:Source/rme_benchmark.c **** //    
  27:Source/rme_benchmark.c **** //    /* Initialize timer 2 to run at the same speed as the CPU */
  28:Source/rme_benchmark.c **** //    TIM2_Handle.Instance=TIM2;
  29:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Prescaler=0;
  30:Source/rme_benchmark.c **** //    TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
  31:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Period=(ptr_t)(-1);
  32:Source/rme_benchmark.c **** //    TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
  33:Source/rme_benchmark.c **** //    HAL_TIM_Base_Init(&TIM2_Handle);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 27


  34:Source/rme_benchmark.c **** //    __HAL_RCC_TIM2_CLK_ENABLE();
  35:Source/rme_benchmark.c **** //    __HAL_TIM_ENABLE(&TIM2_Handle);
  36:Source/rme_benchmark.c **** }
 849              		.loc 1 36 1
 850 0008 00F020E3 		nop
 851 000c 00D08BE2 		add	sp, fp, #0
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 0010 04B09DE4 		ldr	fp, [sp], #4
 855              		.cfi_restore 11
 856              		.cfi_def_cfa_offset 0
 857 0014 1EFF2FE1 		bx	lr
 858              		.cfi_endproc
 859              	.LFE13:
 861              		.section	.rodata
 862              		.align	2
 863              	.LC0:
 864 0000 0D0A2068 		.ascii	"\015\012 hello! this is thread \000"
 864      656C6C6F 
 864      21207468 
 864      69732069 
 864      73207468 
 865              		.section	.text.RME_Same_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 866              		.align	2
 867              		.global	RME_Same_Prc_Thd_Switch_Test_Thd
 868              		.syntax unified
 869              		.arm
 871              	RME_Same_Prc_Thd_Switch_Test_Thd:
 872              	.LFB14:
  37:Source/rme_benchmark.c **** /* End Function:_RME_Tsc_Init ************************************************/
  38:Source/rme_benchmark.c **** 
  39:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
  40:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
  41:Source/rme_benchmark.c **** Input       : None.
  42:Source/rme_benchmark.c **** Output      : None.
  43:Source/rme_benchmark.c **** Return      : None.
  44:Source/rme_benchmark.c **** ******************************************************************************/
  45:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1)
  46:Source/rme_benchmark.c **** {
 873              		.loc 1 46 1
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 16
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 877 0000 00482DE9 		push	{fp, lr}
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 11, -8
 880              		.cfi_offset 14, -4
 881 0004 04B08DE2 		add	fp, sp, #4
 882              		.cfi_def_cfa 11, 4
 883 0008 10D04DE2 		sub	sp, sp, #16
 884 000c 10000BE5 		str	r0, [fp, #-16]
  47:Source/rme_benchmark.c ****     ret_t Retval;
  48:Source/rme_benchmark.c **** 
  49:Source/rme_benchmark.c ****     USR_DBG_S("\r\n hello! this is thread ");
 885              		.loc 1 49 5
 886 0010 000000E3 		movw	r0, #:lower16:.LC0
 887 0014 000040E3 		movt	r0, #:upper16:.LC0
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 28


 888 0018 FEFFFFEB 		bl	USR_DBG_S
  50:Source/rme_benchmark.c ****     USR_DBG_I(Param1);
 889              		.loc 1 50 5
 890 001c 10301BE5 		ldr	r3, [fp, #-16]
 891 0020 0300A0E1 		mov	r0, r3
 892 0024 FEFFFFEB 		bl	USR_DBG_I
 893              	.L51:
  51:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
  52:Source/rme_benchmark.c ****     while(1)
  53:Source/rme_benchmark.c ****     {
  54:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
  55:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
  56:Source/rme_benchmark.c ****                           0,
  57:Source/rme_benchmark.c ****                           0);*/
  58:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 894              		.loc 1 58 16 discriminator 1
 895 0028 0010A0E3 		mov	r1, #0
 896 002c 0300A0E3 		mov	r0, #3
 897 0030 FEFFFFEB 		bl	RME_Thd_Swt
 898 0034 08000BE5 		str	r0, [fp, #-8]
 899              		.loc 1 58 15
 900 0038 FAFFFFEA 		b	.L51
 901              		.cfi_endproc
 902              	.LFE14:
 904              		.section	.rodata
 905 001a 0000     		.align	2
 906              	.LC1:
 907 001c 0D0A2D2D 		.ascii	"\015\012-----create a thread , TID= \000"
 907      2D2D2D63 
 907      72656174 
 907      65206120 
 907      74687265 
 908 003b 00       		.align	2
 909              	.LC2:
 910 003c 0D0A6372 		.ascii	"\015\012create a thread      retval= \000"
 910      65617465 
 910      20612074 
 910      68726561 
 910      64202020 
 911              		.align	2
 912              	.LC3:
 913 005c 0D0A4269 		.ascii	"\015\012Bind the thread to the processor retval= \000"
 913      6E642074 
 913      68652074 
 913      68726561 
 913      6420746F 
 914              		.align	2
 915              	.LC4:
 916 0088 0D0A5365 		.ascii	"\015\012Set the execution information retval= \000"
 916      74207468 
 916      65206578 
 916      65637574 
 916      696F6E20 
 917 00b1 000000   		.align	2
 918              	.LC5:
 919 00b4 0D0A00   		.ascii	"\015\012\000"
 920 00b7 00       		.align	2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 29


 921              	.LC6:
 922 00b8 0D0A4465 		.ascii	"\015\012Delegate some timeslice to it retval= \000"
 922      6C656761 
 922      74652073 
 922      6F6D6520 
 922      74696D65 
 923              		.section	.text.RME_Thd_Create,"ax",%progbits
 924              		.align	2
 925              		.global	RME_Thd_Create
 926              		.syntax unified
 927              		.arm
 929              	RME_Thd_Create:
 930              	.LFB15:
  59:Source/rme_benchmark.c ****     }
  60:Source/rme_benchmark.c **** }
  61:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test_Thd ****************************/
  62:Source/rme_benchmark.c **** 
  63:Source/rme_benchmark.c **** 
  64:Source/rme_benchmark.c **** void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_t T
  65:Source/rme_benchmark.c **** {
 931              		.loc 1 65 1
 932              		.cfi_startproc
 933              		@ args = 16, pretend = 0, frame = 24
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 00482DE9 		push	{fp, lr}
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 11, -8
 938              		.cfi_offset 14, -4
 939 0004 04B08DE2 		add	fp, sp, #4
 940              		.cfi_def_cfa 11, 4
 941 0008 28D04DE2 		sub	sp, sp, #40
 942 000c 10000BE5 		str	r0, [fp, #-16]
 943 0010 14100BE5 		str	r1, [fp, #-20]
 944 0014 18200BE5 		str	r2, [fp, #-24]
 945 0018 1C300BE5 		str	r3, [fp, #-28]
  66:Source/rme_benchmark.c **** 	            ret_t Retval;
  67:Source/rme_benchmark.c **** 			    cnt_t Count;
  68:Source/rme_benchmark.c **** 			    ptr_t Stack_Addr;
  69:Source/rme_benchmark.c **** 			    ptr_t Temp;
  70:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\n-----create a thread , TID= ");
 946              		.loc 1 70 8
 947 001c 000000E3 		movw	r0, #:lower16:.LC1
 948 0020 000040E3 		movt	r0, #:upper16:.LC1
 949 0024 FEFFFFEB 		bl	USR_DBG_S
  71:Source/rme_benchmark.c **** 			    USR_DBG_H(Tid);
 950              		.loc 1 71 8
 951 0028 14001BE5 		ldr	r0, [fp, #-20]
 952 002c FEFFFFEB 		bl	USR_DBG_H
  72:Source/rme_benchmark.c **** 			    /* Initialize the thread's stack before entering it */
  73:Source/rme_benchmark.c **** 			    Stack_Addr=(ptr_t)Stack;
 953              		.loc 1 73 18
 954 0030 10309BE5 		ldr	r3, [fp, #16]
 955 0034 08300BE5 		str	r3, [fp, #-8]
  74:Source/rme_benchmark.c **** 
  75:Source/rme_benchmark.c **** 			    /* create a thread */
  76:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,Cap_Thd,
 956              		.loc 1 76 15
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 30


 957 0038 0030A0E3 		mov	r3, #0
 958 003c 08308DE5 		str	r3, [sp, #8]
 959 0040 04309BE5 		ldr	r3, [fp, #4]
 960 0044 04308DE5 		str	r3, [sp, #4]
 961 0048 1F30A0E3 		mov	r3, #31
 962 004c 00308DE5 		str	r3, [sp]
 963 0050 0230A0E3 		mov	r3, #2
 964 0054 10201BE5 		ldr	r2, [fp, #-16]
 965 0058 0510A0E3 		mov	r1, #5
 966 005c 0000A0E3 		mov	r0, #0
 967 0060 FEFFFFEB 		bl	RME_Thd_Crt
 968 0064 0C000BE5 		str	r0, [fp, #-12]
  77:Source/rme_benchmark.c **** 			                       RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,Raddr,0);
  78:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\ncreate a thread      retval= ");
 969              		.loc 1 78 8
 970 0068 000000E3 		movw	r0, #:lower16:.LC2
 971 006c 000040E3 		movt	r0, #:upper16:.LC2
 972 0070 FEFFFFEB 		bl	USR_DBG_S
  79:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 973              		.loc 1 79 8
 974 0074 0C001BE5 		ldr	r0, [fp, #-12]
 975 0078 FEFFFFEB 		bl	USR_DBG_I
  80:Source/rme_benchmark.c **** 
  81:Source/rme_benchmark.c **** 			    /* Bind the thread to the processor */
  82:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Sched_Bind(Cap_Thd,RME_BOOT_INIT_THD,Cap_Sig,
 976              		.loc 1 82 15
 977 007c 14201BE5 		ldr	r2, [fp, #-20]
 978 0080 0030A0E3 		mov	r3, #0
 979 0084 04308DE5 		str	r3, [sp, #4]
 980 0088 18301BE5 		ldr	r3, [fp, #-24]
 981 008c 00308DE5 		str	r3, [sp]
 982 0090 0230A0E1 		mov	r3, r2
 983 0094 08209BE5 		ldr	r2, [fp, #8]
 984 0098 0310A0E3 		mov	r1, #3
 985 009c 10001BE5 		ldr	r0, [fp, #-16]
 986 00a0 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 987 00a4 0C000BE5 		str	r0, [fp, #-12]
  83:Source/rme_benchmark.c **** 			    		  	  	  	  	  Tid,Prc,RME_BOOT_HYPER_KOM_VADDR);
  84:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nBind the thread to the processor retval= ");
 988              		.loc 1 84 8
 989 00a8 000000E3 		movw	r0, #:lower16:.LC3
 990 00ac 000040E3 		movt	r0, #:upper16:.LC3
 991 00b0 FEFFFFEB 		bl	USR_DBG_S
  85:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 992              		.loc 1 85 8
 993 00b4 0C001BE5 		ldr	r0, [fp, #-12]
 994 00b8 FEFFFFEB 		bl	USR_DBG_I
  86:Source/rme_benchmark.c **** 			    /* Set the execution information */
  87:Source/rme_benchmark.c **** 
  88:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Exec_Set(Cap_Thd,Entry,Stack_Addr,Tid);
 995              		.loc 1 88 15
 996 00bc 14301BE5 		ldr	r3, [fp, #-20]
 997 00c0 08201BE5 		ldr	r2, [fp, #-8]
 998 00c4 1C101BE5 		ldr	r1, [fp, #-28]
 999 00c8 10001BE5 		ldr	r0, [fp, #-16]
 1000 00cc FEFFFFEB 		bl	RME_Thd_Exec_Set
 1001 00d0 0C000BE5 		str	r0, [fp, #-12]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 31


  89:Source/rme_benchmark.c **** 			    //RME_Stack[2000]=1234;
  90:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nSet the execution information retval= ");
 1002              		.loc 1 90 8
 1003 00d4 000000E3 		movw	r0, #:lower16:.LC4
 1004 00d8 000040E3 		movt	r0, #:upper16:.LC4
 1005 00dc FEFFFFEB 		bl	USR_DBG_S
  91:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 1006              		.loc 1 91 8
 1007 00e0 0C001BE5 		ldr	r0, [fp, #-12]
 1008 00e4 FEFFFFEB 		bl	USR_DBG_I
  92:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\n");
 1009              		.loc 1 92 8
 1010 00e8 000000E3 		movw	r0, #:lower16:.LC5
 1011 00ec 000040E3 		movt	r0, #:upper16:.LC5
 1012 00f0 FEFFFFEB 		bl	USR_DBG_S
  93:Source/rme_benchmark.c **** 			    /* Delegate some timeslice to it */
  94:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Time_Xfer(Cap_Thd,RME_BOOT_INIT_THD,Time);
 1013              		.loc 1 94 15
 1014 00f4 0C209BE5 		ldr	r2, [fp, #12]
 1015 00f8 0310A0E3 		mov	r1, #3
 1016 00fc 10001BE5 		ldr	r0, [fp, #-16]
 1017 0100 FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1018 0104 0C000BE5 		str	r0, [fp, #-12]
  95:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1019              		.loc 1 95 8
 1020 0108 000000E3 		movw	r0, #:lower16:.LC6
 1021 010c 000040E3 		movt	r0, #:upper16:.LC6
 1022 0110 FEFFFFEB 		bl	USR_DBG_S
  96:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 1023              		.loc 1 96 8
 1024 0114 0C001BE5 		ldr	r0, [fp, #-12]
 1025 0118 FEFFFFEB 		bl	USR_DBG_I
  97:Source/rme_benchmark.c **** 
  98:Source/rme_benchmark.c **** }
 1026              		.loc 1 98 1
 1027 011c 00F020E3 		nop
 1028 0120 04D04BE2 		sub	sp, fp, #4
 1029              		.cfi_def_cfa 13, 8
 1030              		@ sp needed
 1031 0124 0088BDE8 		pop	{fp, pc}
 1032              		.cfi_endproc
 1033              	.LFE15:
 1035              		.section	.rodata
 1036 00e1 000000   		.align	2
 1037              	.LC7:
 1038 00e4 0D0A456E 		.ascii	"\015\012Entering send thread!\000"
 1038      74657269 
 1038      6E672073 
 1038      656E6420 
 1038      74687265 
 1039              		.align	2
 1040              	.LC8:
 1041 00fc 0D0A5365 		.ascii	"\015\012Send!\000"
 1041      6E642100 
 1042              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_send,"ax",%progbits
 1043              		.align	2
 1044              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_send
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 32


 1045              		.syntax unified
 1046              		.arm
 1048              	RME_Same_Prc_Thd_Sig_Test_Thd_send:
 1049              	.LFB16:
  99:Source/rme_benchmark.c **** 
 100:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_send(void) //low prio 4
 101:Source/rme_benchmark.c **** {
 1050              		.loc 1 101 1
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 00482DE9 		push	{fp, lr}
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 11, -8
 1057              		.cfi_offset 14, -4
 1058 0004 04B08DE2 		add	fp, sp, #4
 1059              		.cfi_def_cfa 11, 4
 102:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nEntering send thread!");
 1060              		.loc 1 102 2
 1061 0008 000000E3 		movw	r0, #:lower16:.LC7
 1062 000c 000040E3 		movt	r0, #:upper16:.LC7
 1063 0010 FEFFFFEB 		bl	USR_DBG_S
 1064              	.L54:
 103:Source/rme_benchmark.c **** 
 104:Source/rme_benchmark.c **** 
 105:Source/rme_benchmark.c **** 	while(1)
 106:Source/rme_benchmark.c **** 	{
 107:Source/rme_benchmark.c **** 		USR_DBG_S("\r\nSend!");
 1065              		.loc 1 107 3
 1066 0014 000000E3 		movw	r0, #:lower16:.LC8
 1067 0018 000040E3 		movt	r0, #:upper16:.LC8
 1068 001c FEFFFFEB 		bl	USR_DBG_S
 108:Source/rme_benchmark.c **** 		RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1069              		.loc 1 108 3 discriminator 1
 1070 0020 0D00A0E3 		mov	r0, #13
 1071 0024 FEFFFFEB 		bl	RME_Sig_Snd
 107:Source/rme_benchmark.c **** 		RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1072              		.loc 1 107 3
 1073 0028 F9FFFFEA 		b	.L54
 1074              		.cfi_endproc
 1075              	.LFE16:
 1077              		.section	.rodata
 1078              		.align	2
 1079              	.LC9:
 1080 0104 0D0A456E 		.ascii	"\015\012Entering receive thread!\000"
 1080      74657269 
 1080      6E672072 
 1080      65636569 
 1080      76652074 
 1081 011f 00       		.align	2
 1082              	.LC10:
 1083 0120 0D0A5265 		.ascii	"\015\012Received wrong number!\000"
 1083      63656976 
 1083      65642077 
 1083      726F6E67 
 1083      206E756D 
 1084 0139 000000   		.align	2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 33


 1085              	.LC11:
 1086 013c 0D0A5265 		.ascii	"\015\012Received!\000"
 1086      63656976 
 1086      65642100 
 1087              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_recv,"ax",%progbits
 1088              		.align	2
 1089              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1090              		.syntax unified
 1091              		.arm
 1093              	RME_Same_Prc_Thd_Sig_Test_Thd_recv:
 1094              	.LFB17:
 109:Source/rme_benchmark.c **** 	}
 110:Source/rme_benchmark.c **** 
 111:Source/rme_benchmark.c **** }
 112:Source/rme_benchmark.c **** 
 113:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_recv(void) // high prio 5
 114:Source/rme_benchmark.c **** {
 1095              		.loc 1 114 1
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 1, uses_anonymous_args = 0
 1099 0000 00482DE9 		push	{fp, lr}
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 11, -8
 1102              		.cfi_offset 14, -4
 1103 0004 04B08DE2 		add	fp, sp, #4
 1104              		.cfi_def_cfa 11, 4
 115:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nEntering receive thread!");
 1105              		.loc 1 115 2
 1106 0008 000000E3 		movw	r0, #:lower16:.LC9
 1107 000c 000040E3 		movt	r0, #:upper16:.LC9
 1108 0010 FEFFFFEB 		bl	USR_DBG_S
 1109              	.L58:
 116:Source/rme_benchmark.c **** 
 117:Source/rme_benchmark.c **** 	while(1)
 118:Source/rme_benchmark.c **** 	{
 119:Source/rme_benchmark.c **** 		if(RME_Sig_Rcv(RME_BOOT_SIG_BENCH,RME_RCV_BS)!=1)
 1110              		.loc 1 119 6
 1111 0014 0010A0E3 		mov	r1, #0
 1112 0018 0D00A0E3 		mov	r0, #13
 1113 001c FEFFFFEB 		bl	RME_Sig_Rcv
 1114 0020 0030A0E1 		mov	r3, r0
 1115              		.loc 1 119 5 discriminator 1
 1116 0024 010053E3 		cmp	r3, #1
 1117 0028 0300000A 		beq	.L56
 120:Source/rme_benchmark.c **** 		{
 121:Source/rme_benchmark.c **** 			USR_DBG_S("\r\nReceived wrong number!");
 1118              		.loc 1 121 4
 1119 002c 000000E3 		movw	r0, #:lower16:.LC10
 1120 0030 000040E3 		movt	r0, #:upper16:.LC10
 1121 0034 FEFFFFEB 		bl	USR_DBG_S
 1122              	.L57:
 122:Source/rme_benchmark.c **** 			while(1);
 1123              		.loc 1 122 9
 1124 0038 FEFFFFEA 		b	.L57
 1125              	.L56:
 123:Source/rme_benchmark.c **** 		}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 34


 124:Source/rme_benchmark.c **** 		USR_DBG_S("\r\nReceived!");
 1126              		.loc 1 124 3
 1127 003c 000000E3 		movw	r0, #:lower16:.LC11
 1128 0040 000040E3 		movt	r0, #:upper16:.LC11
 1129 0044 FEFFFFEB 		bl	USR_DBG_S
 119:Source/rme_benchmark.c **** 		{
 1130              		.loc 1 119 5
 1131 0048 F1FFFFEA 		b	.L58
 1132              		.cfi_endproc
 1133              	.LFE17:
 1135              		.section	.rodata
 1136              		.align	2
 1137              	.LC12:
 1138 0148 0D0A2F2A 		.ascii	"\015\012/****************\000"
 1138      2A2A2A2A 
 1138      2A2A2A2A 
 1138      2A2A2A2A 
 1138      2A2A2A00 
 1139              		.align	2
 1140              	.LC13:
 1141 015c 62656769 		.ascii	"begin RME_Same_Prc_Thd_Sig_Test_Thd_main\000"
 1141      6E20524D 
 1141      455F5361 
 1141      6D655F50 
 1141      72635F54 
 1142 0185 000000   		.align	2
 1143              	.LC14:
 1144 0188 2A2A2A2A 		.ascii	"****************/\000"
 1144      2A2A2A2A 
 1144      2A2A2A2A 
 1144      2A2A2A2A 
 1144      2F00
 1145 019a 0000     		.align	2
 1146              	.LC15:
 1147 019c 0D0A4865 		.ascii	"\015\012Hello this is thread main\000"
 1147      6C6C6F20 
 1147      74686973 
 1147      20697320 
 1147      74687265 
 1148              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_main,"ax",%progbits
 1149              		.align	2
 1150              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_main
 1151              		.syntax unified
 1152              		.arm
 1154              	RME_Same_Prc_Thd_Sig_Test_Thd_main:
 1155              	.LFB18:
 125:Source/rme_benchmark.c **** 	}
 126:Source/rme_benchmark.c **** }
 127:Source/rme_benchmark.c **** 
 128:Source/rme_benchmark.c **** 
 129:Source/rme_benchmark.c **** 
 130:Source/rme_benchmark.c **** 
 131:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
 132:Source/rme_benchmark.c **** Description : The thread for testing same-process thread signal send and receive performance.
 133:Source/rme_benchmark.c **** Input       : None.
 134:Source/rme_benchmark.c **** Output      : None.
 135:Source/rme_benchmark.c **** Return      : None.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 35


 136:Source/rme_benchmark.c **** ******************************************************************************/
 137:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_main(ptr_t TID)
 138:Source/rme_benchmark.c **** {
 1156              		.loc 1 138 1
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 8
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160 0000 00482DE9 		push	{fp, lr}
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 11, -8
 1163              		.cfi_offset 14, -4
 1164 0004 04B08DE2 		add	fp, sp, #4
 1165              		.cfi_def_cfa 11, 4
 1166 0008 08D04DE2 		sub	sp, sp, #8
 1167 000c 08000BE5 		str	r0, [fp, #-8]
 139:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n");
 1168              		.loc 1 139 2
 1169 0010 000000E3 		movw	r0, #:lower16:.LC5
 1170 0014 000040E3 		movt	r0, #:upper16:.LC5
 1171 0018 FEFFFFEB 		bl	USR_DBG_S
 140:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n/****************");
 1172              		.loc 1 140 2
 1173 001c 000000E3 		movw	r0, #:lower16:.LC12
 1174 0020 000040E3 		movt	r0, #:upper16:.LC12
 1175 0024 FEFFFFEB 		bl	USR_DBG_S
 141:Source/rme_benchmark.c **** 	USR_DBG_S("begin RME_Same_Prc_Thd_Sig_Test_Thd_main");
 1176              		.loc 1 141 2
 1177 0028 000000E3 		movw	r0, #:lower16:.LC13
 1178 002c 000040E3 		movt	r0, #:upper16:.LC13
 1179 0030 FEFFFFEB 		bl	USR_DBG_S
 142:Source/rme_benchmark.c **** 	USR_DBG_S("****************/");
 1180              		.loc 1 142 2
 1181 0034 000000E3 		movw	r0, #:lower16:.LC14
 1182 0038 000040E3 		movt	r0, #:upper16:.LC14
 1183 003c FEFFFFEB 		bl	USR_DBG_S
 143:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nHello this is thread main");
 1184              		.loc 1 143 2
 1185 0040 000000E3 		movw	r0, #:lower16:.LC15
 1186 0044 000040E3 		movt	r0, #:upper16:.LC15
 1187 0048 FEFFFFEB 		bl	USR_DBG_S
 144:Source/rme_benchmark.c **** 	ret_t Retval;
 145:Source/rme_benchmark.c **** 
 146:Source/rme_benchmark.c **** 
 147:Source/rme_benchmark.c **** 	/* send the begin signal */
 148:Source/rme_benchmark.c **** 	RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1188              		.loc 1 148 2
 1189 004c 0D00A0E3 		mov	r0, #13
 1190 0050 FEFFFFEB 		bl	RME_Sig_Snd
 149:Source/rme_benchmark.c **** 	RME_Thd_Swt(RME_BOOT_BENCH_SEN_THD,0);
 1191              		.loc 1 149 2
 1192 0054 0010A0E3 		mov	r1, #0
 1193 0058 0E00A0E3 		mov	r0, #14
 1194 005c FEFFFFEB 		bl	RME_Thd_Swt
 1195              	.L60:
 150:Source/rme_benchmark.c **** 
 151:Source/rme_benchmark.c **** 	while(1);
 1196              		.loc 1 151 7
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 36


 1197 0060 FEFFFFEA 		b	.L60
 1198              		.cfi_endproc
 1199              	.LFE18:
 1201              		.section	.rodata
 1202              		.align	2
 1203              	.LC16:
 1204 01b8 0D0A6372 		.ascii	"\015\012create a signal end point      retval= \000"
 1204      65617465 
 1204      20612073 
 1204      69676E61 
 1204      6C20656E 
 1205              		.section	.text.RME_Same_Prc_Thd_Sig_Testinit,"ax",%progbits
 1206              		.align	2
 1207              		.global	RME_Same_Prc_Thd_Sig_Testinit
 1208              		.syntax unified
 1209              		.arm
 1211              	RME_Same_Prc_Thd_Sig_Testinit:
 1212              	.LFB19:
 152:Source/rme_benchmark.c **** }
 153:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Testinit *************************************
 154:Source/rme_benchmark.c **** Description : The same-process thread signal send and receive test code.
 155:Source/rme_benchmark.c **** Input       : None.
 156:Source/rme_benchmark.c **** Output      : None.
 157:Source/rme_benchmark.c **** Return      : None.
 158:Source/rme_benchmark.c **** ******************************************************************************/
 159:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Testinit(void)
 160:Source/rme_benchmark.c **** {
 1213              		.loc 1 160 1
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 8
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217 0000 00482DE9 		push	{fp, lr}
 1218              		.cfi_def_cfa_offset 8
 1219              		.cfi_offset 11, -8
 1220              		.cfi_offset 14, -4
 1221 0004 04B08DE2 		add	fp, sp, #4
 1222              		.cfi_def_cfa 11, 4
 1223 0008 18D04DE2 		sub	sp, sp, #24
 161:Source/rme_benchmark.c **** 	ret_t Retval;
 162:Source/rme_benchmark.c **** 
 163:Source/rme_benchmark.c **** 	/* create a signal end point */
 164:Source/rme_benchmark.c **** 	Retval=RME_Sig_Crt(RME_BOOT_INIT_CPT,RME_BOOT_SIG_BENCH);
 1224              		.loc 1 164 9
 1225 000c 0D10A0E3 		mov	r1, #13
 1226 0010 0000A0E3 		mov	r0, #0
 1227 0014 FEFFFFEB 		bl	RME_Sig_Crt
 1228 0018 08000BE5 		str	r0, [fp, #-8]
 165:Source/rme_benchmark.c **** 	USR_DBG_S("\r\ncreate a signal end point      retval= ");
 1229              		.loc 1 165 2
 1230 001c 000000E3 		movw	r0, #:lower16:.LC16
 1231 0020 000040E3 		movt	r0, #:upper16:.LC16
 1232 0024 FEFFFFEB 		bl	USR_DBG_S
 166:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1233              		.loc 1 166 2
 1234 0028 08001BE5 		ldr	r0, [fp, #-8]
 1235 002c FEFFFFEB 		bl	USR_DBG_I
 167:Source/rme_benchmark.c **** 	/* create signal test thread */
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 37


 168:Source/rme_benchmark.c **** 	//void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_
 169:Source/rme_benchmark.c **** 	RME_Thd_Create(RME_BOOT_BENCH_RCV_THD,RME_TID_4,5,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_recv,
 1236              		.loc 1 169 2
 1237 0030 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1238 0034 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1239 0038 003000E3 		movw	r3, #:lower16:Cur_addr
 1240 003c 003040E3 		movt	r3, #:upper16:Cur_addr
 1241 0040 003093E5 		ldr	r3, [r3]
 1242 0044 B0109FE5 		ldr	r1, .L62
 1243 0048 0C108DE5 		str	r1, [sp, #12]
 1244 004c 0611E0E3 		mvn	r1, #-2147483647
 1245 0050 08108DE5 		str	r1, [sp, #8]
 1246 0054 0D10A0E3 		mov	r1, #13
 1247 0058 04108DE5 		str	r1, [sp, #4]
 1248 005c 00308DE5 		str	r3, [sp]
 1249 0060 0230A0E1 		mov	r3, r2
 1250 0064 0520A0E3 		mov	r2, #5
 1251 0068 0410A0E3 		mov	r1, #4
 1252 006c 0F00A0E3 		mov	r0, #15
 1253 0070 FEFFFFEB 		bl	RME_Thd_Create
 170:Source/rme_benchmark.c **** 					Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME,(ptr_t)&RME_Stack3[2000]);
 171:Source/rme_benchmark.c **** 	Cur_addr+=512;
 1254              		.loc 1 171 10
 1255 0074 003000E3 		movw	r3, #:lower16:Cur_addr
 1256 0078 003040E3 		movt	r3, #:upper16:Cur_addr
 1257 007c 003093E5 		ldr	r3, [r3]
 1258 0080 022C83E2 		add	r2, r3, #512
 1259 0084 003000E3 		movw	r3, #:lower16:Cur_addr
 1260 0088 003040E3 		movt	r3, #:upper16:Cur_addr
 1261 008c 002083E5 		str	r2, [r3]
 172:Source/rme_benchmark.c **** 	RME_Thd_Create(RME_BOOT_BENCH_SEN_THD,RME_TID_3,4,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_send,
 1262              		.loc 1 172 2
 1263 0090 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1264 0094 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1265 0098 003000E3 		movw	r3, #:lower16:Cur_addr
 1266 009c 003040E3 		movt	r3, #:upper16:Cur_addr
 1267 00a0 003093E5 		ldr	r3, [r3]
 1268 00a4 54109FE5 		ldr	r1, .L62+4
 1269 00a8 0C108DE5 		str	r1, [sp, #12]
 1270 00ac 0611E0E3 		mvn	r1, #-2147483647
 1271 00b0 08108DE5 		str	r1, [sp, #8]
 1272 00b4 0D10A0E3 		mov	r1, #13
 1273 00b8 04108DE5 		str	r1, [sp, #4]
 1274 00bc 00308DE5 		str	r3, [sp]
 1275 00c0 0230A0E1 		mov	r3, r2
 1276 00c4 0420A0E3 		mov	r2, #4
 1277 00c8 0310A0E3 		mov	r1, #3
 1278 00cc 0E00A0E3 		mov	r0, #14
 1279 00d0 FEFFFFEB 		bl	RME_Thd_Create
 173:Source/rme_benchmark.c **** 				   Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME,(ptr_t)&RME_Stack2[2000]);
 174:Source/rme_benchmark.c **** 	Cur_addr+=512;
 1280              		.loc 1 174 10
 1281 00d4 003000E3 		movw	r3, #:lower16:Cur_addr
 1282 00d8 003040E3 		movt	r3, #:upper16:Cur_addr
 1283 00dc 003093E5 		ldr	r3, [r3]
 1284 00e0 022C83E2 		add	r2, r3, #512
 1285 00e4 003000E3 		movw	r3, #:lower16:Cur_addr
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 38


 1286 00e8 003040E3 		movt	r3, #:upper16:Cur_addr
 1287 00ec 002083E5 		str	r2, [r3]
 175:Source/rme_benchmark.c **** }
 1288              		.loc 1 175 1
 1289 00f0 00F020E3 		nop
 1290 00f4 04D04BE2 		sub	sp, fp, #4
 1291              		.cfi_def_cfa 13, 8
 1292              		@ sp needed
 1293 00f8 0088BDE8 		pop	{fp, pc}
 1294              	.L63:
 1295              		.align	2
 1296              	.L62:
 1297 00fc 401F0000 		.word	RME_Stack3+8000
 1298 0100 401F0000 		.word	RME_Stack2+8000
 1299              		.cfi_endproc
 1300              	.LFE19:
 1302              		.section	.rodata
 1303 01e2 0000     		.align	2
 1304              	.LC17:
 1305 01e4 62656769 		.ascii	"begin RME_Same_Prc_Thd_Switch_Test\000"
 1305      6E20524D 
 1305      455F5361 
 1305      6D655F50 
 1305      72635F54 
 1306 0207 00       		.align	2
 1307              	.LC18:
 1308 0208 0D0A2870 		.ascii	"\015\012(ptr_t)(&RME_Stack[2047])= \000"
 1308      74725F74 
 1308      29282652 
 1308      4D455F53 
 1308      7461636B 
 1309 0226 0000     		.align	2
 1310              	.LC19:
 1311 0228 0D0A496E 		.ascii	"\015\012Initialize the thread's stack Stack_Addr= \000"
 1311      69746961 
 1311      6C697A65 
 1311      20746865 
 1311      20746872 
 1312 0255 000000   		.align	2
 1313              	.LC20:
 1314 0258 0D0A5472 		.ascii	"\015\012Try to switch to that thread - should fail "
 1314      7920746F 
 1314      20737769 
 1314      74636820 
 1314      746F2074 
 1315 0285 20726574 		.ascii	" retval= \000"
 1315      76616C3D 
 1315      2000
 1316 028f 00       		.align	2
 1317              	.LC21:
 1318 0290 0D0A5472 		.ascii	"\015\012Try to switch to that thread  retval= \000"
 1318      7920746F 
 1318      20737769 
 1318      74636820 
 1318      746F2074 
 1319              		.section	.text.RME_Same_Prc_Thd_Switch_Test,"ax",%progbits
 1320              		.align	2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 39


 1321              		.global	RME_Same_Prc_Thd_Switch_Test
 1322              		.syntax unified
 1323              		.arm
 1325              	RME_Same_Prc_Thd_Switch_Test:
 1326              	.LFB20:
 176:Source/rme_benchmark.c **** 
 177:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test *************************************
 178:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 179:Source/rme_benchmark.c **** Input       : None.
 180:Source/rme_benchmark.c **** Output      : None.
 181:Source/rme_benchmark.c **** Return      : None.
 182:Source/rme_benchmark.c **** ******************************************************************************/
 183:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test(void)
 184:Source/rme_benchmark.c **** {
 1327              		.loc 1 184 1
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 16
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331 0000 00482DE9 		push	{fp, lr}
 1332              		.cfi_def_cfa_offset 8
 1333              		.cfi_offset 11, -8
 1334              		.cfi_offset 14, -4
 1335 0004 04B08DE2 		add	fp, sp, #4
 1336              		.cfi_def_cfa 11, 4
 1337 0008 20D04DE2 		sub	sp, sp, #32
 185:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n/****************");
 1338              		.loc 1 185 2
 1339 000c 000000E3 		movw	r0, #:lower16:.LC12
 1340 0010 000040E3 		movt	r0, #:upper16:.LC12
 1341 0014 FEFFFFEB 		bl	USR_DBG_S
 186:Source/rme_benchmark.c **** 	USR_DBG_S("begin RME_Same_Prc_Thd_Switch_Test");
 1342              		.loc 1 186 2
 1343 0018 000000E3 		movw	r0, #:lower16:.LC17
 1344 001c 000040E3 		movt	r0, #:upper16:.LC17
 1345 0020 FEFFFFEB 		bl	USR_DBG_S
 187:Source/rme_benchmark.c **** 	USR_DBG_S("****************/");
 1346              		.loc 1 187 2
 1347 0024 000000E3 		movw	r0, #:lower16:.LC14
 1348 0028 000040E3 		movt	r0, #:upper16:.LC14
 1349 002c FEFFFFEB 		bl	USR_DBG_S
 188:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 189:Source/rme_benchmark.c ****     ret_t Retval;
 190:Source/rme_benchmark.c ****     cnt_t Count;
 191:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 192:Source/rme_benchmark.c ****     ptr_t Temp;
 193:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 194:Source/rme_benchmark.c ****     Stack_Addr=(ptr_t)&RME_Stack1[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 1350              		.loc 1 194 15
 1351 0030 70319FE5 		ldr	r3, .L68
 1352 0034 0C300BE5 		str	r3, [fp, #-12]
 195:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 196:Source/rme_benchmark.c ****                                1, 2, 3, 4); */
 197:Source/rme_benchmark.c **** 
 198:Source/rme_benchmark.c ****     USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 1353              		.loc 1 198 5
 1354 0038 000000E3 		movw	r0, #:lower16:.LC18
 1355 003c 000040E3 		movt	r0, #:upper16:.LC18
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 40


 1356 0040 FEFFFFEB 		bl	USR_DBG_S
 199:Source/rme_benchmark.c ****     USR_DBG_H((ptr_t)(&RME_Stack1[2047]));
 1357              		.loc 1 199 5
 1358 0044 60319FE5 		ldr	r3, .L68+4
 1359 0048 0300A0E1 		mov	r0, r3
 1360 004c FEFFFFEB 		bl	USR_DBG_H
 200:Source/rme_benchmark.c ****     USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 1361              		.loc 1 200 5
 1362 0050 000000E3 		movw	r0, #:lower16:.LC19
 1363 0054 000040E3 		movt	r0, #:upper16:.LC19
 1364 0058 FEFFFFEB 		bl	USR_DBG_S
 201:Source/rme_benchmark.c ****     USR_DBG_H(Stack_Addr);
 1365              		.loc 1 201 5
 1366 005c 0C001BE5 		ldr	r0, [fp, #-12]
 1367 0060 FEFFFFEB 		bl	USR_DBG_H
 202:Source/rme_benchmark.c **** 
 203:Source/rme_benchmark.c ****     /* There are still many bugs in the kernel. Need a white-box test to guarantee
 204:Source/rme_benchmark.c ****      * that it is free of bugs. Find a scheme to do that */
 205:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 206:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 207:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 208:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 209:Source/rme_benchmark.c ****     Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,RME_BOOT_BENCH_THD,
 1368              		.loc 1 209 12
 1369 0064 0030A0E3 		mov	r3, #0
 1370 0068 08308DE5 		str	r3, [sp, #8]
 1371 006c 093AA0E3 		mov	r3, #36864
 1372 0070 04308DE5 		str	r3, [sp, #4]
 1373 0074 1F30A0E3 		mov	r3, #31
 1374 0078 00308DE5 		str	r3, [sp]
 1375 007c 0230A0E3 		mov	r3, #2
 1376 0080 0820A0E3 		mov	r2, #8
 1377 0084 0510A0E3 		mov	r1, #5
 1378 0088 0000A0E3 		mov	r0, #0
 1379 008c FEFFFFEB 		bl	RME_Thd_Crt
 1380 0090 10000BE5 		str	r0, [fp, #-16]
 210:Source/rme_benchmark.c ****                        RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,RME_BOOT_BENCH_KOM_FRONTIER,0);
 211:Source/rme_benchmark.c ****     USR_DBG_S("\r\ncreate a thread      retval= ");
 1381              		.loc 1 211 5
 1382 0094 000000E3 		movw	r0, #:lower16:.LC2
 1383 0098 000040E3 		movt	r0, #:upper16:.LC2
 1384 009c FEFFFFEB 		bl	USR_DBG_S
 212:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1385              		.loc 1 212 5
 1386 00a0 10001BE5 		ldr	r0, [fp, #-16]
 1387 00a4 FEFFFFEB 		bl	USR_DBG_I
 213:Source/rme_benchmark.c **** 
 214:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 215:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,RME_BOOT_BENCH_THD,
 216:Source/rme_benchmark.c ****     		          RME_PARAM_D1(RME_BOOT_INIT_THD)|RME_PARAM_D0(RME_CID_NULL),
 217:Source/rme_benchmark.c **** 					  RME_PARAM_D1(RME_TID_2)|RME_PARAM_D0(RME_BOOT_INIT_PRC),
 218:Source/rme_benchmark.c **** 					  RME_BOOT_HYPER_KOM_VADDR);*/
 219:Source/rme_benchmark.c ****     Retval=RME_Thd_Sched_Bind(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_CID_NULL,
 1388              		.loc 1 219 12
 1389 00a8 0030A0E3 		mov	r3, #0
 1390 00ac 04308DE5 		str	r3, [sp, #4]
 1391 00b0 0030A0E3 		mov	r3, #0
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 41


 1392 00b4 00308DE5 		str	r3, [sp]
 1393 00b8 0230A0E3 		mov	r3, #2
 1394 00bc 0229A0E3 		mov	r2, #32768
 1395 00c0 0310A0E3 		mov	r1, #3
 1396 00c4 0800A0E3 		mov	r0, #8
 1397 00c8 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 1398 00cc 10000BE5 		str	r0, [fp, #-16]
 220:Source/rme_benchmark.c ****                               RME_TID_2,0,RME_BOOT_HYPER_KOM_VADDR);
 221:Source/rme_benchmark.c ****     USR_DBG_S("\r\nBind the thread to the processor retval= ");
 1399              		.loc 1 221 5
 1400 00d0 000000E3 		movw	r0, #:lower16:.LC3
 1401 00d4 000040E3 		movt	r0, #:upper16:.LC3
 1402 00d8 FEFFFFEB 		bl	USR_DBG_S
 222:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1403              		.loc 1 222 5
 1404 00dc 10001BE5 		ldr	r0, [fp, #-16]
 1405 00e0 FEFFFFEB 		bl	USR_DBG_I
 223:Source/rme_benchmark.c ****     extern void RME_Deadloop(void);
 224:Source/rme_benchmark.c ****     /* Set the execution information */
 225:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,RME_BOOT_BENCH_THD,
 226:Source/rme_benchmark.c **** 	         	 	 (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 227:Source/rme_benchmark.c ****     		         //(ptr_t)RME_Deadloop,
 228:Source/rme_benchmark.c **** 					 Stack_Addr,RME_TID_2);*/
 229:Source/rme_benchmark.c ****     Retval=RME_Thd_Exec_Set(RME_BOOT_BENCH_THD,(ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,Stack_Addr,R
 1406              		.loc 1 229 12
 1407 00e4 001000E3 		movw	r1, #:lower16:RME_Same_Prc_Thd_Switch_Test_Thd
 1408 00e8 001040E3 		movt	r1, #:upper16:RME_Same_Prc_Thd_Switch_Test_Thd
 1409 00ec 0230A0E3 		mov	r3, #2
 1410 00f0 0C201BE5 		ldr	r2, [fp, #-12]
 1411 00f4 0800A0E3 		mov	r0, #8
 1412 00f8 FEFFFFEB 		bl	RME_Thd_Exec_Set
 1413 00fc 10000BE5 		str	r0, [fp, #-16]
 230:Source/rme_benchmark.c ****     //RME_Stack[2000]=1234;
 231:Source/rme_benchmark.c ****     USR_DBG_S("\r\nSet the execution information retval= ");
 1414              		.loc 1 231 5
 1415 0100 000000E3 		movw	r0, #:lower16:.LC4
 1416 0104 000040E3 		movt	r0, #:upper16:.LC4
 1417 0108 FEFFFFEB 		bl	USR_DBG_S
 232:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1418              		.loc 1 232 5
 1419 010c 10001BE5 		ldr	r0, [fp, #-16]
 1420 0110 FEFFFFEB 		bl	USR_DBG_I
 233:Source/rme_benchmark.c ****     USR_DBG_S("\r\n");
 1421              		.loc 1 233 5
 1422 0114 000000E3 		movw	r0, #:lower16:.LC5
 1423 0118 000040E3 		movt	r0, #:upper16:.LC5
 1424 011c FEFFFFEB 		bl	USR_DBG_S
 234:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 235:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,RME_BOOT_BENCH_THD,
 236:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 237:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 238:Source/rme_benchmark.c ****                       10000000);*/
 239:Source/rme_benchmark.c ****     Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_THD_INF_TIME);
 1425              		.loc 1 239 12
 1426 0120 0621E0E3 		mvn	r2, #-2147483647
 1427 0124 0310A0E3 		mov	r1, #3
 1428 0128 0800A0E3 		mov	r0, #8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 42


 1429 012c FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1430 0130 10000BE5 		str	r0, [fp, #-16]
 240:Source/rme_benchmark.c **** 
 241:Source/rme_benchmark.c ****     //Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,1000);
 242:Source/rme_benchmark.c ****     USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1431              		.loc 1 242 5
 1432 0134 000000E3 		movw	r0, #:lower16:.LC6
 1433 0138 000040E3 		movt	r0, #:upper16:.LC6
 1434 013c FEFFFFEB 		bl	USR_DBG_S
 243:Source/rme_benchmark.c ****          USR_DBG_I(Retval);
 1435              		.loc 1 243 10
 1436 0140 10001BE5 		ldr	r0, [fp, #-16]
 1437 0144 FEFFFFEB 		bl	USR_DBG_I
 244:Source/rme_benchmark.c **** 
 245:Source/rme_benchmark.c ****     Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 1438              		.loc 1 245 12
 1439 0148 0010A0E3 		mov	r1, #0
 1440 014c 0800A0E3 		mov	r0, #8
 1441 0150 FEFFFFEB 		bl	RME_Thd_Swt
 1442 0154 10000BE5 		str	r0, [fp, #-16]
 246:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTry to switch to that thread - should fail  retval= ");
 1443              		.loc 1 246 5
 1444 0158 000000E3 		movw	r0, #:lower16:.LC20
 1445 015c 000040E3 		movt	r0, #:upper16:.LC20
 1446 0160 FEFFFFEB 		bl	USR_DBG_S
 247:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1447              		.loc 1 247 5
 1448 0164 10001BE5 		ldr	r0, [fp, #-16]
 1449 0168 FEFFFFEB 		bl	USR_DBG_I
 248:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 249:Source/rme_benchmark.c ****     * composite 324. opted max:323
 250:Source/rme_benchmark.c ****     * all:33.0
 251:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 252:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 253:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 254:Source/rme_benchmark.c ****     * total:16.57
 255:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 256:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 257:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 258:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 259:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 260:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 261:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 262:Source/rme_benchmark.c ****     */
 263:Source/rme_benchmark.c ****     //_RME_Tsc_Init();
 264:Source/rme_benchmark.c ****     //for(Count=0;Count<10000;Count++)
 265:Source/rme_benchmark.c ****     for(Count=0;Count<10;Count++)
 1450              		.loc 1 265 14
 1451 016c 0030A0E3 		mov	r3, #0
 1452 0170 08300BE5 		str	r3, [fp, #-8]
 1453              		.loc 1 265 5
 1454 0174 070000EA 		b	.L65
 1455              	.L66:
 266:Source/rme_benchmark.c ****     {
 267:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 268:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 269:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 43


 270:Source/rme_benchmark.c ****                           0,
 271:Source/rme_benchmark.c ****                           0);*/
 272:Source/rme_benchmark.c ****         //Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 273:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 274:Source/rme_benchmark.c ****        // Time[Count]=Temp-8;
 275:Source/rme_benchmark.c ****         USR_DBG_S("\r\nTry to switch to that thread  retval= ");
 1456              		.loc 1 275 9
 1457 0178 000000E3 		movw	r0, #:lower16:.LC21
 1458 017c 000040E3 		movt	r0, #:upper16:.LC21
 1459 0180 FEFFFFEB 		bl	USR_DBG_S
 276:Source/rme_benchmark.c ****         USR_DBG_I(Retval);
 1460              		.loc 1 276 9
 1461 0184 10001BE5 		ldr	r0, [fp, #-16]
 1462 0188 FEFFFFEB 		bl	USR_DBG_I
 265:Source/rme_benchmark.c ****     {
 1463              		.loc 1 265 31 discriminator 3
 1464 018c 08301BE5 		ldr	r3, [fp, #-8]
 1465 0190 013083E2 		add	r3, r3, #1
 1466 0194 08300BE5 		str	r3, [fp, #-8]
 1467              	.L65:
 265:Source/rme_benchmark.c ****     {
 1468              		.loc 1 265 22 discriminator 1
 1469 0198 08301BE5 		ldr	r3, [fp, #-8]
 1470 019c 090053E3 		cmp	r3, #9
 1471 01a0 F4FFFFDA 		ble	.L66
 1472              	.L67:
 277:Source/rme_benchmark.c ****     }
 278:Source/rme_benchmark.c ****     
 279:Source/rme_benchmark.c ****     // test sig_snd/sig_rcv
 280:Source/rme_benchmark.c **** 
 281:Source/rme_benchmark.c **** 
 282:Source/rme_benchmark.c **** 
 283:Source/rme_benchmark.c ****     while(1);
 1473              		.loc 1 283 10
 1474 01a4 FEFFFFEA 		b	.L67
 1475              	.L69:
 1476              		.align	2
 1477              	.L68:
 1478 01a8 401F0000 		.word	RME_Stack1+8000
 1479 01ac FC1F0000 		.word	RME_Stack1+8188
 1480              		.cfi_endproc
 1481              	.LFE20:
 1483              		.section	.text.RME_Diff_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 1484              		.align	2
 1485              		.global	RME_Diff_Prc_Thd_Switch_Test_Thd
 1486              		.syntax unified
 1487              		.arm
 1489              	RME_Diff_Prc_Thd_Switch_Test_Thd:
 1490              	.LFB21:
 284:Source/rme_benchmark.c **** }
 285:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test ********************************/
 286:Source/rme_benchmark.c **** 
 287:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test_Thd *********************************
 288:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
 289:Source/rme_benchmark.c **** Input       : None.
 290:Source/rme_benchmark.c **** Output      : None.
 291:Source/rme_benchmark.c **** Return      : None.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 44


 292:Source/rme_benchmark.c **** ******************************************************************************/
 293:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
 294:Source/rme_benchmark.c **** {
 1491              		.loc 1 294 1
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 24
 1494              		@ frame_needed = 1, uses_anonymous_args = 0
 1495 0000 00482DE9 		push	{fp, lr}
 1496              		.cfi_def_cfa_offset 8
 1497              		.cfi_offset 11, -8
 1498              		.cfi_offset 14, -4
 1499 0004 04B08DE2 		add	fp, sp, #4
 1500              		.cfi_def_cfa 11, 4
 1501 0008 18D04DE2 		sub	sp, sp, #24
 1502 000c 10000BE5 		str	r0, [fp, #-16]
 1503 0010 14100BE5 		str	r1, [fp, #-20]
 1504 0014 18200BE5 		str	r2, [fp, #-24]
 1505 0018 1C300BE5 		str	r3, [fp, #-28]
 1506              	.L71:
 295:Source/rme_benchmark.c ****     ret_t Retval;
 296:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
 297:Source/rme_benchmark.c ****     while(1)
 298:Source/rme_benchmark.c ****     {
 299:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 300:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
 301:Source/rme_benchmark.c ****                           0,
 302:Source/rme_benchmark.c ****                           0);*/
 303:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 1507              		.loc 1 303 16 discriminator 1
 1508 001c 0010A0E3 		mov	r1, #0
 1509 0020 0300A0E3 		mov	r0, #3
 1510 0024 FEFFFFEB 		bl	RME_Thd_Swt
 1511 0028 08000BE5 		str	r0, [fp, #-8]
 1512              		.loc 1 303 15
 1513 002c FAFFFFEA 		b	.L71
 1514              		.cfi_endproc
 1515              	.LFE21:
 1517              		.section	.text.RME_Diff_Prc_Thd_Switch_Test,"ax",%progbits
 1518              		.align	2
 1519              		.global	RME_Diff_Prc_Thd_Switch_Test
 1520              		.syntax unified
 1521              		.arm
 1523              	RME_Diff_Prc_Thd_Switch_Test:
 1524              	.LFB22:
 304:Source/rme_benchmark.c ****     }
 305:Source/rme_benchmark.c **** }
 306:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test_Thd ****************************/
 307:Source/rme_benchmark.c **** 
 308:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test *************************************
 309:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 310:Source/rme_benchmark.c **** Input       : None.
 311:Source/rme_benchmark.c **** Output      : None.
 312:Source/rme_benchmark.c **** Return      : None.
 313:Source/rme_benchmark.c **** ******************************************************************************/
 314:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test(void)
 315:Source/rme_benchmark.c **** {
 1525              		.loc 1 315 1
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 45


 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 16
 1528              		@ frame_needed = 1, uses_anonymous_args = 0
 1529 0000 00482DE9 		push	{fp, lr}
 1530              		.cfi_def_cfa_offset 8
 1531              		.cfi_offset 11, -8
 1532              		.cfi_offset 14, -4
 1533 0004 04B08DE2 		add	fp, sp, #4
 1534              		.cfi_def_cfa 11, 4
 1535 0008 18D04DE2 		sub	sp, sp, #24
 316:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 317:Source/rme_benchmark.c ****     ret_t Retval;
 318:Source/rme_benchmark.c ****     cnt_t Count;
 319:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 320:Source/rme_benchmark.c ****     ptr_t Temp;
 321:Source/rme_benchmark.c ****     ptr_t Frontier;
 322:Source/rme_benchmark.c ****     
 323:Source/rme_benchmark.c ****     Frontier=RME_BOOT_BENCH_KOM_FRONTIER;
 1536              		.loc 1 323 13
 1537 000c 093AA0E3 		mov	r3, #36864
 1538 0010 0C300BE5 		str	r3, [fp, #-12]
 324:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 325:Source/rme_benchmark.c ****     Stack_Addr=_RME_Stack_Init((ptr_t)(&RME_Stack1[2047]),
 1539              		.loc 1 325 16
 1540 0014 54009FE5 		ldr	r0, .L76
 1541 0018 001000E3 		movw	r1, #:lower16:RME_Thd_Stub
 1542 001c 001040E3 		movt	r1, #:upper16:RME_Thd_Stub
 1543 0020 0430A0E3 		mov	r3, #4
 1544 0024 04308DE5 		str	r3, [sp, #4]
 1545 0028 0330A0E3 		mov	r3, #3
 1546 002c 00308DE5 		str	r3, [sp]
 1547 0030 0230A0E3 		mov	r3, #2
 1548 0034 0120A0E3 		mov	r2, #1
 1549 0038 FEFFFFEB 		bl	_RME_Stack_Init
 1550 003c 10000BE5 		str	r0, [fp, #-16]
 326:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 327:Source/rme_benchmark.c ****                                1, 2, 3, 4);
 328:Source/rme_benchmark.c ****     
 329:Source/rme_benchmark.c ****     /* Create the page table for the whole address space range */
 330:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 331:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|
 332:Source/rme_benchmark.c ****                       RME_PARAM_O1(29)|RME_PARAM_O0(3),
 333:Source/rme_benchmark.c ****                       Frontier,
 334:Source/rme_benchmark.c ****                       1);*/
 335:Source/rme_benchmark.c **** //    Frontier+=;
 336:Source/rme_benchmark.c **** //    /* Create the page table for the SRAM range */
 337:Source/rme_benchmark.c **** //    Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 338:Source/rme_benchmark.c **** //                      RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_SRAM)|
 339:Source/rme_benchmark.c **** //                      RME_PARAM_O1(16)|RME_PARAM_O0(3),
 340:Source/rme_benchmark.c **** //                      Frontier,
 341:Source/rme_benchmark.c **** //                      0x20000001);*/
 342:Source/rme_benchmark.c **** //    Frontier+=;
 343:Source/rme_benchmark.c **** //    /* Map the pages into the top-level and the second-level */
 344:Source/rme_benchmark.c **** //    RME_CAP_OP(RME_SVC_PGT_ADD,0,
 345:Source/rme_benchmark.c **** //               RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|0,
 346:Source/rme_benchmark.c **** //               RME_PARAM_D1(RME_BOOT_INIT_PGT)|0,
 347:Source/rme_benchmark.c **** //               |0)*/
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 46


 348:Source/rme_benchmark.c ****                       
 349:Source/rme_benchmark.c ****                   
 350:Source/rme_benchmark.c ****     
 351:Source/rme_benchmark.c ****     
 352:Source/rme_benchmark.c ****     
 353:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 354:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 355:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 356:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 357:Source/rme_benchmark.c ****     
 358:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 359:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,0,
 360:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 361:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 362:Source/rme_benchmark.c ****                       0);*/
 363:Source/rme_benchmark.c ****     
 364:Source/rme_benchmark.c ****     /* Set the execution information */
 365:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,0,
 366:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 367:Source/rme_benchmark.c ****                       (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 368:Source/rme_benchmark.c ****                       Stack_Addr);*/
 369:Source/rme_benchmark.c ****                       
 370:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 371:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,0,
 372:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 373:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 374:Source/rme_benchmark.c ****                       10000000);*/
 375:Source/rme_benchmark.c ****     
 376:Source/rme_benchmark.c ****     /* Try to switch to that thread - should fail */
 377:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 378:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 379:Source/rme_benchmark.c ****                       0,
 380:Source/rme_benchmark.c ****                       0);*/
 381:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 382:Source/rme_benchmark.c ****     * composite 324. opted max:323
 383:Source/rme_benchmark.c ****     * all:33.0
 384:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 385:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 386:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 387:Source/rme_benchmark.c ****     * total:16.57
 388:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 389:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 390:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 391:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 392:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 393:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 394:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 395:Source/rme_benchmark.c ****     */
 396:Source/rme_benchmark.c ****     _RME_Tsc_Init();
 1551              		.loc 1 396 5
 1552 0040 FEFFFFEB 		bl	_RME_Tsc_Init
 397:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 1553              		.loc 1 397 14
 1554 0044 0030A0E3 		mov	r3, #0
 1555 0048 08300BE5 		str	r3, [fp, #-8]
 1556              		.loc 1 397 5
 1557 004c 020000EA 		b	.L73
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 47


 1558              	.L74:
 1559              		.loc 1 397 34 discriminator 3
 1560 0050 08301BE5 		ldr	r3, [fp, #-8]
 1561 0054 013083E2 		add	r3, r3, #1
 1562 0058 08300BE5 		str	r3, [fp, #-8]
 1563              	.L73:
 1564              		.loc 1 397 22 discriminator 1
 1565 005c 08301BE5 		ldr	r3, [fp, #-8]
 1566 0060 0F2702E3 		movw	r2, #9999
 1567 0064 020053E1 		cmp	r3, r2
 1568 0068 F8FFFFDA 		ble	.L74
 1569              	.L75:
 398:Source/rme_benchmark.c ****     {
 399:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 400:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 401:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 402:Source/rme_benchmark.c ****                           0,
 403:Source/rme_benchmark.c ****                           0);*/
 404:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 405:Source/rme_benchmark.c ****         //Time[Count]=Temp-8;
 406:Source/rme_benchmark.c ****     }
 407:Source/rme_benchmark.c ****     
 408:Source/rme_benchmark.c ****     while(1);
 1570              		.loc 1 408 10
 1571 006c FEFFFFEA 		b	.L75
 1572              	.L77:
 1573              		.align	2
 1574              	.L76:
 1575 0070 FC1F0000 		.word	RME_Stack1+8188
 1576              		.cfi_endproc
 1577              	.LFE22:
 1579              		.section	.rodata
 1580 02b9 000000   		.align	2
 1581              	.LC22:
 1582 02bc 0D0A5465 		.ascii	"\015\012Test begin!\000"
 1582      73742062 
 1582      6567696E 
 1582      2100
 1583 02ca 0000     		.align	2
 1584              	.LC23:
 1585 02cc 0D0A5465 		.ascii	"\015\012Test done!\000"
 1585      73742064 
 1585      6F6E6521 
 1585      00
 1586              		.section	.text.RME_Benchmark,"ax",%progbits
 1587              		.align	2
 1588              		.global	RME_Benchmark
 1589              		.syntax unified
 1590              		.arm
 1592              	RME_Benchmark:
 1593              	.LFB23:
 409:Source/rme_benchmark.c **** }
 410:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test ********************************/
 411:Source/rme_benchmark.c **** 
 412:Source/rme_benchmark.c **** /* Function:RME_Benchmark *****************************************************
 413:Source/rme_benchmark.c **** Description : The benchmark entry, also the init thread.
 414:Source/rme_benchmark.c **** Input       : None.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 48


 415:Source/rme_benchmark.c **** Output      : None.
 416:Source/rme_benchmark.c **** Return      : None.
 417:Source/rme_benchmark.c **** ******************************************************************************/
 418:Source/rme_benchmark.c **** void RME_Benchmark(void)
 419:Source/rme_benchmark.c **** {
 1594              		.loc 1 419 1
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 0
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 00482DE9 		push	{fp, lr}
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 11, -8
 1601              		.cfi_offset 14, -4
 1602 0004 04B08DE2 		add	fp, sp, #4
 1603              		.cfi_def_cfa 11, 4
 420:Source/rme_benchmark.c **** 	Cur_addr=RME_BOOT_BENCH_KOM_FRONTIER;
 1604              		.loc 1 420 10
 1605 0008 003000E3 		movw	r3, #:lower16:Cur_addr
 1606 000c 003040E3 		movt	r3, #:upper16:Cur_addr
 1607 0010 092AA0E3 		mov	r2, #36864
 1608 0014 002083E5 		str	r2, [r3]
 421:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTest begin!");
 1609              		.loc 1 421 5
 1610 0018 000000E3 		movw	r0, #:lower16:.LC22
 1611 001c 000040E3 		movt	r0, #:upper16:.LC22
 1612 0020 FEFFFFEB 		bl	USR_DBG_S
 422:Source/rme_benchmark.c ****     RME_Same_Prc_Thd_Sig_Testinit();
 1613              		.loc 1 422 5
 1614 0024 FEFFFFEB 		bl	RME_Same_Prc_Thd_Sig_Testinit
 423:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTest done!");
 1615              		.loc 1 423 5
 1616 0028 000000E3 		movw	r0, #:lower16:.LC23
 1617 002c 000040E3 		movt	r0, #:upper16:.LC23
 1618 0030 FEFFFFEB 		bl	USR_DBG_S
 1619              	.L79:
 424:Source/rme_benchmark.c ****     while(1);
 1620              		.loc 1 424 10
 1621 0034 FEFFFFEA 		b	.L79
 1622              		.cfi_endproc
 1623              	.LFE23:
 1625              		.text
 1626              	.Letext0:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 49


DEFINED SYMBOLS
                            *ABS*:00000000 rme_benchmark.c
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:25     .bss.RME_Stack1:00000000 RME_Stack1
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:22     .bss.RME_Stack1:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:32     .bss.RME_Stack2:00000000 RME_Stack2
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:29     .bss.RME_Stack2:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:39     .bss.RME_Stack3:00000000 RME_Stack3
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:36     .bss.RME_Stack3:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:46     .bss.RME_Stack4:00000000 RME_Stack4
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:43     .bss.RME_Stack4:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:53     .bss.RME_Stack5:00000000 RME_Stack5
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:50     .bss.RME_Stack5:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:60     .bss.Time:00000000 Time
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:57     .bss.Time:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:67     .bss.RME_Bench_Buf:00000000 RME_Bench_Buf
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:64     .bss.RME_Bench_Buf:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:70     .text.__USR_Putchar:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:75     .text.__USR_Putchar:00000000 __USR_Putchar
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:119    .text.USR_DBG_I:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:124    .text.USR_DBG_I:00000000 USR_DBG_I
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:274    .text.USR_DBG_H:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:279    .text.USR_DBG_H:00000000 USR_DBG_H
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:395    .text.USR_DBG_S:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:400    .text.USR_DBG_S:00000000 USR_DBG_S
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:462    .text.RME_Thd_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:467    .text.RME_Thd_Crt:00000000 RME_Thd_Crt
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:513    .text.RME_Thd_Exec_Set:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:518    .text.RME_Thd_Exec_Set:00000000 RME_Thd_Exec_Set
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:553    .text.RME_Thd_Time_Xfer:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:558    .text.RME_Thd_Time_Xfer:00000000 RME_Thd_Time_Xfer
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:591    .text.RME_Thd_Sched_Bind:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:596    .text.RME_Thd_Sched_Bind:00000000 RME_Thd_Sched_Bind
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:639    .text.RME_Thd_Swt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:644    .text.RME_Thd_Swt:00000000 RME_Thd_Swt
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:676    .text.RME_Sig_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:681    .text.RME_Sig_Crt:00000000 RME_Sig_Crt
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:714    .text.RME_Sig_Del:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:719    .text.RME_Sig_Del:00000000 RME_Sig_Del
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:752    .text.RME_Sig_Snd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:757    .text.RME_Sig_Snd:00000000 RME_Sig_Snd
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:788    .text.RME_Sig_Rcv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:793    .text.RME_Sig_Rcv:00000000 RME_Sig_Rcv
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:829    .bss.Cur_addr:00000000 Cur_addr
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:826    .bss.Cur_addr:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:832    .text._RME_Tsc_Init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:837    .text._RME_Tsc_Init:00000000 _RME_Tsc_Init
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:862    .rodata:00000000 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:863    .rodata:00000000 .LC0
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:866    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:871    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 RME_Same_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:906    .rodata:0000001c .LC1
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:909    .rodata:0000003c .LC2
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:912    .rodata:0000005c .LC3
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:915    .rodata:00000088 .LC4
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:918    .rodata:000000b4 .LC5
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:921    .rodata:000000b8 .LC6
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:924    .text.RME_Thd_Create:00000000 $a
ARM GAS  C:\Users\even\AppData\Local\Temp\ccUKyvDY.s 			page 50


C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:929    .text.RME_Thd_Create:00000000 RME_Thd_Create
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1037   .rodata:000000e4 .LC7
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1040   .rodata:000000fc .LC8
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1043   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1048   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_send
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1079   .rodata:00000104 .LC9
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1082   .rodata:00000120 .LC10
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1085   .rodata:0000013c .LC11
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1088   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1093   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_recv
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1137   .rodata:00000148 .LC12
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1140   .rodata:0000015c .LC13
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1143   .rodata:00000188 .LC14
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1146   .rodata:0000019c .LC15
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1149   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1154   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_main
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1203   .rodata:000001b8 .LC16
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1206   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1211   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 RME_Same_Prc_Thd_Sig_Testinit
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1297   .text.RME_Same_Prc_Thd_Sig_Testinit:000000fc $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1304   .rodata:000001e4 .LC17
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1307   .rodata:00000208 .LC18
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1310   .rodata:00000228 .LC19
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1313   .rodata:00000258 .LC20
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1317   .rodata:00000290 .LC21
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1320   .text.RME_Same_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1325   .text.RME_Same_Prc_Thd_Switch_Test:00000000 RME_Same_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1478   .text.RME_Same_Prc_Thd_Switch_Test:000001a8 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1484   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1489   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 RME_Diff_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1518   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1523   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 RME_Diff_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1575   .text.RME_Diff_Prc_Thd_Switch_Test:00000070 $d
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1581   .rodata:000002bc .LC22
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1584   .rodata:000002cc .LC23
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1587   .text.RME_Benchmark:00000000 $a
C:\Users\even\AppData\Local\Temp\ccUKyvDY.s:1592   .text.RME_Benchmark:00000000 RME_Benchmark
                           .group:00000000 wm4.0.3b9f63523dc4e8d86e863c7e7e762be7
                           .group:00000000 wm4.rme.h.11.105c42759f88404be372052d8d99e5e6
                           .group:00000000 wm4.benchmark.h.4.919f3c5c397d54724274a5a2ac17eff2

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_idivmod
RME_Svc
RME_Thd_Stub
_RME_Stack_Init
