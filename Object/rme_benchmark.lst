ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 1


   1              		.cpu cortex-a9
   2              		.arch armv7-a
   3              		.fpu neon-fp16
   4              		.arch_extension mp
   5              		.arch_extension sec
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"rme_benchmark.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Source/rme_benchmark.c"
  20              		.global	RME_Stack1
  21              		.section	.bss.RME_Stack1,"aw",%nobits
  22              		.align	2
  25              	RME_Stack1:
  26 0000 00000000 		.space	8192
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.global	RME_Stack2
  28              		.section	.bss.RME_Stack2,"aw",%nobits
  29              		.align	2
  32              	RME_Stack2:
  33 0000 00000000 		.space	8192
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	RME_Stack3
  35              		.section	.bss.RME_Stack3,"aw",%nobits
  36              		.align	2
  39              	RME_Stack3:
  40 0000 00000000 		.space	8192
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.global	RME_Stack4
  42              		.section	.bss.RME_Stack4,"aw",%nobits
  43              		.align	2
  46              	RME_Stack4:
  47 0000 00000000 		.space	8192
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.global	RME_Stack5
  49              		.section	.bss.RME_Stack5,"aw",%nobits
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 2


  50              		.align	2
  53              	RME_Stack5:
  54 0000 00000000 		.space	8192
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	Time
  56              		.section	.bss.Time,"aw",%nobits
  57              		.align	2
  60              	Time:
  61 0000 00000000 		.space	20000
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.global	RME_Bench_Buf
  63              		.section	.bss.RME_Bench_Buf,"aw",%nobits
  64              		.align	2
  67              	RME_Bench_Buf:
  68 0000 00000000 		.space	1024
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.text.__USR_Putchar,"ax",%progbits
  70              		.align	2
  71              		.global	__USR_Putchar
  72              		.syntax unified
  73              		.arm
  75              	__USR_Putchar:
  76              	.LFB0:
  77              		.file 2 "Include/benchmark.h"
   1:Include/benchmark.h **** 
   2:Include/benchmark.h **** #include"rme.h"
   3:Include/benchmark.h **** /* Word size */
   4:Include/benchmark.h **** #define RME_WORD_BIT                                RME_POW2(RME_WORD_ORDER)
   5:Include/benchmark.h **** #define RME_WORD_BYTE                               (RME_WORD_BIT>>3)
   6:Include/benchmark.h **** #define RME_WORD_BIT_O1                             (RME_WORD_BYTE)
   7:Include/benchmark.h **** #define RME_WORD_BIT_O2                             (RME_WORD_BYTE*2U)
   8:Include/benchmark.h **** #define RME_WORD_BIT_O3                             (RME_WORD_BYTE*3U)
   9:Include/benchmark.h **** #define RME_WORD_BIT_O4                             (RME_WORD_BYTE*4U)
  10:Include/benchmark.h **** #define RME_WORD_BIT_O5                             (RME_WORD_BYTE*5U)
  11:Include/benchmark.h **** #define RME_WORD_BIT_O6                             (RME_WORD_BYTE*6U)
  12:Include/benchmark.h **** #define RME_WORD_BIT_O7                             (RME_WORD_BYTE*7U)
  13:Include/benchmark.h **** #define RME_WORD_BIT_Q1                             RME_WORD_BIT_O2
  14:Include/benchmark.h **** #define RME_WORD_BIT_Q2                             RME_WORD_BIT_O4
  15:Include/benchmark.h **** #define RME_WORD_BIT_Q3                             RME_WORD_BIT_O6
  16:Include/benchmark.h **** #define RME_WORD_BIT_D1                             RME_WORD_BIT_Q2
  17:Include/benchmark.h **** /* Thread creation */
  18:Include/benchmark.h **** #define RME_THD_SVC(ATTR,IS_HYP,SVC)                (RME_FIELD(ATTR,7U)|RME_FIELD(IS_HYP,6U)|(SVC))
  19:Include/benchmark.h **** /* UART peripheral address */
  20:Include/benchmark.h **** #define RME_A7A_UART_CONTROL      					(*((volatile unsigned int*)(0xE0001000)))
  21:Include/benchmark.h **** #define RME_A7A_UART_MODE         					(*((volatile unsigned int*)(0xE0001004)))
  22:Include/benchmark.h **** #define RME_A7A_UART_BRGEN        					(*((volatile unsigned int*)(0xE0001018)))
  23:Include/benchmark.h **** #define RME_A7A_UART_STATUS       					(*((volatile unsigned int*)(0xE000102C)))
  24:Include/benchmark.h **** #define RME_A7A_UART_FIFO         					(*((volatile unsigned int*)(0xE0001030)))
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 3


  25:Include/benchmark.h **** #define RME_A7A_UART_BRDIV        					(*((volatile unsigned int*)(0xE0001034)))
  26:Include/benchmark.h **** #define RME_A7A_UART_STATUS_TXE   					(1U<<3)
  27:Include/benchmark.h **** //#define RME_DBG_S(STR)                              RME_Str_Print((const signed char*)(STR))
  28:Include/benchmark.h **** /* NULL */
  29:Include/benchmark.h **** #define RME_NULL 									0
  30:Include/benchmark.h **** 
  31:Include/benchmark.h **** #define RME_A7A_PUTCHAR(CHAR) \
  32:Include/benchmark.h **** do \
  33:Include/benchmark.h **** { \
  34:Include/benchmark.h ****     while((RME_A7A_UART_STATUS&RME_A7A_UART_STATUS_TXE)==0); \
  35:Include/benchmark.h **** 	RME_A7A_UART_FIFO=(CHAR); \
  36:Include/benchmark.h **** } \
  37:Include/benchmark.h **** while(0)
  38:Include/benchmark.h **** 
  39:Include/benchmark.h **** /* Define ********************************************************************/
  40:Include/benchmark.h **** /* Types */
  41:Include/benchmark.h **** typedef signed int                          s32;
  42:Include/benchmark.h **** typedef signed short                        s16;
  43:Include/benchmark.h **** typedef signed char                         s8;
  44:Include/benchmark.h **** typedef unsigned int                        u32;
  45:Include/benchmark.h **** typedef unsigned short                      u16;
  46:Include/benchmark.h **** typedef unsigned char                       u8;
  47:Include/benchmark.h **** typedef s32                                 tid_t;
  48:Include/benchmark.h **** typedef u32                       			ptr_t;
  49:Include/benchmark.h **** typedef s32                       			cnt_t;
  50:Include/benchmark.h **** typedef s32 								cid_t;
  51:Include/benchmark.h **** typedef s32                        			ret_t;
  52:Include/benchmark.h **** 
  53:Include/benchmark.h **** #define BENCHMARK_STACK_SIZE 4096
  54:Include/benchmark.h **** /* System service stub */
  55:Include/benchmark.h **** //#define RME_CAP_OP(OP,CAPID,ARG1,ARG2,ARG3) RME_Svc(((OP)<<(sizeof(ptr_t)*4)|(CAPID)),ARG1,ARG2,A
  56:Include/benchmark.h **** #define RME_PARAM_D_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*4))
  57:Include/benchmark.h **** #define RME_PARAM_Q_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*6))
  58:Include/benchmark.h **** #define RME_PARAM_O_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*7))
  59:Include/benchmark.h **** /* The parameter passing - not to be confused with kernel macros. These macros just place the param
  60:Include/benchmark.h **** #define RME_PARAM_D1(X)                     (((X)&RME_PARAM_D_MASK)<<(sizeof(ptr_t)*4))
  61:Include/benchmark.h **** #define RME_PARAM_D0(X)                     ((X)&RME_PARAM_D_MASK)
  62:Include/benchmark.h **** 
  63:Include/benchmark.h **** #define RME_PARAM_Q3(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*6))
  64:Include/benchmark.h **** #define RME_PARAM_Q2(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*4))
  65:Include/benchmark.h **** #define RME_PARAM_Q1(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*2))
  66:Include/benchmark.h **** #define RME_PARAM_Q0(X)                     ((X)&RME_PARAM_Q_MASK)
  67:Include/benchmark.h **** 
  68:Include/benchmark.h **** #define RME_PARAM_O7(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*7))
  69:Include/benchmark.h **** #define RME_PARAM_O6(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*6))
  70:Include/benchmark.h **** #define RME_PARAM_O5(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*5))
  71:Include/benchmark.h **** #define RME_PARAM_O4(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*4))
  72:Include/benchmark.h **** #define RME_PARAM_O3(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*3))
  73:Include/benchmark.h **** #define RME_PARAM_O2(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*2))
  74:Include/benchmark.h **** #define RME_PARAM_O1(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*1))
  75:Include/benchmark.h **** #define RME_PARAM_O0(X)                     ((X)&RME_PARAM_O_MASK)
  76:Include/benchmark.h **** 
  77:Include/benchmark.h **** 
  78:Include/benchmark.h **** /* Bit mask */
  79:Include/benchmark.h **** #define RME_MASK_FULL                               (~((ptr_t)0U))
  80:Include/benchmark.h **** #define RME_MASK_WORD                               (~(RME_MASK_FULL<<RME_WORD_ORDER))
  81:Include/benchmark.h **** #define RME_MASK_WORD_O                             RME_MASK_END(RME_WORD_BIT_O1-1U)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 4


  82:Include/benchmark.h **** #define RME_MASK_WORD_Q                             RME_MASK_END(RME_WORD_BIT_Q1-1U)
  83:Include/benchmark.h **** #define RME_MASK_WORD_D                             RME_MASK_END(RME_WORD_BIT_D1-1U)
  84:Include/benchmark.h **** /* Init thread infinite time marker */
  85:Include/benchmark.h **** #define RME_THD_INIT_TIME                           (RME_MASK_FULL>>1)
  86:Include/benchmark.h **** /* Other thread infinite time marker */
  87:Include/benchmark.h **** #define RME_THD_INF_TIME                            (RME_THD_INIT_TIME-1U)
  88:Include/benchmark.h **** 
  89:Include/benchmark.h **** /* Initial boot capabilities - This should be in accordnace with the kernel settings */
  90:Include/benchmark.h **** /* The capability table of the init process */
  91:Include/benchmark.h **** #define RME_BOOT_INIT_CPT                 		0
  92:Include/benchmark.h **** /* The top-level page table of the init process - always 4GB full range split into 8 pages */
  93:Include/benchmark.h **** #define RME_BOOT_INIT_PGT                 		1
  94:Include/benchmark.h **** /* The init process */
  95:Include/benchmark.h **** #define RME_BOOT_INIT_PRC                 		2
  96:Include/benchmark.h **** /* The init thread */
  97:Include/benchmark.h **** #define RME_BOOT_INIT_THD                 		3
  98:Include/benchmark.h **** /* The initial kernel function capability */
  99:Include/benchmark.h **** #define RME_BOOT_INIT_KFN          				4
 100:Include/benchmark.h **** /* The initial kernel memory capability */
 101:Include/benchmark.h **** #define RME_BOOT_INIT_KOM         				5
 102:Include/benchmark.h **** /* The initial timer endpoint */
 103:Include/benchmark.h **** #define RME_BOOT_INIT_TIMER      				6
 104:Include/benchmark.h **** /* The test objects */
 105:Include/benchmark.h **** #define RME_BOOT_BENCH_THD       				8
 106:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_TOP   				9
 107:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_SRAM  				10
 108:Include/benchmark.h **** #define RME_BOOT_BENCH_SEN_THD					14
 109:Include/benchmark.h **** #define RME_BOOT_BENCH_RCV_THD					15
 110:Include/benchmark.h **** #define RME_BOOT_BENCH_THD_MAIN					16
 111:Include/benchmark.h **** /* The top-level page table of the init process's SRAM */
 112:Include/benchmark.h **** #define RME_BOOT_INIT_PGT_SRAM    				11
 113:Include/benchmark.h **** /* the signal capability */
 114:Include/benchmark.h **** #define RME_BOOT_SIG_BENCH						13
 115:Include/benchmark.h **** /* Power of 2 */
 116:Include/benchmark.h **** #define RME_FIELD(VAL,POW)                      (((ptr_t)(VAL))<<(POW))
 117:Include/benchmark.h **** #define RME_POW2(POW)                           RME_FIELD(1U,POW)
 118:Include/benchmark.h **** /* The order of bits in one CPU machine word */
 119:Include/benchmark.h **** #define RME_WORD_ORDER            				(5U)
 120:Include/benchmark.h **** /* Word size */
 121:Include/benchmark.h **** #define RME_WORD_BIT                            RME_POW2(RME_WORD_ORDER)
 122:Include/benchmark.h **** /* Need to export the memory frontier! */
 123:Include/benchmark.h **** /* Need to export the flags as well ! */
 124:Include/benchmark.h **** /* Export the errno too */
 125:Include/benchmark.h **** #define RME_BOOT_BENCH_KOM_FRONTIER 			0x00009000U
 126:Include/benchmark.h **** /* The kernel-accessible virtual memory address,for this thread's register sets */
 127:Include/benchmark.h **** #define RME_BOOT_HYPER_KOM_VADDR                0x00000000U
 128:Include/benchmark.h **** //0x10005000
 129:Include/benchmark.h **** /* The stack safe size */
 130:Include/benchmark.h **** #define RME_STACK_SAFE_SIZE 					16
 131:Include/benchmark.h **** /* Doesn't want to receive the scheduler signal for the thread */
 132:Include/benchmark.h **** #define RME_CID_NULL   							0x8000
 133:Include/benchmark.h **** /* The maximum priority allowed for this thread. Once set, this cannot be changed. */
 134:Include/benchmark.h **** #define RME_THD_PRIO_MAX                        31
 135:Include/benchmark.h **** /*The thread ID*/
 136:Include/benchmark.h **** #define RME_TID_1                               1
 137:Include/benchmark.h **** #define RME_TID_2                               2
 138:Include/benchmark.h **** #define RME_TID_3                               3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 5


 139:Include/benchmark.h **** #define RME_TID_4                               4
 140:Include/benchmark.h **** #define RME_TID_6                               6
 141:Include/benchmark.h **** 
 142:Include/benchmark.h **** #define RME_A7A_SFR(BASE,OFFSET)        (*((volatile ptr_t*)((ptr_t)((BASE)+(OFFSET)))))
 143:Include/benchmark.h **** 
 144:Include/benchmark.h **** /* Private timer and watchdog block base */
 145:Include/benchmark.h **** #define RME_A7A_PTWD_BASE           0xF8F00600
 146:Include/benchmark.h **** /* global timer base */
 147:Include/benchmark.h **** #define RME_A7A_GTWD_BASE           0xF8F00200/* Timer definitions */
 148:Include/benchmark.h **** #define RME_A7A_SYSTICK_VAL        (7670000U/2U)
 149:Include/benchmark.h **** /* global timer count register 0 */
 150:Include/benchmark.h **** #define RME_A7A_GTWD_GTCR0              RME_A7A_SFR(RME_A7A_GTWD_BASE,0x0000)
 151:Include/benchmark.h **** /* global timer count register 1 ,not need to use */
 152:Include/benchmark.h **** #define RME_A7A_GTWD_GTCR1              RME_A7A_SFR(RME_A7A_GTWD_BASE,0x0004)
 153:Include/benchmark.h **** /* global timer control register */
 154:Include/benchmark.h **** #define RME_A7A_GTWD_GTCTLR             RME_A7A_SFR(RME_A7A_GTWD_BASE,0x0008)
 155:Include/benchmark.h **** /* global timer is enabled and the counter increments normally */
 156:Include/benchmark.h **** #define RME_A7A_GTWD_GTCTLR_TIMEN       (1U<<0U)
 157:Include/benchmark.h **** /* Private timer load register */
 158:Include/benchmark.h **** #define RME_A7A_PTWD_PTLR               RME_A7A_SFR(RME_A7A_PTWD_BASE,0x0000)
 159:Include/benchmark.h **** /* Private timer counter register */
 160:Include/benchmark.h **** #define RME_A7A_PTWD_PTCNTR             RME_A7A_SFR(RME_A7A_PTWD_BASE,0x0004)
 161:Include/benchmark.h **** /* Private timer control register */
 162:Include/benchmark.h **** #define RME_A7A_PTWD_PTCTLR             RME_A7A_SFR(RME_A7A_PTWD_BASE,0x0008)
 163:Include/benchmark.h **** #define RME_A7A_PTWD_PTCTLR_PRESC(X)    ((X)<<8U)
 164:Include/benchmark.h **** #define RME_A7A_PTWD_PTCTLR_IRQEN       (1U<<2U)
 165:Include/benchmark.h **** #define RME_A7A_PTWD_PTCTLR_AUTOREL     (1U<<1U)
 166:Include/benchmark.h **** #define RME_A7A_PTWD_PTCTLR_TIMEN       (1U<<0U)
 167:Include/benchmark.h **** /* Private timer interrupt status register */
 168:Include/benchmark.h **** #define RME_A7A_PTWD_PTISR              RME_A7A_SFR(RME_A7A_PTWD_BASE,0x000C)
 169:Include/benchmark.h **** 
 170:Include/benchmark.h **** /* End Define ****************************************************************/
 171:Include/benchmark.h **** 
 172:Include/benchmark.h **** 
 173:Include/benchmark.h **** 
 174:Include/benchmark.h **** /* Private Variables *********************************************************/
 175:Include/benchmark.h **** /* The stack of the threads - enough for 4 threads */
 176:Include/benchmark.h **** ptr_t RME_Stack1[2048];
 177:Include/benchmark.h **** ptr_t RME_Stack2[2048];
 178:Include/benchmark.h **** ptr_t RME_Stack3[2048];
 179:Include/benchmark.h **** ptr_t RME_Stack4[2048];
 180:Include/benchmark.h **** ptr_t RME_Stack5[2048];
 181:Include/benchmark.h **** u16 Time[10000];
 182:Include/benchmark.h **** s8 RME_Bench_Buf[1024];
 183:Include/benchmark.h **** /* End Private Variables *****************************************************/
 184:Include/benchmark.h **** 
 185:Include/benchmark.h **** /* Function Prototypes *******************************************************/
 186:Include/benchmark.h **** extern ret_t RME_Svc(ptr_t Svc_Capid,ptr_t Param1, ptr_t Param2, ptr_t Param3);
 187:Include/benchmark.h **** /* System service stub */
 188:Include/benchmark.h **** #define RME_SVC(SVC,CID,ARG1,ARG2,ARG3)             RME_Svc(RME_FIELD(SVC,RME_WORD_BIT_D1)|((ptr_t)
 189:Include/benchmark.h **** extern cnt_t RME_Sprint_Uint(s8* Buffer,u32 Arg_Int);
 190:Include/benchmark.h **** extern void RME_Thd_Stub(void);
 191:Include/benchmark.h **** extern void RME_Inv_Stub(void);
 192:Include/benchmark.h **** ptr_t _RME_Stack_Init(ptr_t Stack, ptr_t Stub, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Para
 193:Include/benchmark.h **** void RME_Benchmark(void);
 194:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1);
 195:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test(void);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 6


 196:Include/benchmark.h **** /* End Function Prototypes ***************************************************/
 197:Include/benchmark.h **** 
 198:Include/benchmark.h **** /* Register access */
 199:Include/benchmark.h **** #define RME_A7A_REG(X)                          (*((volatile ptr_t*)(X)))
 200:Include/benchmark.h **** 
 201:Include/benchmark.h **** /* Function:__USR_Putchar *****************************************************
 202:Include/benchmark.h **** Description : Output a character to console. In Cortex-M, under most circumstances,
 203:Include/benchmark.h ****               we should use the ITM for such outputs.
 204:Include/benchmark.h **** Input       : char Char - The character to print.
 205:Include/benchmark.h **** Output      : None.
 206:Include/benchmark.h **** Return      : rme_ptr_t - Always 0.
 207:Include/benchmark.h **** ******************************************************************************/
 208:Include/benchmark.h **** ptr_t __USR_Putchar(char Char)
 209:Include/benchmark.h **** {
  78              		.loc 2 209 1
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 8
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83 0000 04B02DE5 		str	fp, [sp, #-4]!
  84              		.cfi_def_cfa_offset 4
  85              		.cfi_offset 11, -4
  86 0004 00B08DE2 		add	fp, sp, #0
  87              		.cfi_def_cfa_register 11
  88 0008 0CD04DE2 		sub	sp, sp, #12
  89 000c 0030A0E1 		mov	r3, r0
  90 0010 05304BE5 		strb	r3, [fp, #-5]
  91              	.L2:
 210:Include/benchmark.h ****     RME_A7A_PUTCHAR(Char);
  92              		.loc 2 210 5 discriminator 1
  93 0014 2C3001E3 		movw	r3, #4140
  94 0018 00304EE3 		movt	r3, 57344
  95 001c 003093E5 		ldr	r3, [r3]
  96 0020 083003E2 		and	r3, r3, #8
  97 0024 000053E3 		cmp	r3, #0
  98 0028 F9FFFF0A 		beq	.L2
  99              		.loc 2 210 5 is_stmt 0 discriminator 2
 100 002c 303001E3 		movw	r3, #4144
 101 0030 00304EE3 		movt	r3, 57344
 102 0034 D5205BE1 		ldrsb	r2, [fp, #-5]
 103 0038 002083E5 		str	r2, [r3]
 211:Include/benchmark.h ****     return 0;
 104              		.loc 2 211 12 is_stmt 1
 105 003c 0030A0E3 		mov	r3, #0
 212:Include/benchmark.h **** }
 106              		.loc 2 212 1
 107 0040 0300A0E1 		mov	r0, r3
 108 0044 00D08BE2 		add	sp, fp, #0
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 0048 04B09DE4 		ldr	fp, [sp], #4
 112              		.cfi_restore 11
 113              		.cfi_def_cfa_offset 0
 114 004c 1EFF2FE1 		bx	lr
 115              		.cfi_endproc
 116              	.LFE0:
 118              		.section	.text.USR_DBG_I,"ax",%progbits
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 7


 119              		.align	2
 120              		.global	USR_DBG_I
 121              		.syntax unified
 122              		.arm
 124              	USR_DBG_I:
 125              	.LFB1:
 213:Include/benchmark.h **** /* End Function __USR_Putchar ***************************************************/
 214:Include/benchmark.h **** 
 215:Include/benchmark.h **** 
 216:Include/benchmark.h **** /* Function:USR_DBG_I *****************************************************
 217:Include/benchmark.h **** Description : Print a signed integer on the debugging console. This integer is
 218:Include/benchmark.h ****               printed as decimal with sign.
 219:Include/benchmark.h **** Input       : rme_cnt_t Int - The integer to print.
 220:Include/benchmark.h **** Output      : None.
 221:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 222:Include/benchmark.h **** ******************************************************************************/
 223:Include/benchmark.h **** cnt_t USR_DBG_I(cnt_t Int)
 224:Include/benchmark.h **** {
 126              		.loc 2 224 1
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 32
 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130 0000 00482DE9 		push	{fp, lr}
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 11, -8
 133              		.cfi_offset 14, -4
 134 0004 04B08DE2 		add	fp, sp, #4
 135              		.cfi_def_cfa 11, 4
 136 0008 20D04DE2 		sub	sp, sp, #32
 137 000c 20000BE5 		str	r0, [fp, #-32]
 225:Include/benchmark.h ****     cnt_t Num;
 226:Include/benchmark.h ****     cnt_t Abs;
 227:Include/benchmark.h ****     cnt_t Iter;
 228:Include/benchmark.h ****     cnt_t Count;
 229:Include/benchmark.h ****     cnt_t Div;
 230:Include/benchmark.h **** 
 231:Include/benchmark.h ****     /* Exit on zero */
 232:Include/benchmark.h ****     if(Int==0)
 138              		.loc 2 232 7
 139 0010 20301BE5 		ldr	r3, [fp, #-32]
 140 0014 000053E3 		cmp	r3, #0
 141 0018 0300001A 		bne	.L5
 233:Include/benchmark.h ****     {
 234:Include/benchmark.h **** 
 235:Include/benchmark.h **** 
 236:Include/benchmark.h ****         __USR_Putchar('0');
 142              		.loc 2 236 9
 143 001c 3000A0E3 		mov	r0, #48
 144 0020 FEFFFFEB 		bl	__USR_Putchar
 237:Include/benchmark.h ****         return 1;
 145              		.loc 2 237 16
 146 0024 0130A0E3 		mov	r3, #1
 147 0028 500000EA 		b	.L6
 148              	.L5:
 238:Include/benchmark.h ****     }
 239:Include/benchmark.h ****     else
 240:Include/benchmark.h ****     {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 8


 241:Include/benchmark.h **** 
 242:Include/benchmark.h ****         /* No action required */
 243:Include/benchmark.h ****     }
 244:Include/benchmark.h **** 
 245:Include/benchmark.h **** 
 246:Include/benchmark.h ****     /* Correct all negatives into positives */
 247:Include/benchmark.h ****     if(Int<0)
 149              		.loc 2 247 7
 150 002c 20301BE5 		ldr	r3, [fp, #-32]
 151 0030 000053E3 		cmp	r3, #0
 152 0034 070000AA 		bge	.L7
 248:Include/benchmark.h ****     {
 249:Include/benchmark.h **** 
 250:Include/benchmark.h **** 
 251:Include/benchmark.h ****         __USR_Putchar('-');
 153              		.loc 2 251 9
 154 0038 2D00A0E3 		mov	r0, #45
 155 003c FEFFFFEB 		bl	__USR_Putchar
 252:Include/benchmark.h ****         Abs=-Int;
 156              		.loc 2 252 12
 157 0040 20301BE5 		ldr	r3, [fp, #-32]
 158 0044 003063E2 		rsb	r3, r3, #0
 159 0048 0C300BE5 		str	r3, [fp, #-12]
 253:Include/benchmark.h ****         Num=1;
 160              		.loc 2 253 12
 161 004c 0130A0E3 		mov	r3, #1
 162 0050 08300BE5 		str	r3, [fp, #-8]
 163 0054 030000EA 		b	.L8
 164              	.L7:
 254:Include/benchmark.h ****     }
 255:Include/benchmark.h ****     else
 256:Include/benchmark.h ****     {
 257:Include/benchmark.h **** 
 258:Include/benchmark.h **** 
 259:Include/benchmark.h ****         Abs=Int;
 165              		.loc 2 259 12
 166 0058 20301BE5 		ldr	r3, [fp, #-32]
 167 005c 0C300BE5 		str	r3, [fp, #-12]
 260:Include/benchmark.h ****         Num=0;
 168              		.loc 2 260 12
 169 0060 0030A0E3 		mov	r3, #0
 170 0064 08300BE5 		str	r3, [fp, #-8]
 171              	.L8:
 261:Include/benchmark.h ****     }
 262:Include/benchmark.h **** 
 263:Include/benchmark.h ****     /* How many digits are there? */
 264:Include/benchmark.h ****     Count=0;
 172              		.loc 2 264 10
 173 0068 0030A0E3 		mov	r3, #0
 174 006c 14300BE5 		str	r3, [fp, #-20]
 265:Include/benchmark.h ****     Div=1;
 175              		.loc 2 265 8
 176 0070 0130A0E3 		mov	r3, #1
 177 0074 18300BE5 		str	r3, [fp, #-24]
 266:Include/benchmark.h ****     Iter=Abs;
 178              		.loc 2 266 9
 179 0078 0C301BE5 		ldr	r3, [fp, #-12]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 9


 180 007c 10300BE5 		str	r3, [fp, #-16]
 181              	.L12:
 267:Include/benchmark.h ****     while(1U)
 268:Include/benchmark.h ****     {
 269:Include/benchmark.h ****         Iter/=10;
 182              		.loc 2 269 13
 183 0080 10201BE5 		ldr	r2, [fp, #-16]
 184 0084 673606E3 		movw	r3, #26215
 185 0088 663646E3 		movt	r3, 26214
 186 008c 9312C3E0 		smull	r1, r3, r3, r2
 187 0090 4311A0E1 		asr	r1, r3, #2
 188 0094 C23FA0E1 		asr	r3, r2, #31
 189 0098 033041E0 		sub	r3, r1, r3
 190 009c 10300BE5 		str	r3, [fp, #-16]
 270:Include/benchmark.h ****         Count++;
 191              		.loc 2 270 14
 192 00a0 14301BE5 		ldr	r3, [fp, #-20]
 193 00a4 013083E2 		add	r3, r3, #1
 194 00a8 14300BE5 		str	r3, [fp, #-20]
 271:Include/benchmark.h ****         if(Iter!=0)
 195              		.loc 2 271 11
 196 00ac 10301BE5 		ldr	r3, [fp, #-16]
 197 00b0 000053E3 		cmp	r3, #0
 198 00b4 0600000A 		beq	.L15
 272:Include/benchmark.h ****         {
 273:Include/benchmark.h **** 
 274:Include/benchmark.h **** 
 275:Include/benchmark.h ****             Div*=10;
 199              		.loc 2 275 16
 200 00b8 18201BE5 		ldr	r2, [fp, #-24]
 201 00bc 0230A0E1 		mov	r3, r2
 202 00c0 0331A0E1 		lsl	r3, r3, #2
 203 00c4 023083E0 		add	r3, r3, r2
 204 00c8 8330A0E1 		lsl	r3, r3, #1
 205 00cc 18300BE5 		str	r3, [fp, #-24]
 269:Include/benchmark.h ****         Count++;
 206              		.loc 2 269 13
 207 00d0 EAFFFFEA 		b	.L12
 208              	.L15:
 276:Include/benchmark.h ****         }
 277:Include/benchmark.h ****         else
 278:Include/benchmark.h ****         {
 279:Include/benchmark.h **** 
 280:Include/benchmark.h **** 
 281:Include/benchmark.h ****             break;
 209              		.loc 2 281 13
 210 00d4 00F020E3 		nop
 282:Include/benchmark.h ****         }
 283:Include/benchmark.h ****     }
 284:Include/benchmark.h ****     Num+=Count;
 211              		.loc 2 284 8
 212 00d8 08201BE5 		ldr	r2, [fp, #-8]
 213 00dc 14301BE5 		ldr	r3, [fp, #-20]
 214 00e0 033082E0 		add	r3, r2, r3
 215 00e4 08300BE5 		str	r3, [fp, #-8]
 285:Include/benchmark.h **** 
 286:Include/benchmark.h ****     /* Print the integer */
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 10


 287:Include/benchmark.h ****     Iter=Abs;
 216              		.loc 2 287 9
 217 00e8 0C301BE5 		ldr	r3, [fp, #-12]
 218 00ec 10300BE5 		str	r3, [fp, #-16]
 288:Include/benchmark.h **** 
 289:Include/benchmark.h ****     while(Count>0)
 219              		.loc 2 289 10
 220 00f0 1A0000EA 		b	.L13
 221              	.L14:
 290:Include/benchmark.h ****     {
 291:Include/benchmark.h ****         Count--;
 222              		.loc 2 291 14
 223 00f4 14301BE5 		ldr	r3, [fp, #-20]
 224 00f8 013043E2 		sub	r3, r3, #1
 225 00fc 14300BE5 		str	r3, [fp, #-20]
 292:Include/benchmark.h ****         __USR_Putchar((s8)(Iter/Div)+'0');
 226              		.loc 2 292 32
 227 0100 18101BE5 		ldr	r1, [fp, #-24]
 228 0104 10001BE5 		ldr	r0, [fp, #-16]
 229 0108 FEFFFFEB 		bl	__aeabi_idiv
 230 010c 0030A0E1 		mov	r3, r0
 231              		.loc 2 292 23
 232 0110 7330EFE6 		uxtb	r3, r3
 233              		.loc 2 292 37
 234 0114 303083E2 		add	r3, r3, #48
 235 0118 7330EFE6 		uxtb	r3, r3
 236              		.loc 2 292 9
 237 011c 7330AFE6 		sxtb	r3, r3
 238 0120 0300A0E1 		mov	r0, r3
 239 0124 FEFFFFEB 		bl	__USR_Putchar
 293:Include/benchmark.h ****         Iter=Iter%Div;
 240              		.loc 2 293 13
 241 0128 10301BE5 		ldr	r3, [fp, #-16]
 242 012c 18101BE5 		ldr	r1, [fp, #-24]
 243 0130 0300A0E1 		mov	r0, r3
 244 0134 FEFFFFEB 		bl	__aeabi_idivmod
 245 0138 0130A0E1 		mov	r3, r1
 246 013c 10300BE5 		str	r3, [fp, #-16]
 294:Include/benchmark.h ****         Div/=10;
 247              		.loc 2 294 12
 248 0140 18201BE5 		ldr	r2, [fp, #-24]
 249 0144 673606E3 		movw	r3, #26215
 250 0148 663646E3 		movt	r3, 26214
 251 014c 9312C3E0 		smull	r1, r3, r3, r2
 252 0150 4311A0E1 		asr	r1, r3, #2
 253 0154 C23FA0E1 		asr	r3, r2, #31
 254 0158 033041E0 		sub	r3, r1, r3
 255 015c 18300BE5 		str	r3, [fp, #-24]
 256              	.L13:
 289:Include/benchmark.h ****     {
 257              		.loc 2 289 16
 258 0160 14301BE5 		ldr	r3, [fp, #-20]
 259 0164 000053E3 		cmp	r3, #0
 260 0168 E1FFFFCA 		bgt	.L14
 295:Include/benchmark.h ****     }
 296:Include/benchmark.h **** 
 297:Include/benchmark.h ****     return Num;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 11


 261              		.loc 2 297 12
 262 016c 08301BE5 		ldr	r3, [fp, #-8]
 263              	.L6:
 298:Include/benchmark.h **** }
 264              		.loc 2 298 1
 265 0170 0300A0E1 		mov	r0, r3
 266 0174 04D04BE2 		sub	sp, fp, #4
 267              		.cfi_def_cfa 13, 8
 268              		@ sp needed
 269 0178 0088BDE8 		pop	{fp, pc}
 270              		.cfi_endproc
 271              	.LFE1:
 273              		.section	.text.USR_DBG_H,"ax",%progbits
 274              		.align	2
 275              		.global	USR_DBG_H
 276              		.syntax unified
 277              		.arm
 279              	USR_DBG_H:
 280              	.LFB2:
 299:Include/benchmark.h **** /* End Function:USR_DBG_I ************************************************/
 300:Include/benchmark.h **** 
 301:Include/benchmark.h **** /* Function:USR_DBG_H *****************************************************
 302:Include/benchmark.h **** Description : Print a unsigned integer on the debugging console. This integer is
 303:Include/benchmark.h ****               printed as hexadecimal.
 304:Include/benchmark.h **** Input       : rme_ptr_t Uint - The unsigned integer to print.
 305:Include/benchmark.h **** Output      : None.
 306:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 307:Include/benchmark.h **** ******************************************************************************/
 308:Include/benchmark.h **** cnt_t USR_DBG_H(ptr_t Uint)
 309:Include/benchmark.h **** {
 281              		.loc 2 309 1
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 24
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285 0000 00482DE9 		push	{fp, lr}
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 11, -8
 288              		.cfi_offset 14, -4
 289 0004 04B08DE2 		add	fp, sp, #4
 290              		.cfi_def_cfa 11, 4
 291 0008 18D04DE2 		sub	sp, sp, #24
 292 000c 18000BE5 		str	r0, [fp, #-24]
 310:Include/benchmark.h ****     ptr_t Iter;
 311:Include/benchmark.h ****     ptr_t Count;
 312:Include/benchmark.h ****     ptr_t Num;
 313:Include/benchmark.h **** 
 314:Include/benchmark.h ****     /* Exit on zero */
 315:Include/benchmark.h ****     if(Uint==0U)
 293              		.loc 2 315 7
 294 0010 18301BE5 		ldr	r3, [fp, #-24]
 295 0014 000053E3 		cmp	r3, #0
 296 0018 0300001A 		bne	.L17
 316:Include/benchmark.h ****     {
 317:Include/benchmark.h ****         __USR_Putchar('0');
 297              		.loc 2 317 9
 298 001c 3000A0E3 		mov	r0, #48
 299 0020 FEFFFFEB 		bl	__USR_Putchar
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 12


 318:Include/benchmark.h ****         return 1;
 300              		.loc 2 318 16
 301 0024 0130A0E3 		mov	r3, #1
 302 0028 330000EA 		b	.L18
 303              	.L17:
 319:Include/benchmark.h ****     }
 320:Include/benchmark.h ****     else
 321:Include/benchmark.h ****     {
 322:Include/benchmark.h ****         /* No action required */
 323:Include/benchmark.h ****     }
 324:Include/benchmark.h **** 
 325:Include/benchmark.h ****     /* Filter out all the zeroes */
 326:Include/benchmark.h ****     Count=0U;
 304              		.loc 2 326 10
 305 002c 0030A0E3 		mov	r3, #0
 306 0030 0C300BE5 		str	r3, [fp, #-12]
 327:Include/benchmark.h ****     Iter=Uint;
 307              		.loc 2 327 9
 308 0034 18301BE5 		ldr	r3, [fp, #-24]
 309 0038 08300BE5 		str	r3, [fp, #-8]
 328:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 310              		.loc 2 328 10
 311 003c 050000EA 		b	.L19
 312              	.L20:
 329:Include/benchmark.h ****     {
 330:Include/benchmark.h ****         Iter<<=4;
 313              		.loc 2 330 13
 314 0040 08301BE5 		ldr	r3, [fp, #-8]
 315 0044 0332A0E1 		lsl	r3, r3, #4
 316 0048 08300BE5 		str	r3, [fp, #-8]
 331:Include/benchmark.h ****         Count++;
 317              		.loc 2 331 14
 318 004c 0C301BE5 		ldr	r3, [fp, #-12]
 319 0050 013083E2 		add	r3, r3, #1
 320 0054 0C300BE5 		str	r3, [fp, #-12]
 321              	.L19:
 328:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 322              		.loc 2 328 16
 323 0058 08301BE5 		ldr	r3, [fp, #-8]
 324 005c 233EA0E1 		lsr	r3, r3, #28
 328:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 325              		.loc 2 328 36
 326 0060 000053E3 		cmp	r3, #0
 327 0064 F5FFFF0A 		beq	.L20
 332:Include/benchmark.h ****     }
 333:Include/benchmark.h **** 
 334:Include/benchmark.h ****     /* Count is the number of pts to print */
 335:Include/benchmark.h ****     Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
 328              		.loc 2 335 10
 329 0068 0C301BE5 		ldr	r3, [fp, #-12]
 330 006c 083063E2 		rsb	r3, r3, #8
 331 0070 0C300BE5 		str	r3, [fp, #-12]
 336:Include/benchmark.h ****     Num=Count;
 332              		.loc 2 336 8
 333 0074 0C301BE5 		ldr	r3, [fp, #-12]
 334 0078 10300BE5 		str	r3, [fp, #-16]
 337:Include/benchmark.h ****     while(Count>0U)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 13


 335              		.loc 2 337 10
 336 007c 1A0000EA 		b	.L21
 337              	.L23:
 338:Include/benchmark.h ****     {
 339:Include/benchmark.h ****         Count--;
 338              		.loc 2 339 14
 339 0080 0C301BE5 		ldr	r3, [fp, #-12]
 340 0084 013043E2 		sub	r3, r3, #1
 341 0088 0C300BE5 		str	r3, [fp, #-12]
 340:Include/benchmark.h ****         Iter=(Uint>>(Count<<2U))&0x0FU;
 342              		.loc 2 340 27
 343 008c 0C301BE5 		ldr	r3, [fp, #-12]
 344 0090 0331A0E1 		lsl	r3, r3, #2
 345              		.loc 2 340 19
 346 0094 18201BE5 		ldr	r2, [fp, #-24]
 347 0098 3233A0E1 		lsr	r3, r2, r3
 348              		.loc 2 340 13
 349 009c 0F3003E2 		and	r3, r3, #15
 350 00a0 08300BE5 		str	r3, [fp, #-8]
 341:Include/benchmark.h ****         if(Iter<10U)
 351              		.loc 2 341 11
 352 00a4 08301BE5 		ldr	r3, [fp, #-8]
 353 00a8 090053E3 		cmp	r3, #9
 354 00ac 0700008A 		bhi	.L22
 342:Include/benchmark.h ****         {
 343:Include/benchmark.h **** 
 344:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'0');
 355              		.loc 2 344 27
 356 00b0 08301BE5 		ldr	r3, [fp, #-8]
 357 00b4 7330EFE6 		uxtb	r3, r3
 358              		.loc 2 344 35
 359 00b8 303083E2 		add	r3, r3, #48
 360 00bc 7330EFE6 		uxtb	r3, r3
 361              		.loc 2 344 13
 362 00c0 7330AFE6 		sxtb	r3, r3
 363 00c4 0300A0E1 		mov	r0, r3
 364 00c8 FEFFFFEB 		bl	__USR_Putchar
 365 00cc 060000EA 		b	.L21
 366              	.L22:
 345:Include/benchmark.h ****         }
 346:Include/benchmark.h ****         else
 347:Include/benchmark.h ****         {
 348:Include/benchmark.h **** 
 349:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'A'-10);
 367              		.loc 2 349 27
 368 00d0 08301BE5 		ldr	r3, [fp, #-8]
 369 00d4 7330EFE6 		uxtb	r3, r3
 370              		.loc 2 349 39
 371 00d8 373083E2 		add	r3, r3, #55
 372 00dc 7330EFE6 		uxtb	r3, r3
 373              		.loc 2 349 13
 374 00e0 7330AFE6 		sxtb	r3, r3
 375 00e4 0300A0E1 		mov	r0, r3
 376 00e8 FEFFFFEB 		bl	__USR_Putchar
 377              	.L21:
 337:Include/benchmark.h ****     {
 378              		.loc 2 337 16
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 14


 379 00ec 0C301BE5 		ldr	r3, [fp, #-12]
 380 00f0 000053E3 		cmp	r3, #0
 381 00f4 E1FFFF1A 		bne	.L23
 350:Include/benchmark.h ****         }
 351:Include/benchmark.h ****     }
 352:Include/benchmark.h **** 
 353:Include/benchmark.h ****     return (cnt_t)Num;
 382              		.loc 2 353 12
 383 00f8 10301BE5 		ldr	r3, [fp, #-16]
 384              	.L18:
 354:Include/benchmark.h **** }
 385              		.loc 2 354 1
 386 00fc 0300A0E1 		mov	r0, r3
 387 0100 04D04BE2 		sub	sp, fp, #4
 388              		.cfi_def_cfa 13, 8
 389              		@ sp needed
 390 0104 0088BDE8 		pop	{fp, pc}
 391              		.cfi_endproc
 392              	.LFE2:
 394              		.section	.text.USR_DBG_S,"ax",%progbits
 395              		.align	2
 396              		.global	USR_DBG_S
 397              		.syntax unified
 398              		.arm
 400              	USR_DBG_S:
 401              	.LFB3:
 355:Include/benchmark.h **** /* End Function:USR_DBG_H ************************************************/
 356:Include/benchmark.h **** cnt_t USR_DBG_S(const s8* String)
 357:Include/benchmark.h **** {
 402              		.loc 2 357 1
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 16
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 00482DE9 		push	{fp, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 11, -8
 409              		.cfi_offset 14, -4
 410 0004 04B08DE2 		add	fp, sp, #4
 411              		.cfi_def_cfa 11, 4
 412 0008 10D04DE2 		sub	sp, sp, #16
 413 000c 10000BE5 		str	r0, [fp, #-16]
 358:Include/benchmark.h ****     ptr_t Count;
 359:Include/benchmark.h **** 
 360:Include/benchmark.h ****     for(Count=0U;Count<255;Count++)
 414              		.loc 2 360 14
 415 0010 0030A0E3 		mov	r3, #0
 416 0014 08300BE5 		str	r3, [fp, #-8]
 417              		.loc 2 360 5
 418 0018 0E0000EA 		b	.L25
 419              	.L28:
 361:Include/benchmark.h ****     {
 362:Include/benchmark.h ****         if(String[Count]==(s8)'\0')
 420              		.loc 2 362 18
 421 001c 10201BE5 		ldr	r2, [fp, #-16]
 422 0020 08301BE5 		ldr	r3, [fp, #-8]
 423 0024 033082E0 		add	r3, r2, r3
 424 0028 D030D3E1 		ldrsb	r3, [r3]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 15


 425              		.loc 2 362 11
 426 002c 000053E3 		cmp	r3, #0
 427 0030 0C00000A 		beq	.L30
 363:Include/benchmark.h ****         {
 364:Include/benchmark.h **** 
 365:Include/benchmark.h ****             break;
 366:Include/benchmark.h ****         }
 367:Include/benchmark.h ****         else
 368:Include/benchmark.h ****         {
 369:Include/benchmark.h ****             /* No action required */
 370:Include/benchmark.h ****         }
 371:Include/benchmark.h **** 
 372:Include/benchmark.h ****         __USR_Putchar(String[Count]);
 428              		.loc 2 372 29
 429 0034 10201BE5 		ldr	r2, [fp, #-16]
 430 0038 08301BE5 		ldr	r3, [fp, #-8]
 431 003c 033082E0 		add	r3, r2, r3
 432              		.loc 2 372 9
 433 0040 D030D3E1 		ldrsb	r3, [r3]
 434 0044 0300A0E1 		mov	r0, r3
 435 0048 FEFFFFEB 		bl	__USR_Putchar
 360:Include/benchmark.h ****     {
 436              		.loc 2 360 33 discriminator 2
 437 004c 08301BE5 		ldr	r3, [fp, #-8]
 438 0050 013083E2 		add	r3, r3, #1
 439 0054 08300BE5 		str	r3, [fp, #-8]
 440              	.L25:
 360:Include/benchmark.h ****     {
 441              		.loc 2 360 23 discriminator 1
 442 0058 08301BE5 		ldr	r3, [fp, #-8]
 443 005c FE0053E3 		cmp	r3, #254
 444 0060 EDFFFF9A 		bls	.L28
 445 0064 000000EA 		b	.L27
 446              	.L30:
 365:Include/benchmark.h ****         }
 447              		.loc 2 365 13
 448 0068 00F020E3 		nop
 449              	.L27:
 373:Include/benchmark.h ****     }
 374:Include/benchmark.h **** 
 375:Include/benchmark.h ****     return (cnt_t)Count;
 450              		.loc 2 375 12
 451 006c 08301BE5 		ldr	r3, [fp, #-8]
 376:Include/benchmark.h **** }
 452              		.loc 2 376 1
 453 0070 0300A0E1 		mov	r0, r3
 454 0074 04D04BE2 		sub	sp, fp, #4
 455              		.cfi_def_cfa 13, 8
 456              		@ sp needed
 457 0078 0088BDE8 		pop	{fp, pc}
 458              		.cfi_endproc
 459              	.LFE3:
 461              		.section	.text.get_time,"ax",%progbits
 462              		.align	2
 463              		.global	get_time
 464              		.syntax unified
 465              		.arm
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 16


 467              	get_time:
 468              	.LFB4:
 377:Include/benchmark.h **** 
 378:Include/benchmark.h **** /* get current time */
 379:Include/benchmark.h **** ptr_t get_time(void)
 380:Include/benchmark.h **** {
 469              		.loc 2 380 1
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 8
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474 0000 04B02DE5 		str	fp, [sp, #-4]!
 475              		.cfi_def_cfa_offset 4
 476              		.cfi_offset 11, -4
 477 0004 00B08DE2 		add	fp, sp, #0
 478              		.cfi_def_cfa_register 11
 479 0008 0CD04DE2 		sub	sp, sp, #12
 381:Include/benchmark.h **** 	ptr_t temp;
 382:Include/benchmark.h **** 	temp=RME_A7A_REG(&RME_A7A_GTWD_GTCR0);
 480              		.loc 2 382 7
 481 000c 023CA0E3 		mov	r3, #512
 482 0010 F0384FE3 		movt	r3, 63728
 483              		.loc 2 382 6
 484 0014 003093E5 		ldr	r3, [r3]
 485 0018 08300BE5 		str	r3, [fp, #-8]
 383:Include/benchmark.h **** 	return temp;
 486              		.loc 2 383 9
 487 001c 08301BE5 		ldr	r3, [fp, #-8]
 384:Include/benchmark.h ****     /*USR_DBG_S("\r\n time=");
 385:Include/benchmark.h **** 	double time =(double)temp/RME_A7A_SYSTICK_VAL;
 386:Include/benchmark.h **** 	time =time*1000;
 387:Include/benchmark.h ****     USR_DBG_I(time);
 388:Include/benchmark.h ****     USR_DBG_S(" ms");*/
 389:Include/benchmark.h **** }
 488              		.loc 2 389 1
 489 0020 0300A0E1 		mov	r0, r3
 490 0024 00D08BE2 		add	sp, fp, #0
 491              		.cfi_def_cfa_register 13
 492              		@ sp needed
 493 0028 04B09DE4 		ldr	fp, [sp], #4
 494              		.cfi_restore 11
 495              		.cfi_def_cfa_offset 0
 496 002c 1EFF2FE1 		bx	lr
 497              		.cfi_endproc
 498              	.LFE4:
 500              		.section	.text.RME_Thd_Crt,"ax",%progbits
 501              		.align	2
 502              		.global	RME_Thd_Crt
 503              		.syntax unified
 504              		.arm
 506              	RME_Thd_Crt:
 507              	.LFB5:
 390:Include/benchmark.h **** 
 391:Include/benchmark.h **** 
 392:Include/benchmark.h **** /* Function:RME_Thd_Crt *******************************************************
 393:Include/benchmark.h **** Description : Create a thread. A thread is the minimal kernel-level execution
 394:Include/benchmark.h ****               unit.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 17


 395:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table.
 396:Include/benchmark.h ****                                   2-Level.
 397:Include/benchmark.h ****               RME_cid_t Cap_Kom - The kernel memory capability.
 398:Include/benchmark.h ****                                   2-Level.
 399:Include/benchmark.h ****               RME_cid_t Cap_Thd - The capability slot that you want this newly
 400:Include/benchmark.h ****                                   created thread capability to be in.
 401:Include/benchmark.h ****                                   1-Level.
 402:Include/benchmark.h ****               RME_cid_t Cap_Prc - The capability to the process that it is in.
 403:Include/benchmark.h ****                                   2-Level.
 404:Include/benchmark.h ****               RME_ptr_t Prio_Max - The maximum priority allowed for this
 405:Include/benchmark.h ****                                    thread. Once set, this cannot be changed.
 406:Include/benchmark.h ****               RME_ptr_t Raddr - The relative virtual address to store the
 407:Include/benchmark.h ****                                 thread kernel object.
 408:Include/benchmark.h ****               RME_ptr_t Attr - The context attributes.
 409:Include/benchmark.h **** Output      : None.
 410:Include/benchmark.h **** Return      : RME_ret_t - If successful, the Thread ID; or an error code.
 411:Include/benchmark.h **** ******************************************************************************/
 412:Include/benchmark.h **** ret_t RME_Thd_Crt(cid_t Cap_Cpt,
 413:Include/benchmark.h ****                       cid_t Cap_Kom,
 414:Include/benchmark.h ****                       cid_t Cap_Thd,
 415:Include/benchmark.h ****                       cid_t Cap_Prc,
 416:Include/benchmark.h ****                       ptr_t Prio_Max,
 417:Include/benchmark.h ****                       ptr_t Raddr,
 418:Include/benchmark.h ****                       ptr_t Attr)
 419:Include/benchmark.h **** {
 508              		.loc 2 419 1
 509              		.cfi_startproc
 510              		@ args = 12, pretend = 0, frame = 16
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512 0000 00482DE9 		push	{fp, lr}
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 11, -8
 515              		.cfi_offset 14, -4
 516 0004 04B08DE2 		add	fp, sp, #4
 517              		.cfi_def_cfa 11, 4
 518 0008 10D04DE2 		sub	sp, sp, #16
 519 000c 08000BE5 		str	r0, [fp, #-8]
 520 0010 0C100BE5 		str	r1, [fp, #-12]
 521 0014 10200BE5 		str	r2, [fp, #-16]
 522 0018 14300BE5 		str	r3, [fp, #-20]
 420:Include/benchmark.h ****     return RME_SVC(RME_THD_SVC(Attr,0U,RME_SVC_THD_CRT),
 523              		.loc 2 420 12
 524 001c 0C309BE5 		ldr	r3, [fp, #12]
 525 0020 832BA0E1 		lsl	r2, r3, #23
 526 0024 08301BE5 		ldr	r3, [fp, #-8]
 527 0028 033082E1 		orr	r3, r2, r3
 528 002c 190883E3 		orr	r0, r3, #1638400
 529 0030 0C301BE5 		ldr	r3, [fp, #-12]
 530 0034 0328A0E1 		lsl	r2, r3, #16
 531 0038 10301BE5 		ldr	r3, [fp, #-16]
 532 003c 7330FFE6 		uxth	r3, r3
 533 0040 031082E1 		orr	r1, r2, r3
 534 0044 14301BE5 		ldr	r3, [fp, #-20]
 535 0048 0328A0E1 		lsl	r2, r3, #16
 536 004c 04309BE5 		ldr	r3, [fp, #4]
 537 0050 7330FFE6 		uxth	r3, r3
 538 0054 032082E1 		orr	r2, r2, r3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 18


 539 0058 08309BE5 		ldr	r3, [fp, #8]
 540 005c FEFFFFEB 		bl	RME_Svc
 541 0060 0030A0E1 		mov	r3, r0
 421:Include/benchmark.h ****                    Cap_Cpt,
 422:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Kom)|RME_PARAM_D0(Cap_Thd),
 423:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Prc)|RME_PARAM_D0(Prio_Max),
 424:Include/benchmark.h ****                    Raddr);
 425:Include/benchmark.h **** }
 542              		.loc 2 425 1
 543 0064 0300A0E1 		mov	r0, r3
 544 0068 04D04BE2 		sub	sp, fp, #4
 545              		.cfi_def_cfa 13, 8
 546              		@ sp needed
 547 006c 0088BDE8 		pop	{fp, pc}
 548              		.cfi_endproc
 549              	.LFE5:
 551              		.section	.text.RME_Thd_Exec_Set,"ax",%progbits
 552              		.align	2
 553              		.global	RME_Thd_Exec_Set
 554              		.syntax unified
 555              		.arm
 557              	RME_Thd_Exec_Set:
 558              	.LFB6:
 426:Include/benchmark.h **** /* End Function:RME_Thd_Crt **************************************************/
 427:Include/benchmark.h **** 
 428:Include/benchmark.h **** /* Function:RME_Thd_Exec_Set **************************************************
 429:Include/benchmark.h **** Description : Set a thread's entry point and stack. The registers will be
 430:Include/benchmark.h ****               initialized with these contents.
 431:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 432:Include/benchmark.h ****                                   2-Level.
 433:Include/benchmark.h ****               void* Entry - The entry address of the thread.
 434:Include/benchmark.h ****               void* Stack - The stack address to use for execution.
 435:Include/benchmark.h ****               void* Param - The parameter to pass to the thread.
 436:Include/benchmark.h **** Output      : None.
 437:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 438:Include/benchmark.h **** ******************************************************************************/
 439:Include/benchmark.h **** ret_t RME_Thd_Exec_Set(cid_t Cap_Thd,
 440:Include/benchmark.h ****                            ptr_t Entry,
 441:Include/benchmark.h ****                            ptr_t Stack,
 442:Include/benchmark.h ****                            ptr_t Param)
 443:Include/benchmark.h **** {
 559              		.loc 2 443 1
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 16
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 00482DE9 		push	{fp, lr}
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 11, -8
 566              		.cfi_offset 14, -4
 567 0004 04B08DE2 		add	fp, sp, #4
 568              		.cfi_def_cfa 11, 4
 569 0008 10D04DE2 		sub	sp, sp, #16
 570 000c 08000BE5 		str	r0, [fp, #-8]
 571 0010 0C100BE5 		str	r1, [fp, #-12]
 572 0014 10200BE5 		str	r2, [fp, #-16]
 573 0018 14300BE5 		str	r3, [fp, #-20]
 444:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_EXEC_SET,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 19


 574              		.loc 2 444 12
 575 001c 08301BE5 		ldr	r3, [fp, #-8]
 576 0020 060883E3 		orr	r0, r3, #393216
 577 0024 14301BE5 		ldr	r3, [fp, #-20]
 578 0028 10201BE5 		ldr	r2, [fp, #-16]
 579 002c 0C101BE5 		ldr	r1, [fp, #-12]
 580 0030 FEFFFFEB 		bl	RME_Svc
 581 0034 0030A0E1 		mov	r3, r0
 445:Include/benchmark.h ****                    Cap_Thd,
 446:Include/benchmark.h ****                    (ptr_t)Entry,
 447:Include/benchmark.h ****                    (ptr_t)Stack,
 448:Include/benchmark.h ****                    (ptr_t)Param);
 449:Include/benchmark.h **** }
 582              		.loc 2 449 1
 583 0038 0300A0E1 		mov	r0, r3
 584 003c 04D04BE2 		sub	sp, fp, #4
 585              		.cfi_def_cfa 13, 8
 586              		@ sp needed
 587 0040 0088BDE8 		pop	{fp, pc}
 588              		.cfi_endproc
 589              	.LFE6:
 591              		.section	.text.RME_Thd_Time_Xfer,"ax",%progbits
 592              		.align	2
 593              		.global	RME_Thd_Time_Xfer
 594              		.syntax unified
 595              		.arm
 597              	RME_Thd_Time_Xfer:
 598              	.LFB7:
 450:Include/benchmark.h **** /* End Function:RME_Thd_Exec_Set *********************************************/
 451:Include/benchmark.h **** 
 452:Include/benchmark.h **** /* Function:RME_Thd_Time_Xfer *************************************************
 453:Include/benchmark.h **** Description : Transfer time from one thread to another. This can only be called
 454:Include/benchmark.h ****               from the core that the thread is on, and the the two threads
 455:Include/benchmark.h ****               involved in the time transfer must be on the same core.
 456:Include/benchmark.h ****               If the time transfered is more than or equal to what the source
 457:Include/benchmark.h ****               have, the source will be out of time or blocked. If the source is
 458:Include/benchmark.h ****               both out of time and blocked, we do not send the notification;
 459:Include/benchmark.h ****               Instead, we send the notification when the receive endpoint
 460:Include/benchmark.h ****               actually receive something.
 461:Include/benchmark.h ****               It is possible to transfer time to threads have a lower priority,
 462:Include/benchmark.h ****               and it is also possible to transfer time to threads that have a
 463:Include/benchmark.h ****               higher priority. In the latter case, and if the source is
 464:Include/benchmark.h ****               currently running, a preemption will occur.
 465:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd_Dst - The destination thread.
 466:Include/benchmark.h ****                                       2-Level.
 467:Include/benchmark.h ****               RME_cid_t Cap_Thd_Src - The source thread.
 468:Include/benchmark.h ****                                       2-Level.
 469:Include/benchmark.h ****               RME_ptr_t Time - The time to transfer, in slices. A slice is the
 470:Include/benchmark.h ****                                minimal amount of time transfered in the system
 471:Include/benchmark.h ****                                usually on the order of 100us or 1ms.
 472:Include/benchmark.h ****                                Use RME_THD_INIT_TIME for revoking transfer.
 473:Include/benchmark.h ****                                Use RME_THD_INF_TIME for infinite trasnfer.
 474:Include/benchmark.h **** Output      : None.
 475:Include/benchmark.h **** Return      : RME_ret_t - If successful, the destination time amount; or an
 476:Include/benchmark.h ****                           error code.
 477:Include/benchmark.h **** ******************************************************************************/
 478:Include/benchmark.h **** ret_t RME_Thd_Time_Xfer(cid_t Cap_Thd_Dst,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 20


 479:Include/benchmark.h ****                         cid_t Cap_Thd_Src,
 480:Include/benchmark.h ****                         ptr_t Time)
 481:Include/benchmark.h **** {
 599              		.loc 2 481 1
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 16
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603 0000 00482DE9 		push	{fp, lr}
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 11, -8
 606              		.cfi_offset 14, -4
 607 0004 04B08DE2 		add	fp, sp, #4
 608              		.cfi_def_cfa 11, 4
 609 0008 10D04DE2 		sub	sp, sp, #16
 610 000c 08000BE5 		str	r0, [fp, #-8]
 611 0010 0C100BE5 		str	r1, [fp, #-12]
 612 0014 10200BE5 		str	r2, [fp, #-16]
 482:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_TIME_XFER,
 613              		.loc 2 482 12
 614 0018 08101BE5 		ldr	r1, [fp, #-8]
 615 001c 0C201BE5 		ldr	r2, [fp, #-12]
 616 0020 10301BE5 		ldr	r3, [fp, #-16]
 617 0024 0207A0E3 		mov	r0, #524288
 618 0028 FEFFFFEB 		bl	RME_Svc
 619 002c 0030A0E1 		mov	r3, r0
 483:Include/benchmark.h ****                    0U,
 484:Include/benchmark.h ****                    Cap_Thd_Dst,
 485:Include/benchmark.h ****                    Cap_Thd_Src,
 486:Include/benchmark.h ****                    Time);
 487:Include/benchmark.h **** }
 620              		.loc 2 487 1
 621 0030 0300A0E1 		mov	r0, r3
 622 0034 04D04BE2 		sub	sp, fp, #4
 623              		.cfi_def_cfa 13, 8
 624              		@ sp needed
 625 0038 0088BDE8 		pop	{fp, pc}
 626              		.cfi_endproc
 627              	.LFE7:
 629              		.section	.text.RME_Thd_Sched_Bind,"ax",%progbits
 630              		.align	2
 631              		.global	RME_Thd_Sched_Bind
 632              		.syntax unified
 633              		.arm
 635              	RME_Thd_Sched_Bind:
 636              	.LFB8:
 488:Include/benchmark.h **** /* End Function:RME_Thd_Time_Xfer ********************************************/
 489:Include/benchmark.h **** 
 490:Include/benchmark.h **** 
 491:Include/benchmark.h **** /* Function:RME_Thd_Sched_Bind ************************************************
 492:Include/benchmark.h **** Description : Set a thread's priority level, and its scheduler thread. When
 493:Include/benchmark.h ****               there are any state changes on this thread, a notification will
 494:Include/benchmark.h ****               be sent to its scheduler thread. If the state of the thread
 495:Include/benchmark.h ****               changes for multiple times, then only the most recent state will
 496:Include/benchmark.h ****               be reflected in the scheduler's receive queue.
 497:Include/benchmark.h ****               The scheduler and the threads that it schedule must be on the
 498:Include/benchmark.h ****               same core. When a thread wants to go from one core to another,
 499:Include/benchmark.h ****               its notification to the scheduler must all be processed, and it
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 21


 500:Include/benchmark.h ****               must have no scheduler notifications in itself.
 501:Include/benchmark.h ****               This must be called on the same core with the Cap_Thd_Sched, and
 502:Include/benchmark.h ****               the Cap_Thd itself must be free.
 503:Include/benchmark.h ****               It is impossible to set a thread's priority beyond its maximum
 504:Include/benchmark.h ****               priority.
 505:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 506:Include/benchmark.h ****                                   2-Level.
 507:Include/benchmark.h ****               RME_cid_t Cap_Thd_Sched - The scheduler thread.
 508:Include/benchmark.h ****                                         2-Level.
 509:Include/benchmark.h ****               RME_cid_t Cap_Sig - The signal endpoint for scheduler
 510:Include/benchmark.h ****                                   notifications. This signal endpoint will be
 511:Include/benchmark.h ****                                   sent to whenever this thread has a fault, or
 512:Include/benchmark.h ****                                   timeouts. This is purely optional; if it is
 513:Include/benchmark.h ****                                   not needed, pass in RME_CID_NULL.
 514:Include/benchmark.h ****               RME_tid_t TID - The thread ID. This is user-supplied, and the
 515:Include/benchmark.h ****                               kernel will not check whether there are two
 516:Include/benchmark.h ****                               threads that have the same TID.
 517:Include/benchmark.h ****               RME_ptr_t Prio - The priority level, higher is more critical.
 518:Include/benchmark.h ****               rme_ptr_t Haddr - The kernel-accessible virtual memory address
 519:Include/benchmark.h ****                                 for this thread's register sets, only used by
 520:Include/benchmark.h ****                                 hypervisor-managed threads. For other threads,
 521:Include/benchmark.h ****                                 please pass in NULL instead.
 522:Include/benchmark.h **** 
 523:Include/benchmark.h **** Output      : None.
 524:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 525:Include/benchmark.h **** ******************************************************************************/
 526:Include/benchmark.h **** ret_t RME_Thd_Sched_Bind(cid_t Cap_Thd,
 527:Include/benchmark.h ****                          cid_t Cap_Thd_Sched,
 528:Include/benchmark.h ****                          cid_t Cap_Sig,
 529:Include/benchmark.h ****                          tid_t TID,
 530:Include/benchmark.h ****                          ptr_t Prio,
 531:Include/benchmark.h ****                          ptr_t Haddr)
 532:Include/benchmark.h **** {
 637              		.loc 2 532 1
 638              		.cfi_startproc
 639              		@ args = 8, pretend = 0, frame = 16
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641 0000 00482DE9 		push	{fp, lr}
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 11, -8
 644              		.cfi_offset 14, -4
 645 0004 04B08DE2 		add	fp, sp, #4
 646              		.cfi_def_cfa 11, 4
 647 0008 10D04DE2 		sub	sp, sp, #16
 648 000c 08000BE5 		str	r0, [fp, #-8]
 649 0010 0C100BE5 		str	r1, [fp, #-12]
 650 0014 10200BE5 		str	r2, [fp, #-16]
 651 0018 14300BE5 		str	r3, [fp, #-20]
 533:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SCHED_BIND,
 652              		.loc 2 533 12
 653 001c 08301BE5 		ldr	r3, [fp, #-8]
 654 0020 1B0883E3 		orr	r0, r3, #1769472
 655 0024 0C301BE5 		ldr	r3, [fp, #-12]
 656 0028 0328A0E1 		lsl	r2, r3, #16
 657 002c 10301BE5 		ldr	r3, [fp, #-16]
 658 0030 7330FFE6 		uxth	r3, r3
 659 0034 031082E1 		orr	r1, r2, r3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 22


 660 0038 14301BE5 		ldr	r3, [fp, #-20]
 661 003c 0328A0E1 		lsl	r2, r3, #16
 662 0040 04309BE5 		ldr	r3, [fp, #4]
 663 0044 7330FFE6 		uxth	r3, r3
 664 0048 032082E1 		orr	r2, r2, r3
 665 004c 08309BE5 		ldr	r3, [fp, #8]
 666 0050 FEFFFFEB 		bl	RME_Svc
 667 0054 0030A0E1 		mov	r3, r0
 534:Include/benchmark.h ****                    Cap_Thd,
 535:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Thd_Sched)|RME_PARAM_D0(Cap_Sig),
 536:Include/benchmark.h ****                    RME_PARAM_D1(TID)|RME_PARAM_D0(Prio),
 537:Include/benchmark.h ****                    Haddr);
 538:Include/benchmark.h **** }
 668              		.loc 2 538 1
 669 0058 0300A0E1 		mov	r0, r3
 670 005c 04D04BE2 		sub	sp, fp, #4
 671              		.cfi_def_cfa 13, 8
 672              		@ sp needed
 673 0060 0088BDE8 		pop	{fp, pc}
 674              		.cfi_endproc
 675              	.LFE8:
 677              		.section	.text.RME_Thd_Swt,"ax",%progbits
 678              		.align	2
 679              		.global	RME_Thd_Swt
 680              		.syntax unified
 681              		.arm
 683              	RME_Thd_Swt:
 684              	.LFB9:
 539:Include/benchmark.h **** /* End Function:RME_Thd_Sched_Bind *******************************************/
 540:Include/benchmark.h **** 
 541:Include/benchmark.h **** 
 542:Include/benchmark.h **** /* Function:RME_Thd_Swt *******************************************************
 543:Include/benchmark.h **** Description : Switch to another thread. The thread to switch to must have the
 544:Include/benchmark.h ****               same preemptive priority as this thread, and have time, and not
 545:Include/benchmark.h ****               blocked.
 546:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread. If this is -1,
 547:Include/benchmark.h ****                                   the kernel will pickup whatever thread that
 548:Include/benchmark.h ****                                   has the highest priority and time to run.
 549:Include/benchmark.h ****                                   2-Level.
 550:Include/benchmark.h ****               RME_ptr_t Is_Yield - This is a flag to indicate whether this
 551:Include/benchmark.h ****                                    is a full yield. If it is, the kernel will
 552:Include/benchmark.h ****                                    discard all the time alloted on this
 553:Include/benchmark.h ****                                    thread.
 554:Include/benchmark.h **** Output      : None.
 555:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 556:Include/benchmark.h **** ******************************************************************************/
 557:Include/benchmark.h **** ret_t RME_Thd_Swt(cid_t Cap_Thd,
 558:Include/benchmark.h ****                   ptr_t Is_Yield)
 559:Include/benchmark.h **** {
 685              		.loc 2 559 1
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 0000 00482DE9 		push	{fp, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 11, -8
 692              		.cfi_offset 14, -4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 23


 693 0004 04B08DE2 		add	fp, sp, #4
 694              		.cfi_def_cfa 11, 4
 695 0008 08D04DE2 		sub	sp, sp, #8
 696 000c 08000BE5 		str	r0, [fp, #-8]
 697 0010 0C100BE5 		str	r1, [fp, #-12]
 560:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SWT,
 698              		.loc 2 560 12
 699 0014 08101BE5 		ldr	r1, [fp, #-8]
 700 0018 0030A0E3 		mov	r3, #0
 701 001c 0C201BE5 		ldr	r2, [fp, #-12]
 702 0020 0908A0E3 		mov	r0, #589824
 703 0024 FEFFFFEB 		bl	RME_Svc
 704 0028 0030A0E1 		mov	r3, r0
 561:Include/benchmark.h ****                    0U,
 562:Include/benchmark.h ****                    Cap_Thd,
 563:Include/benchmark.h ****                    Is_Yield,
 564:Include/benchmark.h ****                    0U);
 565:Include/benchmark.h **** }
 705              		.loc 2 565 1
 706 002c 0300A0E1 		mov	r0, r3
 707 0030 04D04BE2 		sub	sp, fp, #4
 708              		.cfi_def_cfa 13, 8
 709              		@ sp needed
 710 0034 0088BDE8 		pop	{fp, pc}
 711              		.cfi_endproc
 712              	.LFE9:
 714              		.section	.text.RME_Sig_Crt,"ax",%progbits
 715              		.align	2
 716              		.global	RME_Sig_Crt
 717              		.syntax unified
 718              		.arm
 720              	RME_Sig_Crt:
 721              	.LFB10:
 566:Include/benchmark.h **** /* End Function:RME_Thd_Swt **************************************************/
 567:Include/benchmark.h **** /*asynchronous communication function*/
 568:Include/benchmark.h **** /* Function:RME_Sig_Crt *******************************************************
 569:Include/benchmark.h **** Description : Create a signal endpoint.
 570:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to use
 571:Include/benchmark.h ****                                   for this signal.
 572:Include/benchmark.h ****                                   2-Level.
 573:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability slot that you want this newly
 574:Include/benchmark.h ****                                   created signal capability to be in.
 575:Include/benchmark.h ****                                   1-Level.
 576:Include/benchmark.h **** Output      : None.
 577:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 578:Include/benchmark.h **** ******************************************************************************/
 579:Include/benchmark.h **** ret_t RME_Sig_Crt(cid_t Cap_Cpt,
 580:Include/benchmark.h ****                   cid_t Cap_Sig)
 581:Include/benchmark.h **** {
 722              		.loc 2 581 1
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726 0000 00482DE9 		push	{fp, lr}
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 24


 730 0004 04B08DE2 		add	fp, sp, #4
 731              		.cfi_def_cfa 11, 4
 732 0008 08D04DE2 		sub	sp, sp, #8
 733 000c 08000BE5 		str	r0, [fp, #-8]
 734 0010 0C100BE5 		str	r1, [fp, #-12]
 582:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_CRT,
 735              		.loc 2 582 12
 736 0014 08301BE5 		ldr	r3, [fp, #-8]
 737 0018 1D0883E3 		orr	r0, r3, #1900544
 738 001c 0C101BE5 		ldr	r1, [fp, #-12]
 739 0020 0030A0E3 		mov	r3, #0
 740 0024 0020A0E3 		mov	r2, #0
 741 0028 FEFFFFEB 		bl	RME_Svc
 742 002c 0030A0E1 		mov	r3, r0
 583:Include/benchmark.h ****                    Cap_Cpt,
 584:Include/benchmark.h ****                    Cap_Sig,
 585:Include/benchmark.h ****                    0U,
 586:Include/benchmark.h ****                    0U);
 587:Include/benchmark.h **** }
 743              		.loc 2 587 1
 744 0030 0300A0E1 		mov	r0, r3
 745 0034 04D04BE2 		sub	sp, fp, #4
 746              		.cfi_def_cfa 13, 8
 747              		@ sp needed
 748 0038 0088BDE8 		pop	{fp, pc}
 749              		.cfi_endproc
 750              	.LFE10:
 752              		.section	.text.RME_Sig_Del,"ax",%progbits
 753              		.align	2
 754              		.global	RME_Sig_Del
 755              		.syntax unified
 756              		.arm
 758              	RME_Sig_Del:
 759              	.LFB11:
 588:Include/benchmark.h **** /* End Function:RME_Sig_Crt **************************************************/
 589:Include/benchmark.h **** /* Function:RME_Sig_Del *******************************************************
 590:Include/benchmark.h **** Description : Delete a signal endpoint.
 591:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to
 592:Include/benchmark.h ****                                   delete from.
 593:Include/benchmark.h ****                                   2-Level.
 594:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability to the signal.
 595:Include/benchmark.h ****                                   1-Level.
 596:Include/benchmark.h **** Output      : None.
 597:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 598:Include/benchmark.h **** ******************************************************************************/
 599:Include/benchmark.h **** ret_t RME_Sig_Del(cid_t Cap_Cpt,
 600:Include/benchmark.h ****                   cid_t Cap_Sig)
 601:Include/benchmark.h **** {
 760              		.loc 2 601 1
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 8
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 0000 00482DE9 		push	{fp, lr}
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 11, -8
 767              		.cfi_offset 14, -4
 768 0004 04B08DE2 		add	fp, sp, #4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 25


 769              		.cfi_def_cfa 11, 4
 770 0008 08D04DE2 		sub	sp, sp, #8
 771 000c 08000BE5 		str	r0, [fp, #-8]
 772 0010 0C100BE5 		str	r1, [fp, #-12]
 602:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_DEL,
 773              		.loc 2 602 12
 774 0014 08301BE5 		ldr	r3, [fp, #-8]
 775 0018 1E0883E3 		orr	r0, r3, #1966080
 776 001c 0C101BE5 		ldr	r1, [fp, #-12]
 777 0020 0030A0E3 		mov	r3, #0
 778 0024 0020A0E3 		mov	r2, #0
 779 0028 FEFFFFEB 		bl	RME_Svc
 780 002c 0030A0E1 		mov	r3, r0
 603:Include/benchmark.h ****                    Cap_Cpt,
 604:Include/benchmark.h ****                    Cap_Sig,
 605:Include/benchmark.h ****                    0U,
 606:Include/benchmark.h ****                    0U);
 607:Include/benchmark.h **** }
 781              		.loc 2 607 1
 782 0030 0300A0E1 		mov	r0, r3
 783 0034 04D04BE2 		sub	sp, fp, #4
 784              		.cfi_def_cfa 13, 8
 785              		@ sp needed
 786 0038 0088BDE8 		pop	{fp, pc}
 787              		.cfi_endproc
 788              	.LFE11:
 790              		.section	.text.RME_Sig_Snd,"ax",%progbits
 791              		.align	2
 792              		.global	RME_Sig_Snd
 793              		.syntax unified
 794              		.arm
 796              	RME_Sig_Snd:
 797              	.LFB12:
 608:Include/benchmark.h **** /* End Function:RME_Sig_Del **************************************************/
 609:Include/benchmark.h **** /* Function:RME_Sig_Snd ******************************************************
 610:Include/benchmark.h **** Description : Try to send to a signal endpoint. This system call can cause
 611:Include/benchmark.h ****               a potential context switch.
 612:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 613:Include/benchmark.h ****                                   2-Level.
 614:Include/benchmark.h **** Output      : None.
 615:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0, or an error code.
 616:Include/benchmark.h **** ******************************************************************************/
 617:Include/benchmark.h **** ret_t RME_Sig_Snd(cid_t Cap_Sig)
 618:Include/benchmark.h **** {
 798              		.loc 2 618 1
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 8
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802 0000 00482DE9 		push	{fp, lr}
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 11, -8
 805              		.cfi_offset 14, -4
 806 0004 04B08DE2 		add	fp, sp, #4
 807              		.cfi_def_cfa 11, 4
 808 0008 08D04DE2 		sub	sp, sp, #8
 809 000c 08000BE5 		str	r0, [fp, #-8]
 619:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_SND,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 26


 810              		.loc 2 619 12
 811 0010 08101BE5 		ldr	r1, [fp, #-8]
 812 0014 0030A0E3 		mov	r3, #0
 813 0018 0020A0E3 		mov	r2, #0
 814 001c 0208A0E3 		mov	r0, #131072
 815 0020 FEFFFFEB 		bl	RME_Svc
 816 0024 0030A0E1 		mov	r3, r0
 620:Include/benchmark.h ****                    0U,
 621:Include/benchmark.h ****                    Cap_Sig,
 622:Include/benchmark.h ****                    0U,
 623:Include/benchmark.h ****                    0U);
 624:Include/benchmark.h **** }
 817              		.loc 2 624 1
 818 0028 0300A0E1 		mov	r0, r3
 819 002c 04D04BE2 		sub	sp, fp, #4
 820              		.cfi_def_cfa 13, 8
 821              		@ sp needed
 822 0030 0088BDE8 		pop	{fp, pc}
 823              		.cfi_endproc
 824              	.LFE12:
 826              		.section	.text.RME_Sig_Rcv,"ax",%progbits
 827              		.align	2
 828              		.global	RME_Sig_Rcv
 829              		.syntax unified
 830              		.arm
 832              	RME_Sig_Rcv:
 833              	.LFB13:
 625:Include/benchmark.h **** /* End Function:RME_Sig_Snd **************************************************/
 626:Include/benchmark.h **** /* Function:RME_Sig_Rcv *******************************************************
 627:Include/benchmark.h **** Description : Try to receive from a signal endpoint. The rules for signal
 628:Include/benchmark.h ****               endpoint receive is:
 629:Include/benchmark.h ****               1.If a receive endpoint have many send endpoints, everyone can
 630:Include/benchmark.h ****                 send to it, and sending to it will increase the count by 1.
 631:Include/benchmark.h ****               2.If some thread blocks on a receive endpoint, the wakeup is only
 632:Include/benchmark.h ****                 possible from the same core that thread is on.
 633:Include/benchmark.h ****               3.It is not recommended to let 2 cores operate on the rcv
 634:Include/benchmark.h ****                 endpoint simutaneously.
 635:Include/benchmark.h ****               This system call can potentially trigger a context switch.
 636:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 637:Include/benchmark.h ****                                   2-Level.
 638:Include/benchmark.h ****               RME_ptr_t Option - The receive option.
 639:Include/benchmark.h **** Output      : None.
 640:Include/benchmark.h **** Return      : RME_ret_t - If successful, a non-negative number containing the
 641:Include/benchmark.h ****                           number of signals received; or an error code.
 642:Include/benchmark.h **** ******************************************************************************/
 643:Include/benchmark.h **** ret_t RME_Sig_Rcv(cid_t Cap_Sig,
 644:Include/benchmark.h ****                   ptr_t Option)
 645:Include/benchmark.h **** {
 834              		.loc 2 645 1
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 8
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838 0000 00482DE9 		push	{fp, lr}
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 11, -8
 841              		.cfi_offset 14, -4
 842 0004 04B08DE2 		add	fp, sp, #4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 27


 843              		.cfi_def_cfa 11, 4
 844 0008 08D04DE2 		sub	sp, sp, #8
 845 000c 08000BE5 		str	r0, [fp, #-8]
 846 0010 0C100BE5 		str	r1, [fp, #-12]
 646:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_RCV,
 847              		.loc 2 646 12
 848 0014 08101BE5 		ldr	r1, [fp, #-8]
 849 0018 0030A0E3 		mov	r3, #0
 850 001c 0C201BE5 		ldr	r2, [fp, #-12]
 851 0020 0308A0E3 		mov	r0, #196608
 852 0024 FEFFFFEB 		bl	RME_Svc
 853 0028 0030A0E1 		mov	r3, r0
 647:Include/benchmark.h ****                    0U,
 648:Include/benchmark.h ****                    Cap_Sig,
 649:Include/benchmark.h ****                    Option,
 650:Include/benchmark.h ****                    0U);
 651:Include/benchmark.h **** }
 854              		.loc 2 651 1
 855 002c 0300A0E1 		mov	r0, r3
 856 0030 04D04BE2 		sub	sp, fp, #4
 857              		.cfi_def_cfa 13, 8
 858              		@ sp needed
 859 0034 0088BDE8 		pop	{fp, pc}
 860              		.cfi_endproc
 861              	.LFE13:
 863              		.global	Cur_addr
 864              		.section	.bss.Cur_addr,"aw",%nobits
 865              		.align	2
 868              	Cur_addr:
 869 0000 00000000 		.space	4
 870              		.global	start
 871              		.section	.bss.start,"aw",%nobits
 872              		.align	2
 875              	start:
 876 0000 00000000 		.space	4
 877              		.global	end
 878              		.section	.bss.end,"aw",%nobits
 879              		.align	2
 882              	end:
 883 0000 00000000 		.space	4
 884              		.section	.text._RME_Tsc_Init,"ax",%progbits
 885              		.align	2
 886              		.global	_RME_Tsc_Init
 887              		.syntax unified
 888              		.arm
 890              	_RME_Tsc_Init:
 891              	.LFB14:
   1:Source/rme_benchmark.c **** /******************************************************************************
   2:Source/rme_benchmark.c **** Filename    : benchmark.c
   3:Source/rme_benchmark.c **** Author      : pry
   4:Source/rme_benchmark.c **** Date        : 04/09/2017
   5:Source/rme_benchmark.c **** Licence     : The Unlicense; see LICENSE for details.
   6:Source/rme_benchmark.c **** Description : The benchmark file for RME.
   7:Source/rme_benchmark.c **** ******************************************************************************/
   8:Source/rme_benchmark.c **** 
   9:Source/rme_benchmark.c **** /* Include *******************************************************************/
  10:Source/rme_benchmark.c **** #include"benchmark.h"
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 28


  11:Source/rme_benchmark.c **** 
  12:Source/rme_benchmark.c **** ptr_t Cur_addr;
  13:Source/rme_benchmark.c **** ptr_t start;
  14:Source/rme_benchmark.c **** ptr_t end;
  15:Source/rme_benchmark.c **** /* Need to export error codes, and size of each object, in words! */
  16:Source/rme_benchmark.c **** /* End Include ***************************************************************/
  17:Source/rme_benchmark.c **** 
  18:Source/rme_benchmark.c **** /* Function:_RME_Tsc_Init *****************************************************
  19:Source/rme_benchmark.c **** Description : The initialization of timestamp counter. 19 secs before overflowing.
  20:Source/rme_benchmark.c **** Input       : None.
  21:Source/rme_benchmark.c **** Output      : None.
  22:Source/rme_benchmark.c **** Return      : None.
  23:Source/rme_benchmark.c **** ******************************************************************************/
  24:Source/rme_benchmark.c **** void _RME_Tsc_Init(void)
  25:Source/rme_benchmark.c **** {
 892              		.loc 1 25 1
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897 0000 04B02DE5 		str	fp, [sp, #-4]!
 898              		.cfi_def_cfa_offset 4
 899              		.cfi_offset 11, -4
 900 0004 00B08DE2 		add	fp, sp, #0
 901              		.cfi_def_cfa_register 11
  26:Source/rme_benchmark.c ****  //   TIM_HandleTypeDef TIM2_Handle;
  27:Source/rme_benchmark.c **** //    
  28:Source/rme_benchmark.c **** //    /* Initialize timer 2 to run at the same speed as the CPU */
  29:Source/rme_benchmark.c **** //    TIM2_Handle.Instance=TIM2;
  30:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Prescaler=0;
  31:Source/rme_benchmark.c **** //    TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
  32:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Period=(ptr_t)(-1);
  33:Source/rme_benchmark.c **** //    TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
  34:Source/rme_benchmark.c **** //    HAL_TIM_Base_Init(&TIM2_Handle);
  35:Source/rme_benchmark.c **** //    __HAL_RCC_TIM2_CLK_ENABLE();
  36:Source/rme_benchmark.c **** //    __HAL_TIM_ENABLE(&TIM2_Handle);
  37:Source/rme_benchmark.c **** }
 902              		.loc 1 37 1
 903 0008 00F020E3 		nop
 904 000c 00D08BE2 		add	sp, fp, #0
 905              		.cfi_def_cfa_register 13
 906              		@ sp needed
 907 0010 04B09DE4 		ldr	fp, [sp], #4
 908              		.cfi_restore 11
 909              		.cfi_def_cfa_offset 0
 910 0014 1EFF2FE1 		bx	lr
 911              		.cfi_endproc
 912              	.LFE14:
 914              		.section	.text.RME_Same_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 915              		.align	2
 916              		.global	RME_Same_Prc_Thd_Switch_Test_Thd
 917              		.syntax unified
 918              		.arm
 920              	RME_Same_Prc_Thd_Switch_Test_Thd:
 921              	.LFB15:
  38:Source/rme_benchmark.c **** /* End Function:_RME_Tsc_Init ************************************************/
  39:Source/rme_benchmark.c **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 29


  40:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
  41:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
  42:Source/rme_benchmark.c **** Input       : None.
  43:Source/rme_benchmark.c **** Output      : None.
  44:Source/rme_benchmark.c **** Return      : None.
  45:Source/rme_benchmark.c **** ******************************************************************************/
  46:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1)
  47:Source/rme_benchmark.c **** {
 922              		.loc 1 47 1
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 16
 925              		@ frame_needed = 1, uses_anonymous_args = 0
 926 0000 00482DE9 		push	{fp, lr}
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 11, -8
 929              		.cfi_offset 14, -4
 930 0004 04B08DE2 		add	fp, sp, #4
 931              		.cfi_def_cfa 11, 4
 932 0008 10D04DE2 		sub	sp, sp, #16
 933 000c 10000BE5 		str	r0, [fp, #-16]
 934              	.L53:
  48:Source/rme_benchmark.c ****     ret_t Retval;
  49:Source/rme_benchmark.c **** 
  50:Source/rme_benchmark.c ****     /*USR_DBG_S("\r\n hello! this is thread ");
  51:Source/rme_benchmark.c ****     USR_DBG_I(Param1);*/
  52:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
  53:Source/rme_benchmark.c ****     while(1)
  54:Source/rme_benchmark.c ****     {
  55:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
  56:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
  57:Source/rme_benchmark.c ****                           0,
  58:Source/rme_benchmark.c ****                           0);*/
  59:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 935              		.loc 1 59 16 discriminator 1
 936 0010 0010A0E3 		mov	r1, #0
 937 0014 0300A0E3 		mov	r0, #3
 938 0018 FEFFFFEB 		bl	RME_Thd_Swt
 939 001c 08000BE5 		str	r0, [fp, #-8]
 940              		.loc 1 59 15
 941 0020 FAFFFFEA 		b	.L53
 942              		.cfi_endproc
 943              	.LFE15:
 945              		.section	.rodata
 946              		.align	2
 947              	.LC0:
 948 0000 0D0A2D2D 		.ascii	"\015\012-----create a thread , TID= \000"
 948      2D2D2D63 
 948      72656174 
 948      65206120 
 948      74687265 
 949 001f 00       		.align	2
 950              	.LC1:
 951 0020 0D0A6372 		.ascii	"\015\012create a thread      retval= \000"
 951      65617465 
 951      20612074 
 951      68726561 
 951      64202020 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 30


 952              		.align	2
 953              	.LC2:
 954 0040 0D0A4269 		.ascii	"\015\012Bind the thread to the processor retval= \000"
 954      6E642074 
 954      68652074 
 954      68726561 
 954      6420746F 
 955              		.align	2
 956              	.LC3:
 957 006c 0D0A5365 		.ascii	"\015\012Set the execution information retval= \000"
 957      74207468 
 957      65206578 
 957      65637574 
 957      696F6E20 
 958 0095 000000   		.align	2
 959              	.LC4:
 960 0098 0D0A00   		.ascii	"\015\012\000"
 961 009b 00       		.align	2
 962              	.LC5:
 963 009c 0D0A4465 		.ascii	"\015\012Delegate some timeslice to it retval= \000"
 963      6C656761 
 963      74652073 
 963      6F6D6520 
 963      74696D65 
 964              		.section	.text.RME_Thd_Create,"ax",%progbits
 965              		.align	2
 966              		.global	RME_Thd_Create
 967              		.syntax unified
 968              		.arm
 970              	RME_Thd_Create:
 971              	.LFB16:
  60:Source/rme_benchmark.c ****     }
  61:Source/rme_benchmark.c **** }
  62:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test_Thd ****************************/
  63:Source/rme_benchmark.c **** 
  64:Source/rme_benchmark.c **** 
  65:Source/rme_benchmark.c **** void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_t T
  66:Source/rme_benchmark.c **** {
 972              		.loc 1 66 1
 973              		.cfi_startproc
 974              		@ args = 16, pretend = 0, frame = 24
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976 0000 00482DE9 		push	{fp, lr}
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 11, -8
 979              		.cfi_offset 14, -4
 980 0004 04B08DE2 		add	fp, sp, #4
 981              		.cfi_def_cfa 11, 4
 982 0008 28D04DE2 		sub	sp, sp, #40
 983 000c 10000BE5 		str	r0, [fp, #-16]
 984 0010 14100BE5 		str	r1, [fp, #-20]
 985 0014 18200BE5 		str	r2, [fp, #-24]
 986 0018 1C300BE5 		str	r3, [fp, #-28]
  67:Source/rme_benchmark.c **** 	ret_t Retval;
  68:Source/rme_benchmark.c **** 	cnt_t Count;
  69:Source/rme_benchmark.c **** 	ptr_t Stack_Addr;
  70:Source/rme_benchmark.c **** 	ptr_t Temp;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 31


  71:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n-----create a thread , TID= ");
 987              		.loc 1 71 2
 988 001c 000000E3 		movw	r0, #:lower16:.LC0
 989 0020 000040E3 		movt	r0, #:upper16:.LC0
 990 0024 FEFFFFEB 		bl	USR_DBG_S
  72:Source/rme_benchmark.c **** 	USR_DBG_H(Tid);
 991              		.loc 1 72 2
 992 0028 14001BE5 		ldr	r0, [fp, #-20]
 993 002c FEFFFFEB 		bl	USR_DBG_H
  73:Source/rme_benchmark.c **** 	/* Initialize the thread's stack before entering it */
  74:Source/rme_benchmark.c **** 	Stack_Addr=(ptr_t)Stack;
 994              		.loc 1 74 12
 995 0030 10309BE5 		ldr	r3, [fp, #16]
 996 0034 08300BE5 		str	r3, [fp, #-8]
  75:Source/rme_benchmark.c **** 
  76:Source/rme_benchmark.c **** 	/* create a thread */
  77:Source/rme_benchmark.c **** 	Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,Cap_Thd,
 997              		.loc 1 77 9
 998 0038 0030A0E3 		mov	r3, #0
 999 003c 08308DE5 		str	r3, [sp, #8]
 1000 0040 04309BE5 		ldr	r3, [fp, #4]
 1001 0044 04308DE5 		str	r3, [sp, #4]
 1002 0048 1F30A0E3 		mov	r3, #31
 1003 004c 00308DE5 		str	r3, [sp]
 1004 0050 0230A0E3 		mov	r3, #2
 1005 0054 10201BE5 		ldr	r2, [fp, #-16]
 1006 0058 0510A0E3 		mov	r1, #5
 1007 005c 0000A0E3 		mov	r0, #0
 1008 0060 FEFFFFEB 		bl	RME_Thd_Crt
 1009 0064 0C000BE5 		str	r0, [fp, #-12]
  78:Source/rme_benchmark.c **** 					   RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,Raddr,0);
  79:Source/rme_benchmark.c **** 	USR_DBG_S("\r\ncreate a thread      retval= ");
 1010              		.loc 1 79 2
 1011 0068 000000E3 		movw	r0, #:lower16:.LC1
 1012 006c 000040E3 		movt	r0, #:upper16:.LC1
 1013 0070 FEFFFFEB 		bl	USR_DBG_S
  80:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1014              		.loc 1 80 2
 1015 0074 0C001BE5 		ldr	r0, [fp, #-12]
 1016 0078 FEFFFFEB 		bl	USR_DBG_I
  81:Source/rme_benchmark.c **** 
  82:Source/rme_benchmark.c **** 	/* Bind the thread to the processor */
  83:Source/rme_benchmark.c **** 	Retval=RME_Thd_Sched_Bind(Cap_Thd,RME_BOOT_INIT_THD,Cap_Sig,
 1017              		.loc 1 83 9
 1018 007c 14201BE5 		ldr	r2, [fp, #-20]
 1019 0080 0030A0E3 		mov	r3, #0
 1020 0084 04308DE5 		str	r3, [sp, #4]
 1021 0088 18301BE5 		ldr	r3, [fp, #-24]
 1022 008c 00308DE5 		str	r3, [sp]
 1023 0090 0230A0E1 		mov	r3, r2
 1024 0094 08209BE5 		ldr	r2, [fp, #8]
 1025 0098 0310A0E3 		mov	r1, #3
 1026 009c 10001BE5 		ldr	r0, [fp, #-16]
 1027 00a0 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 1028 00a4 0C000BE5 		str	r0, [fp, #-12]
  84:Source/rme_benchmark.c **** 							  Tid,Prc,RME_BOOT_HYPER_KOM_VADDR);
  85:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nBind the thread to the processor retval= ");
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 32


 1029              		.loc 1 85 2
 1030 00a8 000000E3 		movw	r0, #:lower16:.LC2
 1031 00ac 000040E3 		movt	r0, #:upper16:.LC2
 1032 00b0 FEFFFFEB 		bl	USR_DBG_S
  86:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1033              		.loc 1 86 2
 1034 00b4 0C001BE5 		ldr	r0, [fp, #-12]
 1035 00b8 FEFFFFEB 		bl	USR_DBG_I
  87:Source/rme_benchmark.c **** 	/* Set the execution information */
  88:Source/rme_benchmark.c **** 
  89:Source/rme_benchmark.c **** 	Retval=RME_Thd_Exec_Set(Cap_Thd,Entry,Stack_Addr,Tid);
 1036              		.loc 1 89 9
 1037 00bc 14301BE5 		ldr	r3, [fp, #-20]
 1038 00c0 08201BE5 		ldr	r2, [fp, #-8]
 1039 00c4 1C101BE5 		ldr	r1, [fp, #-28]
 1040 00c8 10001BE5 		ldr	r0, [fp, #-16]
 1041 00cc FEFFFFEB 		bl	RME_Thd_Exec_Set
 1042 00d0 0C000BE5 		str	r0, [fp, #-12]
  90:Source/rme_benchmark.c **** 	//RME_Stack[2000]=1234;
  91:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nSet the execution information retval= ");
 1043              		.loc 1 91 2
 1044 00d4 000000E3 		movw	r0, #:lower16:.LC3
 1045 00d8 000040E3 		movt	r0, #:upper16:.LC3
 1046 00dc FEFFFFEB 		bl	USR_DBG_S
  92:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1047              		.loc 1 92 2
 1048 00e0 0C001BE5 		ldr	r0, [fp, #-12]
 1049 00e4 FEFFFFEB 		bl	USR_DBG_I
  93:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n");
 1050              		.loc 1 93 2
 1051 00e8 000000E3 		movw	r0, #:lower16:.LC4
 1052 00ec 000040E3 		movt	r0, #:upper16:.LC4
 1053 00f0 FEFFFFEB 		bl	USR_DBG_S
  94:Source/rme_benchmark.c **** 	/* Delegate some timeslice to it */
  95:Source/rme_benchmark.c **** 	Retval=RME_Thd_Time_Xfer(Cap_Thd,RME_BOOT_INIT_THD,Time);
 1054              		.loc 1 95 9
 1055 00f4 0C209BE5 		ldr	r2, [fp, #12]
 1056 00f8 0310A0E3 		mov	r1, #3
 1057 00fc 10001BE5 		ldr	r0, [fp, #-16]
 1058 0100 FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1059 0104 0C000BE5 		str	r0, [fp, #-12]
  96:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1060              		.loc 1 96 2
 1061 0108 000000E3 		movw	r0, #:lower16:.LC5
 1062 010c 000040E3 		movt	r0, #:upper16:.LC5
 1063 0110 FEFFFFEB 		bl	USR_DBG_S
  97:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1064              		.loc 1 97 2
 1065 0114 0C001BE5 		ldr	r0, [fp, #-12]
 1066 0118 FEFFFFEB 		bl	USR_DBG_I
  98:Source/rme_benchmark.c **** }
 1067              		.loc 1 98 1
 1068 011c 00F020E3 		nop
 1069 0120 04D04BE2 		sub	sp, fp, #4
 1070              		.cfi_def_cfa 13, 8
 1071              		@ sp needed
 1072 0124 0088BDE8 		pop	{fp, pc}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 33


 1073              		.cfi_endproc
 1074              	.LFE16:
 1076              		.section	.rodata
 1077 00c5 000000   		.align	2
 1078              	.LC6:
 1079 00c8 0D0A456E 		.ascii	"\015\012Entering send thread!\000"
 1079      74657269 
 1079      6E672073 
 1079      656E6420 
 1079      74687265 
 1080              		.align	2
 1081              	.LC7:
 1082 00e0 0D0A5365 		.ascii	"\015\012Send!\000"
 1082      6E642100 
 1083              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_send,"ax",%progbits
 1084              		.align	2
 1085              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_send
 1086              		.syntax unified
 1087              		.arm
 1089              	RME_Same_Prc_Thd_Sig_Test_Thd_send:
 1090              	.LFB17:
  99:Source/rme_benchmark.c **** 
 100:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_send(void) //low prio 4
 101:Source/rme_benchmark.c **** {
 1091              		.loc 1 101 1
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 1, uses_anonymous_args = 0
 1095 0000 00482DE9 		push	{fp, lr}
 1096              		.cfi_def_cfa_offset 8
 1097              		.cfi_offset 11, -8
 1098              		.cfi_offset 14, -4
 1099 0004 04B08DE2 		add	fp, sp, #4
 1100              		.cfi_def_cfa 11, 4
 102:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nEntering send thread!");
 1101              		.loc 1 102 2
 1102 0008 000000E3 		movw	r0, #:lower16:.LC6
 1103 000c 000040E3 		movt	r0, #:upper16:.LC6
 1104 0010 FEFFFFEB 		bl	USR_DBG_S
 1105              	.L56:
 103:Source/rme_benchmark.c **** 
 104:Source/rme_benchmark.c **** 
 105:Source/rme_benchmark.c **** 	while(1)
 106:Source/rme_benchmark.c **** 	{
 107:Source/rme_benchmark.c **** 		USR_DBG_S("\r\nSend!");
 1106              		.loc 1 107 3
 1107 0014 000000E3 		movw	r0, #:lower16:.LC7
 1108 0018 000040E3 		movt	r0, #:upper16:.LC7
 1109 001c FEFFFFEB 		bl	USR_DBG_S
 108:Source/rme_benchmark.c **** 		RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1110              		.loc 1 108 3 discriminator 1
 1111 0020 0D00A0E3 		mov	r0, #13
 1112 0024 FEFFFFEB 		bl	RME_Sig_Snd
 107:Source/rme_benchmark.c **** 		RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1113              		.loc 1 107 3
 1114 0028 F9FFFFEA 		b	.L56
 1115              		.cfi_endproc
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 34


 1116              	.LFE17:
 1118              		.section	.rodata
 1119              		.align	2
 1120              	.LC8:
 1121 00e8 0D0A456E 		.ascii	"\015\012Entering receive thread!\000"
 1121      74657269 
 1121      6E672072 
 1121      65636569 
 1121      76652074 
 1122 0103 00       		.align	2
 1123              	.LC9:
 1124 0104 0D0A5265 		.ascii	"\015\012Received wrong number!\000"
 1124      63656976 
 1124      65642077 
 1124      726F6E67 
 1124      206E756D 
 1125 011d 000000   		.align	2
 1126              	.LC10:
 1127 0120 0D0A5265 		.ascii	"\015\012Received!\000"
 1127      63656976 
 1127      65642100 
 1128              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_recv,"ax",%progbits
 1129              		.align	2
 1130              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1131              		.syntax unified
 1132              		.arm
 1134              	RME_Same_Prc_Thd_Sig_Test_Thd_recv:
 1135              	.LFB18:
 109:Source/rme_benchmark.c **** 	}
 110:Source/rme_benchmark.c **** 
 111:Source/rme_benchmark.c **** }
 112:Source/rme_benchmark.c **** 
 113:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_recv(void) // high prio 5
 114:Source/rme_benchmark.c **** {
 1136              		.loc 1 114 1
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 1, uses_anonymous_args = 0
 1140 0000 00482DE9 		push	{fp, lr}
 1141              		.cfi_def_cfa_offset 8
 1142              		.cfi_offset 11, -8
 1143              		.cfi_offset 14, -4
 1144 0004 04B08DE2 		add	fp, sp, #4
 1145              		.cfi_def_cfa 11, 4
 115:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nEntering receive thread!");
 1146              		.loc 1 115 2
 1147 0008 000000E3 		movw	r0, #:lower16:.LC8
 1148 000c 000040E3 		movt	r0, #:upper16:.LC8
 1149 0010 FEFFFFEB 		bl	USR_DBG_S
 1150              	.L60:
 116:Source/rme_benchmark.c **** 
 117:Source/rme_benchmark.c **** 	while(1)
 118:Source/rme_benchmark.c **** 	{
 119:Source/rme_benchmark.c **** 		if(RME_Sig_Rcv(RME_BOOT_SIG_BENCH,RME_RCV_BS)!=1)
 1151              		.loc 1 119 6
 1152 0014 0010A0E3 		mov	r1, #0
 1153 0018 0D00A0E3 		mov	r0, #13
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 35


 1154 001c FEFFFFEB 		bl	RME_Sig_Rcv
 1155 0020 0030A0E1 		mov	r3, r0
 1156              		.loc 1 119 5 discriminator 1
 1157 0024 010053E3 		cmp	r3, #1
 1158 0028 0300000A 		beq	.L58
 120:Source/rme_benchmark.c **** 		{
 121:Source/rme_benchmark.c **** 			USR_DBG_S("\r\nReceived wrong number!");
 1159              		.loc 1 121 4
 1160 002c 000000E3 		movw	r0, #:lower16:.LC9
 1161 0030 000040E3 		movt	r0, #:upper16:.LC9
 1162 0034 FEFFFFEB 		bl	USR_DBG_S
 1163              	.L59:
 122:Source/rme_benchmark.c **** 			while(1);
 1164              		.loc 1 122 9
 1165 0038 FEFFFFEA 		b	.L59
 1166              	.L58:
 123:Source/rme_benchmark.c **** 		}
 124:Source/rme_benchmark.c **** 		USR_DBG_S("\r\nReceived!");
 1167              		.loc 1 124 3
 1168 003c 000000E3 		movw	r0, #:lower16:.LC10
 1169 0040 000040E3 		movt	r0, #:upper16:.LC10
 1170 0044 FEFFFFEB 		bl	USR_DBG_S
 119:Source/rme_benchmark.c **** 		{
 1171              		.loc 1 119 5
 1172 0048 F1FFFFEA 		b	.L60
 1173              		.cfi_endproc
 1174              	.LFE18:
 1176              		.section	.rodata
 1177              		.align	2
 1178              	.LC11:
 1179 012c 0D0A2F2A 		.ascii	"\015\012/****************\000"
 1179      2A2A2A2A 
 1179      2A2A2A2A 
 1179      2A2A2A2A 
 1179      2A2A2A00 
 1180              		.align	2
 1181              	.LC12:
 1182 0140 62656769 		.ascii	"begin RME_Same_Prc_Thd_Sig_Test_Thd_main\000"
 1182      6E20524D 
 1182      455F5361 
 1182      6D655F50 
 1182      72635F54 
 1183 0169 000000   		.align	2
 1184              	.LC13:
 1185 016c 2A2A2A2A 		.ascii	"****************/\000"
 1185      2A2A2A2A 
 1185      2A2A2A2A 
 1185      2A2A2A2A 
 1185      2F00
 1186 017e 0000     		.align	2
 1187              	.LC14:
 1188 0180 0D0A4865 		.ascii	"\015\012Hello this is thread main\000"
 1188      6C6C6F20 
 1188      74686973 
 1188      20697320 
 1188      74687265 
 1189              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_main,"ax",%progbits
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 36


 1190              		.align	2
 1191              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_main
 1192              		.syntax unified
 1193              		.arm
 1195              	RME_Same_Prc_Thd_Sig_Test_Thd_main:
 1196              	.LFB19:
 125:Source/rme_benchmark.c **** 	}
 126:Source/rme_benchmark.c **** }
 127:Source/rme_benchmark.c **** 
 128:Source/rme_benchmark.c **** 
 129:Source/rme_benchmark.c **** 
 130:Source/rme_benchmark.c **** 
 131:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
 132:Source/rme_benchmark.c **** Description : The thread for testing same-process thread signal send and receive performance.
 133:Source/rme_benchmark.c **** Input       : None.
 134:Source/rme_benchmark.c **** Output      : None.
 135:Source/rme_benchmark.c **** Return      : None.
 136:Source/rme_benchmark.c **** ******************************************************************************/
 137:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_main(ptr_t TID)
 138:Source/rme_benchmark.c **** {
 1197              		.loc 1 138 1
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 8
 1200              		@ frame_needed = 1, uses_anonymous_args = 0
 1201 0000 00482DE9 		push	{fp, lr}
 1202              		.cfi_def_cfa_offset 8
 1203              		.cfi_offset 11, -8
 1204              		.cfi_offset 14, -4
 1205 0004 04B08DE2 		add	fp, sp, #4
 1206              		.cfi_def_cfa 11, 4
 1207 0008 08D04DE2 		sub	sp, sp, #8
 1208 000c 08000BE5 		str	r0, [fp, #-8]
 139:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n");
 1209              		.loc 1 139 2
 1210 0010 000000E3 		movw	r0, #:lower16:.LC4
 1211 0014 000040E3 		movt	r0, #:upper16:.LC4
 1212 0018 FEFFFFEB 		bl	USR_DBG_S
 140:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n/****************");
 1213              		.loc 1 140 2
 1214 001c 000000E3 		movw	r0, #:lower16:.LC11
 1215 0020 000040E3 		movt	r0, #:upper16:.LC11
 1216 0024 FEFFFFEB 		bl	USR_DBG_S
 141:Source/rme_benchmark.c **** 	USR_DBG_S("begin RME_Same_Prc_Thd_Sig_Test_Thd_main");
 1217              		.loc 1 141 2
 1218 0028 000000E3 		movw	r0, #:lower16:.LC12
 1219 002c 000040E3 		movt	r0, #:upper16:.LC12
 1220 0030 FEFFFFEB 		bl	USR_DBG_S
 142:Source/rme_benchmark.c **** 	USR_DBG_S("****************/");
 1221              		.loc 1 142 2
 1222 0034 000000E3 		movw	r0, #:lower16:.LC13
 1223 0038 000040E3 		movt	r0, #:upper16:.LC13
 1224 003c FEFFFFEB 		bl	USR_DBG_S
 143:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nHello this is thread main");
 1225              		.loc 1 143 2
 1226 0040 000000E3 		movw	r0, #:lower16:.LC14
 1227 0044 000040E3 		movt	r0, #:upper16:.LC14
 1228 0048 FEFFFFEB 		bl	USR_DBG_S
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 37


 144:Source/rme_benchmark.c **** 	ret_t Retval;
 145:Source/rme_benchmark.c **** 
 146:Source/rme_benchmark.c **** 
 147:Source/rme_benchmark.c **** 	/* send the begin signal */
 148:Source/rme_benchmark.c **** 	RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1229              		.loc 1 148 2
 1230 004c 0D00A0E3 		mov	r0, #13
 1231 0050 FEFFFFEB 		bl	RME_Sig_Snd
 149:Source/rme_benchmark.c **** 	RME_Thd_Swt(RME_BOOT_BENCH_SEN_THD,0);
 1232              		.loc 1 149 2
 1233 0054 0010A0E3 		mov	r1, #0
 1234 0058 0E00A0E3 		mov	r0, #14
 1235 005c FEFFFFEB 		bl	RME_Thd_Swt
 1236              	.L62:
 150:Source/rme_benchmark.c **** 
 151:Source/rme_benchmark.c **** 	while(1);
 1237              		.loc 1 151 7
 1238 0060 FEFFFFEA 		b	.L62
 1239              		.cfi_endproc
 1240              	.LFE19:
 1242              		.section	.rodata
 1243              		.align	2
 1244              	.LC15:
 1245 019c 0D0A6372 		.ascii	"\015\012create a signal end point      retval= \000"
 1245      65617465 
 1245      20612073 
 1245      69676E61 
 1245      6C20656E 
 1246              		.section	.text.RME_Same_Prc_Thd_Sig_Testinit,"ax",%progbits
 1247              		.align	2
 1248              		.global	RME_Same_Prc_Thd_Sig_Testinit
 1249              		.syntax unified
 1250              		.arm
 1252              	RME_Same_Prc_Thd_Sig_Testinit:
 1253              	.LFB20:
 152:Source/rme_benchmark.c **** }
 153:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Testinit *************************************
 154:Source/rme_benchmark.c **** Description : The same-process thread signal send and receive test code.
 155:Source/rme_benchmark.c **** Input       : None.
 156:Source/rme_benchmark.c **** Output      : None.
 157:Source/rme_benchmark.c **** Return      : None.
 158:Source/rme_benchmark.c **** ******************************************************************************/
 159:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Testinit(void)
 160:Source/rme_benchmark.c **** {
 1254              		.loc 1 160 1
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 8
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258 0000 00482DE9 		push	{fp, lr}
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 11, -8
 1261              		.cfi_offset 14, -4
 1262 0004 04B08DE2 		add	fp, sp, #4
 1263              		.cfi_def_cfa 11, 4
 1264 0008 18D04DE2 		sub	sp, sp, #24
 161:Source/rme_benchmark.c **** 	ret_t Retval;
 162:Source/rme_benchmark.c **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 38


 163:Source/rme_benchmark.c **** 	/* create a signal end point */
 164:Source/rme_benchmark.c **** 	Retval=RME_Sig_Crt(RME_BOOT_INIT_CPT,RME_BOOT_SIG_BENCH);
 1265              		.loc 1 164 9
 1266 000c 0D10A0E3 		mov	r1, #13
 1267 0010 0000A0E3 		mov	r0, #0
 1268 0014 FEFFFFEB 		bl	RME_Sig_Crt
 1269 0018 08000BE5 		str	r0, [fp, #-8]
 165:Source/rme_benchmark.c **** 	USR_DBG_S("\r\ncreate a signal end point      retval= ");
 1270              		.loc 1 165 2
 1271 001c 000000E3 		movw	r0, #:lower16:.LC15
 1272 0020 000040E3 		movt	r0, #:upper16:.LC15
 1273 0024 FEFFFFEB 		bl	USR_DBG_S
 166:Source/rme_benchmark.c **** 	USR_DBG_I(Retval);
 1274              		.loc 1 166 2
 1275 0028 08001BE5 		ldr	r0, [fp, #-8]
 1276 002c FEFFFFEB 		bl	USR_DBG_I
 167:Source/rme_benchmark.c **** 	/* create signal test thread */
 168:Source/rme_benchmark.c **** 	//void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_
 169:Source/rme_benchmark.c **** 	RME_Thd_Create(RME_BOOT_BENCH_RCV_THD,RME_TID_4,5,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_recv,
 1277              		.loc 1 169 2
 1278 0030 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1279 0034 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1280 0038 003000E3 		movw	r3, #:lower16:Cur_addr
 1281 003c 003040E3 		movt	r3, #:upper16:Cur_addr
 1282 0040 003093E5 		ldr	r3, [r3]
 1283 0044 B0109FE5 		ldr	r1, .L64
 1284 0048 0C108DE5 		str	r1, [sp, #12]
 1285 004c 0611E0E3 		mvn	r1, #-2147483647
 1286 0050 08108DE5 		str	r1, [sp, #8]
 1287 0054 0D10A0E3 		mov	r1, #13
 1288 0058 04108DE5 		str	r1, [sp, #4]
 1289 005c 00308DE5 		str	r3, [sp]
 1290 0060 0230A0E1 		mov	r3, r2
 1291 0064 0520A0E3 		mov	r2, #5
 1292 0068 0410A0E3 		mov	r1, #4
 1293 006c 0F00A0E3 		mov	r0, #15
 1294 0070 FEFFFFEB 		bl	RME_Thd_Create
 170:Source/rme_benchmark.c ****                    Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME,(ptr_t)&RME_Stack3[2000]);
 171:Source/rme_benchmark.c **** 	Cur_addr+=512;
 1295              		.loc 1 171 10
 1296 0074 003000E3 		movw	r3, #:lower16:Cur_addr
 1297 0078 003040E3 		movt	r3, #:upper16:Cur_addr
 1298 007c 003093E5 		ldr	r3, [r3]
 1299 0080 022C83E2 		add	r2, r3, #512
 1300 0084 003000E3 		movw	r3, #:lower16:Cur_addr
 1301 0088 003040E3 		movt	r3, #:upper16:Cur_addr
 1302 008c 002083E5 		str	r2, [r3]
 172:Source/rme_benchmark.c **** 	RME_Thd_Create(RME_BOOT_BENCH_SEN_THD,RME_TID_3,4,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_send,
 1303              		.loc 1 172 2
 1304 0090 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1305 0094 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1306 0098 003000E3 		movw	r3, #:lower16:Cur_addr
 1307 009c 003040E3 		movt	r3, #:upper16:Cur_addr
 1308 00a0 003093E5 		ldr	r3, [r3]
 1309 00a4 54109FE5 		ldr	r1, .L64+4
 1310 00a8 0C108DE5 		str	r1, [sp, #12]
 1311 00ac 0611E0E3 		mvn	r1, #-2147483647
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 39


 1312 00b0 08108DE5 		str	r1, [sp, #8]
 1313 00b4 0D10A0E3 		mov	r1, #13
 1314 00b8 04108DE5 		str	r1, [sp, #4]
 1315 00bc 00308DE5 		str	r3, [sp]
 1316 00c0 0230A0E1 		mov	r3, r2
 1317 00c4 0420A0E3 		mov	r2, #4
 1318 00c8 0310A0E3 		mov	r1, #3
 1319 00cc 0E00A0E3 		mov	r0, #14
 1320 00d0 FEFFFFEB 		bl	RME_Thd_Create
 173:Source/rme_benchmark.c **** 				   Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME,(ptr_t)&RME_Stack2[2000]);
 174:Source/rme_benchmark.c **** 	Cur_addr+=512;
 1321              		.loc 1 174 10
 1322 00d4 003000E3 		movw	r3, #:lower16:Cur_addr
 1323 00d8 003040E3 		movt	r3, #:upper16:Cur_addr
 1324 00dc 003093E5 		ldr	r3, [r3]
 1325 00e0 022C83E2 		add	r2, r3, #512
 1326 00e4 003000E3 		movw	r3, #:lower16:Cur_addr
 1327 00e8 003040E3 		movt	r3, #:upper16:Cur_addr
 1328 00ec 002083E5 		str	r2, [r3]
 175:Source/rme_benchmark.c **** }
 1329              		.loc 1 175 1
 1330 00f0 00F020E3 		nop
 1331 00f4 04D04BE2 		sub	sp, fp, #4
 1332              		.cfi_def_cfa 13, 8
 1333              		@ sp needed
 1334 00f8 0088BDE8 		pop	{fp, pc}
 1335              	.L65:
 1336              		.align	2
 1337              	.L64:
 1338 00fc 401F0000 		.word	RME_Stack3+8000
 1339 0100 401F0000 		.word	RME_Stack2+8000
 1340              		.cfi_endproc
 1341              	.LFE20:
 1343              		.section	.rodata
 1344 01c6 0000     		.align	2
 1345              	.LC16:
 1346 01c8 0D0A2073 		.ascii	"\015\012 swt 10000 times time= \000"
 1346      77742031 
 1346      30303030 
 1346      2074696D 
 1346      65732074 
 1347 01e2 0000     		.align	2
 1348              	.LC17:
 1349 01e4 0D0A2073 		.ascii	"\015\012 swt 1 times time= \000"
 1349      77742031 
 1349      2074696D 
 1349      65732074 
 1349      696D653D 
 1350 01fa 0000     		.align	2
 1351              	.LC18:
 1352 01fc 0D0A7465 		.ascii	"\015\012test done \000"
 1352      73742064 
 1352      6F6E6520 
 1352      00
 1353              		.section	.text.RME_Same_Prc_Thd_Switch_Test,"ax",%progbits
 1354              		.align	2
 1355              		.global	RME_Same_Prc_Thd_Switch_Test
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 40


 1356              		.syntax unified
 1357              		.arm
 1359              	RME_Same_Prc_Thd_Switch_Test:
 1360              	.LFB21:
 176:Source/rme_benchmark.c **** 
 177:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test *************************************
 178:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 179:Source/rme_benchmark.c **** Input       : None.
 180:Source/rme_benchmark.c **** Output      : None.
 181:Source/rme_benchmark.c **** Return      : None.
 182:Source/rme_benchmark.c **** ******************************************************************************/
 183:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test(void)
 184:Source/rme_benchmark.c **** {
 1361              		.loc 1 184 1
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 16
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365 0000 00482DE9 		push	{fp, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 11, -8
 1368              		.cfi_offset 14, -4
 1369 0004 04B08DE2 		add	fp, sp, #4
 1370              		.cfi_def_cfa 11, 4
 1371 0008 20D04DE2 		sub	sp, sp, #32
 185:Source/rme_benchmark.c **** 	/*USR_DBG_S("\r\n/****************");
 186:Source/rme_benchmark.c **** 	USR_DBG_S("begin RME_Same_Prc_Thd_Switch_Test");
 187:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 188:Source/rme_benchmark.c ****     ret_t Retval;
 189:Source/rme_benchmark.c ****     cnt_t Count;
 190:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 191:Source/rme_benchmark.c ****     ptr_t Temp;
 192:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 193:Source/rme_benchmark.c ****     Stack_Addr=(ptr_t)&RME_Stack1[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 1372              		.loc 1 193 15
 1373 000c 7C319FE5 		ldr	r3, .L70
 1374 0010 0C300BE5 		str	r3, [fp, #-12]
 194:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 195:Source/rme_benchmark.c ****                                1, 2, 3, 4); */
 196:Source/rme_benchmark.c **** 
 197:Source/rme_benchmark.c ****     /*USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 198:Source/rme_benchmark.c ****     USR_DBG_H((ptr_t)(&RME_Stack1[2047]));
 199:Source/rme_benchmark.c ****     USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 200:Source/rme_benchmark.c ****     USR_DBG_H(Stack_Addr);*/
 201:Source/rme_benchmark.c **** 
 202:Source/rme_benchmark.c ****     /* There are still many bugs in the kernel. Need a white-box test to guarantee
 203:Source/rme_benchmark.c ****      * that it is free of bugs. Find a scheme to do that */
 204:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 205:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 206:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 207:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 208:Source/rme_benchmark.c ****     Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,RME_BOOT_BENCH_THD,
 1375              		.loc 1 208 12
 1376 0014 0030A0E3 		mov	r3, #0
 1377 0018 08308DE5 		str	r3, [sp, #8]
 1378 001c 093AA0E3 		mov	r3, #36864
 1379 0020 04308DE5 		str	r3, [sp, #4]
 1380 0024 1F30A0E3 		mov	r3, #31
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 41


 1381 0028 00308DE5 		str	r3, [sp]
 1382 002c 0230A0E3 		mov	r3, #2
 1383 0030 0820A0E3 		mov	r2, #8
 1384 0034 0510A0E3 		mov	r1, #5
 1385 0038 0000A0E3 		mov	r0, #0
 1386 003c FEFFFFEB 		bl	RME_Thd_Crt
 1387 0040 10000BE5 		str	r0, [fp, #-16]
 209:Source/rme_benchmark.c ****                        RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,RME_BOOT_BENCH_KOM_FRONTIER,0);
 210:Source/rme_benchmark.c ****     //USR_DBG_S("\r\ncreate a thread      retval= ");
 211:Source/rme_benchmark.c ****     //USR_DBG_I(Retval);
 212:Source/rme_benchmark.c **** 
 213:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 214:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,RME_BOOT_BENCH_THD,
 215:Source/rme_benchmark.c ****     		          RME_PARAM_D1(RME_BOOT_INIT_THD)|RME_PARAM_D0(RME_CID_NULL),
 216:Source/rme_benchmark.c **** 					  RME_PARAM_D1(RME_TID_2)|RME_PARAM_D0(RME_BOOT_INIT_PRC),
 217:Source/rme_benchmark.c **** 					  RME_BOOT_HYPER_KOM_VADDR);*/
 218:Source/rme_benchmark.c ****     Retval=RME_Thd_Sched_Bind(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_CID_NULL,
 1388              		.loc 1 218 12
 1389 0044 0030A0E3 		mov	r3, #0
 1390 0048 04308DE5 		str	r3, [sp, #4]
 1391 004c 0030A0E3 		mov	r3, #0
 1392 0050 00308DE5 		str	r3, [sp]
 1393 0054 0230A0E3 		mov	r3, #2
 1394 0058 0229A0E3 		mov	r2, #32768
 1395 005c 0310A0E3 		mov	r1, #3
 1396 0060 0800A0E3 		mov	r0, #8
 1397 0064 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 1398 0068 10000BE5 		str	r0, [fp, #-16]
 219:Source/rme_benchmark.c ****                               RME_TID_2,0,RME_BOOT_HYPER_KOM_VADDR);
 220:Source/rme_benchmark.c ****     //USR_DBG_S("\r\nBind the thread to the processor retval= ");
 221:Source/rme_benchmark.c ****     //USR_DBG_I(Retval);
 222:Source/rme_benchmark.c ****     extern void RME_Deadloop(void);
 223:Source/rme_benchmark.c ****     /* Set the execution information */
 224:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,RME_BOOT_BENCH_THD,
 225:Source/rme_benchmark.c **** 	         	 	 (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 226:Source/rme_benchmark.c ****     		         //(ptr_t)RME_Deadloop,
 227:Source/rme_benchmark.c **** 					 Stack_Addr,RME_TID_2);*/
 228:Source/rme_benchmark.c ****     Retval=RME_Thd_Exec_Set(RME_BOOT_BENCH_THD,(ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,Stack_Addr,R
 1399              		.loc 1 228 12
 1400 006c 001000E3 		movw	r1, #:lower16:RME_Same_Prc_Thd_Switch_Test_Thd
 1401 0070 001040E3 		movt	r1, #:upper16:RME_Same_Prc_Thd_Switch_Test_Thd
 1402 0074 0230A0E3 		mov	r3, #2
 1403 0078 0C201BE5 		ldr	r2, [fp, #-12]
 1404 007c 0800A0E3 		mov	r0, #8
 1405 0080 FEFFFFEB 		bl	RME_Thd_Exec_Set
 1406 0084 10000BE5 		str	r0, [fp, #-16]
 229:Source/rme_benchmark.c ****     //RME_Stack[2000]=1234;
 230:Source/rme_benchmark.c ****     //USR_DBG_S("\r\nSet the execution information retval= ");
 231:Source/rme_benchmark.c ****     //USR_DBG_I(Retval);
 232:Source/rme_benchmark.c ****     //USR_DBG_S("\r\n");
 233:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 234:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,RME_BOOT_BENCH_THD,
 235:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 236:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 237:Source/rme_benchmark.c ****                       10000000);*/
 238:Source/rme_benchmark.c ****     Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_THD_INF_TIME);
 1407              		.loc 1 238 12
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 42


 1408 0088 0621E0E3 		mvn	r2, #-2147483647
 1409 008c 0310A0E3 		mov	r1, #3
 1410 0090 0800A0E3 		mov	r0, #8
 1411 0094 FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1412 0098 10000BE5 		str	r0, [fp, #-16]
 239:Source/rme_benchmark.c **** 
 240:Source/rme_benchmark.c ****     //Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,1000);
 241:Source/rme_benchmark.c ****     //USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 242:Source/rme_benchmark.c ****          //USR_DBG_I(Retval);
 243:Source/rme_benchmark.c **** 
 244:Source/rme_benchmark.c ****     Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 1413              		.loc 1 244 12
 1414 009c 0010A0E3 		mov	r1, #0
 1415 00a0 0800A0E3 		mov	r0, #8
 1416 00a4 FEFFFFEB 		bl	RME_Thd_Swt
 1417 00a8 10000BE5 		str	r0, [fp, #-16]
 245:Source/rme_benchmark.c ****     /*USR_DBG_S("\r\nTry to switch to that thread - should fail  retval= ");
 246:Source/rme_benchmark.c ****     USR_DBG_I(Retval);*/
 247:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 248:Source/rme_benchmark.c ****     * composite 324. opted max:323
 249:Source/rme_benchmark.c ****     * all:33.0
 250:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 251:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 252:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 253:Source/rme_benchmark.c ****     * total:16.57
 254:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 255:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 256:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 257:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 258:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 259:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 260:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 261:Source/rme_benchmark.c ****     */
 262:Source/rme_benchmark.c ****     //_RME_Tsc_Init();
 263:Source/rme_benchmark.c ****     //for(Count=0;Count<10000;Count++)
 264:Source/rme_benchmark.c ****     start=get_time();
 1418              		.loc 1 264 11
 1419 00ac FEFFFFEB 		bl	get_time
 1420 00b0 0020A0E1 		mov	r2, r0
 1421              		.loc 1 264 10 discriminator 1
 1422 00b4 003000E3 		movw	r3, #:lower16:start
 1423 00b8 003040E3 		movt	r3, #:upper16:start
 1424 00bc 002083E5 		str	r2, [r3]
 265:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 1425              		.loc 1 265 14
 1426 00c0 0030A0E3 		mov	r3, #0
 1427 00c4 08300BE5 		str	r3, [fp, #-8]
 1428              		.loc 1 265 5
 1429 00c8 050000EA 		b	.L67
 1430              	.L68:
 266:Source/rme_benchmark.c ****     {
 267:Source/rme_benchmark.c ****          RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 1431              		.loc 1 267 10
 1432 00cc 0010A0E3 		mov	r1, #0
 1433 00d0 0800A0E3 		mov	r0, #8
 1434 00d4 FEFFFFEB 		bl	RME_Thd_Swt
 265:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 43


 1435              		.loc 1 265 34 discriminator 3
 1436 00d8 08301BE5 		ldr	r3, [fp, #-8]
 1437 00dc 013083E2 		add	r3, r3, #1
 1438 00e0 08300BE5 		str	r3, [fp, #-8]
 1439              	.L67:
 265:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 1440              		.loc 1 265 22 discriminator 1
 1441 00e4 08301BE5 		ldr	r3, [fp, #-8]
 1442 00e8 0F2702E3 		movw	r2, #9999
 1443 00ec 020053E1 		cmp	r3, r2
 1444 00f0 F5FFFFDA 		ble	.L68
 268:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 269:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 270:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 271:Source/rme_benchmark.c ****                           0,
 272:Source/rme_benchmark.c ****                           0);*/
 273:Source/rme_benchmark.c ****         //Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 274:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 275:Source/rme_benchmark.c ****        // Time[Count]=Temp-8;
 276:Source/rme_benchmark.c ****         //USR_DBG_S("\r\nTry to switch to that thread  retval= ");
 277:Source/rme_benchmark.c ****         //USR_DBG_I(Retval);
 278:Source/rme_benchmark.c ****     }
 279:Source/rme_benchmark.c ****     
 280:Source/rme_benchmark.c ****     end=get_time();
 1445              		.loc 1 280 9
 1446 00f4 FEFFFFEB 		bl	get_time
 1447 00f8 0020A0E1 		mov	r2, r0
 1448              		.loc 1 280 8 discriminator 1
 1449 00fc 003000E3 		movw	r3, #:lower16:end
 1450 0100 003040E3 		movt	r3, #:upper16:end
 1451 0104 002083E5 		str	r2, [r3]
 281:Source/rme_benchmark.c ****     USR_DBG_S("\r\n swt 10000 times time= ");
 1452              		.loc 1 281 5
 1453 0108 000000E3 		movw	r0, #:lower16:.LC16
 1454 010c 000040E3 		movt	r0, #:upper16:.LC16
 1455 0110 FEFFFFEB 		bl	USR_DBG_S
 282:Source/rme_benchmark.c ****     USR_DBG_I((end-start)*2);
 1456              		.loc 1 282 19
 1457 0114 003000E3 		movw	r3, #:lower16:end
 1458 0118 003040E3 		movt	r3, #:upper16:end
 1459 011c 002093E5 		ldr	r2, [r3]
 1460 0120 003000E3 		movw	r3, #:lower16:start
 1461 0124 003040E3 		movt	r3, #:upper16:start
 1462 0128 003093E5 		ldr	r3, [r3]
 1463 012c 033042E0 		sub	r3, r2, r3
 1464              		.loc 1 282 26
 1465 0130 8330A0E1 		lsl	r3, r3, #1
 1466              		.loc 1 282 5
 1467 0134 0300A0E1 		mov	r0, r3
 1468 0138 FEFFFFEB 		bl	USR_DBG_I
 283:Source/rme_benchmark.c ****     USR_DBG_S("\r\n swt 1 times time= ");
 1469              		.loc 1 283 5
 1470 013c 000000E3 		movw	r0, #:lower16:.LC17
 1471 0140 000040E3 		movt	r0, #:upper16:.LC17
 1472 0144 FEFFFFEB 		bl	USR_DBG_S
 284:Source/rme_benchmark.c ****     USR_DBG_I((end-start)/20000*2);
 1473              		.loc 1 284 19
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 44


 1474 0148 003000E3 		movw	r3, #:lower16:end
 1475 014c 003040E3 		movt	r3, #:upper16:end
 1476 0150 002093E5 		ldr	r2, [r3]
 1477 0154 003000E3 		movw	r3, #:lower16:start
 1478 0158 003040E3 		movt	r3, #:upper16:start
 1479 015c 003093E5 		ldr	r3, [r3]
 1480 0160 032042E0 		sub	r2, r2, r3
 1481              		.loc 1 284 26
 1482 0164 593701E3 		movw	r3, #5977
 1483 0168 B7314DE3 		movt	r3, 53687
 1484 016c 932283E0 		umull	r2, r3, r3, r2
 1485 0170 2337A0E1 		lsr	r3, r3, #14
 1486              		.loc 1 284 32
 1487 0174 8330A0E1 		lsl	r3, r3, #1
 1488              		.loc 1 284 5
 1489 0178 0300A0E1 		mov	r0, r3
 1490 017c FEFFFFEB 		bl	USR_DBG_I
 285:Source/rme_benchmark.c ****     USR_DBG_S("\r\ntest done ");
 1491              		.loc 1 285 5
 1492 0180 000000E3 		movw	r0, #:lower16:.LC18
 1493 0184 000040E3 		movt	r0, #:upper16:.LC18
 1494 0188 FEFFFFEB 		bl	USR_DBG_S
 1495              	.L69:
 286:Source/rme_benchmark.c **** 
 287:Source/rme_benchmark.c ****     // test sig_snd/sig_rcv
 288:Source/rme_benchmark.c **** 
 289:Source/rme_benchmark.c **** 
 290:Source/rme_benchmark.c **** 
 291:Source/rme_benchmark.c ****     while(1);
 1496              		.loc 1 291 10
 1497 018c FEFFFFEA 		b	.L69
 1498              	.L71:
 1499              		.align	2
 1500              	.L70:
 1501 0190 401F0000 		.word	RME_Stack1+8000
 1502              		.cfi_endproc
 1503              	.LFE21:
 1505              		.section	.text.RME_Diff_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 1506              		.align	2
 1507              		.global	RME_Diff_Prc_Thd_Switch_Test_Thd
 1508              		.syntax unified
 1509              		.arm
 1511              	RME_Diff_Prc_Thd_Switch_Test_Thd:
 1512              	.LFB22:
 292:Source/rme_benchmark.c **** }
 293:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test ********************************/
 294:Source/rme_benchmark.c **** 
 295:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test_Thd *********************************
 296:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
 297:Source/rme_benchmark.c **** Input       : None.
 298:Source/rme_benchmark.c **** Output      : None.
 299:Source/rme_benchmark.c **** Return      : None.
 300:Source/rme_benchmark.c **** ******************************************************************************/
 301:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
 302:Source/rme_benchmark.c **** {
 1513              		.loc 1 302 1
 1514              		.cfi_startproc
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 45


 1515              		@ args = 0, pretend = 0, frame = 24
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517 0000 00482DE9 		push	{fp, lr}
 1518              		.cfi_def_cfa_offset 8
 1519              		.cfi_offset 11, -8
 1520              		.cfi_offset 14, -4
 1521 0004 04B08DE2 		add	fp, sp, #4
 1522              		.cfi_def_cfa 11, 4
 1523 0008 18D04DE2 		sub	sp, sp, #24
 1524 000c 10000BE5 		str	r0, [fp, #-16]
 1525 0010 14100BE5 		str	r1, [fp, #-20]
 1526 0014 18200BE5 		str	r2, [fp, #-24]
 1527 0018 1C300BE5 		str	r3, [fp, #-28]
 1528              	.L73:
 303:Source/rme_benchmark.c ****     ret_t Retval;
 304:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
 305:Source/rme_benchmark.c ****     while(1)
 306:Source/rme_benchmark.c ****     {
 307:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 308:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
 309:Source/rme_benchmark.c ****                           0,
 310:Source/rme_benchmark.c ****                           0);*/
 311:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 1529              		.loc 1 311 16 discriminator 1
 1530 001c 0010A0E3 		mov	r1, #0
 1531 0020 0300A0E3 		mov	r0, #3
 1532 0024 FEFFFFEB 		bl	RME_Thd_Swt
 1533 0028 08000BE5 		str	r0, [fp, #-8]
 1534              		.loc 1 311 15
 1535 002c FAFFFFEA 		b	.L73
 1536              		.cfi_endproc
 1537              	.LFE22:
 1539              		.section	.text.RME_Diff_Prc_Thd_Switch_Test,"ax",%progbits
 1540              		.align	2
 1541              		.global	RME_Diff_Prc_Thd_Switch_Test
 1542              		.syntax unified
 1543              		.arm
 1545              	RME_Diff_Prc_Thd_Switch_Test:
 1546              	.LFB23:
 312:Source/rme_benchmark.c ****     }
 313:Source/rme_benchmark.c **** }
 314:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test_Thd ****************************/
 315:Source/rme_benchmark.c **** 
 316:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test *************************************
 317:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 318:Source/rme_benchmark.c **** Input       : None.
 319:Source/rme_benchmark.c **** Output      : None.
 320:Source/rme_benchmark.c **** Return      : None.
 321:Source/rme_benchmark.c **** ******************************************************************************/
 322:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test(void)
 323:Source/rme_benchmark.c **** {
 1547              		.loc 1 323 1
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 16
 1550              		@ frame_needed = 1, uses_anonymous_args = 0
 1551 0000 00482DE9 		push	{fp, lr}
 1552              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 46


 1553              		.cfi_offset 11, -8
 1554              		.cfi_offset 14, -4
 1555 0004 04B08DE2 		add	fp, sp, #4
 1556              		.cfi_def_cfa 11, 4
 1557 0008 18D04DE2 		sub	sp, sp, #24
 324:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 325:Source/rme_benchmark.c ****     ret_t Retval;
 326:Source/rme_benchmark.c ****     cnt_t Count;
 327:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 328:Source/rme_benchmark.c ****     ptr_t Temp;
 329:Source/rme_benchmark.c ****     ptr_t Frontier;
 330:Source/rme_benchmark.c ****     
 331:Source/rme_benchmark.c ****     Frontier=RME_BOOT_BENCH_KOM_FRONTIER;
 1558              		.loc 1 331 13
 1559 000c 093AA0E3 		mov	r3, #36864
 1560 0010 0C300BE5 		str	r3, [fp, #-12]
 332:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 333:Source/rme_benchmark.c ****     Stack_Addr=_RME_Stack_Init((ptr_t)(&RME_Stack1[2047]),
 1561              		.loc 1 333 16
 1562 0014 54009FE5 		ldr	r0, .L78
 1563 0018 001000E3 		movw	r1, #:lower16:RME_Thd_Stub
 1564 001c 001040E3 		movt	r1, #:upper16:RME_Thd_Stub
 1565 0020 0430A0E3 		mov	r3, #4
 1566 0024 04308DE5 		str	r3, [sp, #4]
 1567 0028 0330A0E3 		mov	r3, #3
 1568 002c 00308DE5 		str	r3, [sp]
 1569 0030 0230A0E3 		mov	r3, #2
 1570 0034 0120A0E3 		mov	r2, #1
 1571 0038 FEFFFFEB 		bl	_RME_Stack_Init
 1572 003c 10000BE5 		str	r0, [fp, #-16]
 334:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 335:Source/rme_benchmark.c ****                                1, 2, 3, 4);
 336:Source/rme_benchmark.c ****     
 337:Source/rme_benchmark.c ****     /* Create the page table for the whole address space range */
 338:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 339:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|
 340:Source/rme_benchmark.c ****                       RME_PARAM_O1(29)|RME_PARAM_O0(3),
 341:Source/rme_benchmark.c ****                       Frontier,
 342:Source/rme_benchmark.c ****                       1);*/
 343:Source/rme_benchmark.c **** //    Frontier+=;
 344:Source/rme_benchmark.c **** //    /* Create the page table for the SRAM range */
 345:Source/rme_benchmark.c **** //    Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 346:Source/rme_benchmark.c **** //                      RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_SRAM)|
 347:Source/rme_benchmark.c **** //                      RME_PARAM_O1(16)|RME_PARAM_O0(3),
 348:Source/rme_benchmark.c **** //                      Frontier,
 349:Source/rme_benchmark.c **** //                      0x20000001);*/
 350:Source/rme_benchmark.c **** //    Frontier+=;
 351:Source/rme_benchmark.c **** //    /* Map the pages into the top-level and the second-level */
 352:Source/rme_benchmark.c **** //    RME_CAP_OP(RME_SVC_PGT_ADD,0,
 353:Source/rme_benchmark.c **** //               RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|0,
 354:Source/rme_benchmark.c **** //               RME_PARAM_D1(RME_BOOT_INIT_PGT)|0,
 355:Source/rme_benchmark.c **** //               |0)*/
 356:Source/rme_benchmark.c ****                       
 357:Source/rme_benchmark.c ****                   
 358:Source/rme_benchmark.c ****     
 359:Source/rme_benchmark.c ****     
 360:Source/rme_benchmark.c ****     
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 47


 361:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 362:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 363:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 364:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 365:Source/rme_benchmark.c ****     
 366:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 367:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,0,
 368:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 369:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 370:Source/rme_benchmark.c ****                       0);*/
 371:Source/rme_benchmark.c ****     
 372:Source/rme_benchmark.c ****     /* Set the execution information */
 373:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,0,
 374:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 375:Source/rme_benchmark.c ****                       (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 376:Source/rme_benchmark.c ****                       Stack_Addr);*/
 377:Source/rme_benchmark.c ****                       
 378:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 379:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,0,
 380:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 381:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 382:Source/rme_benchmark.c ****                       10000000);*/
 383:Source/rme_benchmark.c ****     
 384:Source/rme_benchmark.c ****     /* Try to switch to that thread - should fail */
 385:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 386:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 387:Source/rme_benchmark.c ****                       0,
 388:Source/rme_benchmark.c ****                       0);*/
 389:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 390:Source/rme_benchmark.c ****     * composite 324. opted max:323
 391:Source/rme_benchmark.c ****     * all:33.0
 392:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 393:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 394:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 395:Source/rme_benchmark.c ****     * total:16.57
 396:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 397:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 398:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 399:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 400:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 401:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 402:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 403:Source/rme_benchmark.c ****     */
 404:Source/rme_benchmark.c ****     _RME_Tsc_Init();
 1573              		.loc 1 404 5
 1574 0040 FEFFFFEB 		bl	_RME_Tsc_Init
 405:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 1575              		.loc 1 405 14
 1576 0044 0030A0E3 		mov	r3, #0
 1577 0048 08300BE5 		str	r3, [fp, #-8]
 1578              		.loc 1 405 5
 1579 004c 020000EA 		b	.L75
 1580              	.L76:
 1581              		.loc 1 405 34 discriminator 3
 1582 0050 08301BE5 		ldr	r3, [fp, #-8]
 1583 0054 013083E2 		add	r3, r3, #1
 1584 0058 08300BE5 		str	r3, [fp, #-8]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 48


 1585              	.L75:
 1586              		.loc 1 405 22 discriminator 1
 1587 005c 08301BE5 		ldr	r3, [fp, #-8]
 1588 0060 0F2702E3 		movw	r2, #9999
 1589 0064 020053E1 		cmp	r3, r2
 1590 0068 F8FFFFDA 		ble	.L76
 1591              	.L77:
 406:Source/rme_benchmark.c ****     {
 407:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 408:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 409:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 410:Source/rme_benchmark.c ****                           0,
 411:Source/rme_benchmark.c ****                           0);*/
 412:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 413:Source/rme_benchmark.c ****         //Time[Count]=Temp-8;
 414:Source/rme_benchmark.c ****     }
 415:Source/rme_benchmark.c **** 
 416:Source/rme_benchmark.c **** 
 417:Source/rme_benchmark.c ****     while(1);
 1592              		.loc 1 417 10
 1593 006c FEFFFFEA 		b	.L77
 1594              	.L79:
 1595              		.align	2
 1596              	.L78:
 1597 0070 FC1F0000 		.word	RME_Stack1+8188
 1598              		.cfi_endproc
 1599              	.LFE23:
 1601              		.section	.rodata
 1602 0209 000000   		.align	2
 1603              	.LC19:
 1604 020c 0D0A5465 		.ascii	"\015\012Test begin!\000"
 1604      73742062 
 1604      6567696E 
 1604      2100
 1605 021a 0000     		.align	2
 1606              	.LC20:
 1607 021c 0D0A5465 		.ascii	"\015\012Test done!\000"
 1607      73742064 
 1607      6F6E6521 
 1607      00
 1608              		.section	.text.RME_Benchmark,"ax",%progbits
 1609              		.align	2
 1610              		.global	RME_Benchmark
 1611              		.syntax unified
 1612              		.arm
 1614              	RME_Benchmark:
 1615              	.LFB24:
 418:Source/rme_benchmark.c **** }
 419:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test ********************************/
 420:Source/rme_benchmark.c **** 
 421:Source/rme_benchmark.c **** /* Function:RME_Benchmark *****************************************************
 422:Source/rme_benchmark.c **** Description : The benchmark entry, also the init thread.
 423:Source/rme_benchmark.c **** Input       : None.
 424:Source/rme_benchmark.c **** Output      : None.
 425:Source/rme_benchmark.c **** Return      : None.
 426:Source/rme_benchmark.c **** ******************************************************************************/
 427:Source/rme_benchmark.c **** void RME_Benchmark(void)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 49


 428:Source/rme_benchmark.c **** {
 1616              		.loc 1 428 1
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 0
 1619              		@ frame_needed = 1, uses_anonymous_args = 0
 1620 0000 00482DE9 		push	{fp, lr}
 1621              		.cfi_def_cfa_offset 8
 1622              		.cfi_offset 11, -8
 1623              		.cfi_offset 14, -4
 1624 0004 04B08DE2 		add	fp, sp, #4
 1625              		.cfi_def_cfa 11, 4
 429:Source/rme_benchmark.c **** 	Cur_addr=RME_BOOT_BENCH_KOM_FRONTIER;
 1626              		.loc 1 429 10
 1627 0008 003000E3 		movw	r3, #:lower16:Cur_addr
 1628 000c 003040E3 		movt	r3, #:upper16:Cur_addr
 1629 0010 092AA0E3 		mov	r2, #36864
 1630 0014 002083E5 		str	r2, [r3]
 430:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTest begin!");
 1631              		.loc 1 430 5
 1632 0018 000000E3 		movw	r0, #:lower16:.LC19
 1633 001c 000040E3 		movt	r0, #:upper16:.LC19
 1634 0020 FEFFFFEB 		bl	USR_DBG_S
 431:Source/rme_benchmark.c **** 
 432:Source/rme_benchmark.c ****     //RME_Same_Prc_Thd_Sig_Testinit();
 433:Source/rme_benchmark.c ****     RME_Same_Prc_Thd_Switch_Test();
 1635              		.loc 1 433 5
 1636 0024 FEFFFFEB 		bl	RME_Same_Prc_Thd_Switch_Test
 434:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTest done!");
 1637              		.loc 1 434 5
 1638 0028 000000E3 		movw	r0, #:lower16:.LC20
 1639 002c 000040E3 		movt	r0, #:upper16:.LC20
 1640 0030 FEFFFFEB 		bl	USR_DBG_S
 1641              	.L81:
 435:Source/rme_benchmark.c ****     while(1);
 1642              		.loc 1 435 10
 1643 0034 FEFFFFEA 		b	.L81
 1644              		.cfi_endproc
 1645              	.LFE24:
 1647              		.text
 1648              	.Letext0:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 rme_benchmark.c
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:25     .bss.RME_Stack1:00000000 RME_Stack1
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:22     .bss.RME_Stack1:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:32     .bss.RME_Stack2:00000000 RME_Stack2
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:29     .bss.RME_Stack2:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:39     .bss.RME_Stack3:00000000 RME_Stack3
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:36     .bss.RME_Stack3:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:46     .bss.RME_Stack4:00000000 RME_Stack4
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:43     .bss.RME_Stack4:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:53     .bss.RME_Stack5:00000000 RME_Stack5
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:50     .bss.RME_Stack5:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:60     .bss.Time:00000000 Time
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:57     .bss.Time:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:67     .bss.RME_Bench_Buf:00000000 RME_Bench_Buf
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:64     .bss.RME_Bench_Buf:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:70     .text.__USR_Putchar:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:75     .text.__USR_Putchar:00000000 __USR_Putchar
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:119    .text.USR_DBG_I:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:124    .text.USR_DBG_I:00000000 USR_DBG_I
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:274    .text.USR_DBG_H:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:279    .text.USR_DBG_H:00000000 USR_DBG_H
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:395    .text.USR_DBG_S:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:400    .text.USR_DBG_S:00000000 USR_DBG_S
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:462    .text.get_time:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:467    .text.get_time:00000000 get_time
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:501    .text.RME_Thd_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:506    .text.RME_Thd_Crt:00000000 RME_Thd_Crt
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:552    .text.RME_Thd_Exec_Set:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:557    .text.RME_Thd_Exec_Set:00000000 RME_Thd_Exec_Set
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:592    .text.RME_Thd_Time_Xfer:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:597    .text.RME_Thd_Time_Xfer:00000000 RME_Thd_Time_Xfer
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:630    .text.RME_Thd_Sched_Bind:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:635    .text.RME_Thd_Sched_Bind:00000000 RME_Thd_Sched_Bind
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:678    .text.RME_Thd_Swt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:683    .text.RME_Thd_Swt:00000000 RME_Thd_Swt
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:715    .text.RME_Sig_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:720    .text.RME_Sig_Crt:00000000 RME_Sig_Crt
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:753    .text.RME_Sig_Del:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:758    .text.RME_Sig_Del:00000000 RME_Sig_Del
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:791    .text.RME_Sig_Snd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:796    .text.RME_Sig_Snd:00000000 RME_Sig_Snd
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:827    .text.RME_Sig_Rcv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:832    .text.RME_Sig_Rcv:00000000 RME_Sig_Rcv
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:868    .bss.Cur_addr:00000000 Cur_addr
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:865    .bss.Cur_addr:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:875    .bss.start:00000000 start
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:872    .bss.start:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:882    .bss.end:00000000 end
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:879    .bss.end:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:885    .text._RME_Tsc_Init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:890    .text._RME_Tsc_Init:00000000 _RME_Tsc_Init
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:915    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:920    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 RME_Same_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:946    .rodata:00000000 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:947    .rodata:00000000 .LC0
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:950    .rodata:00000020 .LC1
ARM GAS  C:\Users\even\AppData\Local\Temp\ccCeLkn7.s 			page 51


C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:953    .rodata:00000040 .LC2
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:956    .rodata:0000006c .LC3
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:959    .rodata:00000098 .LC4
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:962    .rodata:0000009c .LC5
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:965    .text.RME_Thd_Create:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:970    .text.RME_Thd_Create:00000000 RME_Thd_Create
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1078   .rodata:000000c8 .LC6
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1081   .rodata:000000e0 .LC7
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1084   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1089   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_send
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1120   .rodata:000000e8 .LC8
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1123   .rodata:00000104 .LC9
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1126   .rodata:00000120 .LC10
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1129   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1134   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_recv
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1178   .rodata:0000012c .LC11
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1181   .rodata:00000140 .LC12
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1184   .rodata:0000016c .LC13
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1187   .rodata:00000180 .LC14
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1190   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1195   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_main
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1244   .rodata:0000019c .LC15
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1247   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1252   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 RME_Same_Prc_Thd_Sig_Testinit
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1338   .text.RME_Same_Prc_Thd_Sig_Testinit:000000fc $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1345   .rodata:000001c8 .LC16
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1348   .rodata:000001e4 .LC17
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1351   .rodata:000001fc .LC18
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1354   .text.RME_Same_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1359   .text.RME_Same_Prc_Thd_Switch_Test:00000000 RME_Same_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1501   .text.RME_Same_Prc_Thd_Switch_Test:00000190 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1506   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1511   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 RME_Diff_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1540   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1545   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 RME_Diff_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1597   .text.RME_Diff_Prc_Thd_Switch_Test:00000070 $d
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1603   .rodata:0000020c .LC19
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1606   .rodata:0000021c .LC20
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1609   .text.RME_Benchmark:00000000 $a
C:\Users\even\AppData\Local\Temp\ccCeLkn7.s:1614   .text.RME_Benchmark:00000000 RME_Benchmark
                           .group:00000000 wm4.0.3b9f63523dc4e8d86e863c7e7e762be7
                           .group:00000000 wm4.rme.h.11.105c42759f88404be372052d8d99e5e6
                           .group:00000000 wm4.benchmark.h.4.799f3fca7e90d690e16e3deb95cfd7c1

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_idivmod
RME_Svc
RME_Thd_Stub
_RME_Stack_Init
