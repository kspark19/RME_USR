ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 1


   1              		.cpu cortex-a9
   2              		.arch armv7-a
   3              		.fpu neon-fp16
   4              		.arch_extension mp
   5              		.arch_extension sec
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"rme_benchmark.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Source/rme_benchmark.c"
  20              		.global	RME_Stack
  21              		.section	.bss.RME_Stack,"aw",%nobits
  22              		.align	2
  25              	RME_Stack:
  26 0000 00000000 		.space	8192
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.global	Time
  28              		.section	.bss.Time,"aw",%nobits
  29              		.align	2
  32              	Time:
  33 0000 00000000 		.space	20000
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	RME_Bench_Buf
  35              		.section	.bss.RME_Bench_Buf,"aw",%nobits
  36              		.align	2
  39              	RME_Bench_Buf:
  40 0000 00000000 		.space	1024
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.section	.text.__USR_Putchar,"ax",%progbits
  42              		.align	2
  43              		.global	__USR_Putchar
  44              		.syntax unified
  45              		.arm
  47              	__USR_Putchar:
  48              	.LFB0:
  49              		.file 2 "Include/benchmark.h"
   1:Include/benchmark.h **** 
   2:Include/benchmark.h **** #include"rme.h"
   3:Include/benchmark.h **** /* Word size */
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 2


   4:Include/benchmark.h **** #define RME_WORD_BIT                                RME_POW2(RME_WORD_ORDER)
   5:Include/benchmark.h **** #define RME_WORD_BYTE                               (RME_WORD_BIT>>3)
   6:Include/benchmark.h **** #define RME_WORD_BIT_O1                             (RME_WORD_BYTE)
   7:Include/benchmark.h **** #define RME_WORD_BIT_O2                             (RME_WORD_BYTE*2U)
   8:Include/benchmark.h **** #define RME_WORD_BIT_O3                             (RME_WORD_BYTE*3U)
   9:Include/benchmark.h **** #define RME_WORD_BIT_O4                             (RME_WORD_BYTE*4U)
  10:Include/benchmark.h **** #define RME_WORD_BIT_O5                             (RME_WORD_BYTE*5U)
  11:Include/benchmark.h **** #define RME_WORD_BIT_O6                             (RME_WORD_BYTE*6U)
  12:Include/benchmark.h **** #define RME_WORD_BIT_O7                             (RME_WORD_BYTE*7U)
  13:Include/benchmark.h **** #define RME_WORD_BIT_Q1                             RME_WORD_BIT_O2
  14:Include/benchmark.h **** #define RME_WORD_BIT_Q2                             RME_WORD_BIT_O4
  15:Include/benchmark.h **** #define RME_WORD_BIT_Q3                             RME_WORD_BIT_O6
  16:Include/benchmark.h **** #define RME_WORD_BIT_D1                             RME_WORD_BIT_Q2
  17:Include/benchmark.h **** /* Thread creation */
  18:Include/benchmark.h **** #define RME_THD_SVC(ATTR,IS_HYP,SVC)                (RME_FIELD(ATTR,7U)|RME_FIELD(IS_HYP,6U)|(SVC))
  19:Include/benchmark.h **** /* UART peripheral address */
  20:Include/benchmark.h **** #define RME_A7A_UART_CONTROL      					(*((volatile unsigned int*)(0xE0001000)))
  21:Include/benchmark.h **** #define RME_A7A_UART_MODE         					(*((volatile unsigned int*)(0xE0001004)))
  22:Include/benchmark.h **** #define RME_A7A_UART_BRGEN        					(*((volatile unsigned int*)(0xE0001018)))
  23:Include/benchmark.h **** #define RME_A7A_UART_STATUS       					(*((volatile unsigned int*)(0xE000102C)))
  24:Include/benchmark.h **** #define RME_A7A_UART_FIFO         					(*((volatile unsigned int*)(0xE0001030)))
  25:Include/benchmark.h **** #define RME_A7A_UART_BRDIV        					(*((volatile unsigned int*)(0xE0001034)))
  26:Include/benchmark.h **** #define RME_A7A_UART_STATUS_TXE   					(1U<<3)
  27:Include/benchmark.h **** //#define RME_DBG_S(STR)                              RME_Str_Print((const signed char*)(STR))
  28:Include/benchmark.h **** /* NULL */
  29:Include/benchmark.h **** #define RME_NULL 									0
  30:Include/benchmark.h **** 
  31:Include/benchmark.h **** #define RME_A7A_PUTCHAR(CHAR) \
  32:Include/benchmark.h **** do \
  33:Include/benchmark.h **** { \
  34:Include/benchmark.h ****     while((RME_A7A_UART_STATUS&RME_A7A_UART_STATUS_TXE)==0); \
  35:Include/benchmark.h **** 	RME_A7A_UART_FIFO=(CHAR); \
  36:Include/benchmark.h **** } \
  37:Include/benchmark.h **** while(0)
  38:Include/benchmark.h **** 
  39:Include/benchmark.h **** /* Define ********************************************************************/
  40:Include/benchmark.h **** /* Types */
  41:Include/benchmark.h **** typedef signed int                          s32;
  42:Include/benchmark.h **** typedef signed short                        s16;
  43:Include/benchmark.h **** typedef signed char                         s8;
  44:Include/benchmark.h **** typedef unsigned int                        u32;
  45:Include/benchmark.h **** typedef unsigned short                      u16;
  46:Include/benchmark.h **** typedef unsigned char                       u8;
  47:Include/benchmark.h **** typedef s32                                 tid_t;
  48:Include/benchmark.h **** typedef u32                       			ptr_t;
  49:Include/benchmark.h **** typedef s32                       			cnt_t;
  50:Include/benchmark.h **** typedef s32 								cid_t;
  51:Include/benchmark.h **** typedef s32                        			ret_t;
  52:Include/benchmark.h **** 
  53:Include/benchmark.h **** #define BENCHMARK_STACK_SIZE 4096
  54:Include/benchmark.h **** /* System service stub */
  55:Include/benchmark.h **** //#define RME_CAP_OP(OP,CAPID,ARG1,ARG2,ARG3) RME_Svc(((OP)<<(sizeof(ptr_t)*4)|(CAPID)),ARG1,ARG2,A
  56:Include/benchmark.h **** #define RME_PARAM_D_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*4))
  57:Include/benchmark.h **** #define RME_PARAM_Q_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*6))
  58:Include/benchmark.h **** #define RME_PARAM_O_MASK                    (((ptr_t)(-1))>>(sizeof(ptr_t)*7))
  59:Include/benchmark.h **** /* The parameter passing - not to be confused with kernel macros. These macros just place the param
  60:Include/benchmark.h **** #define RME_PARAM_D1(X)                     (((X)&RME_PARAM_D_MASK)<<(sizeof(ptr_t)*4))
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 3


  61:Include/benchmark.h **** #define RME_PARAM_D0(X)                     ((X)&RME_PARAM_D_MASK)
  62:Include/benchmark.h **** 
  63:Include/benchmark.h **** #define RME_PARAM_Q3(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*6))
  64:Include/benchmark.h **** #define RME_PARAM_Q2(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*4))
  65:Include/benchmark.h **** #define RME_PARAM_Q1(X)                     (((X)&RME_PARAM_Q_MASK)<<(sizeof(ptr_t)*2))
  66:Include/benchmark.h **** #define RME_PARAM_Q0(X)                     ((X)&RME_PARAM_Q_MASK)
  67:Include/benchmark.h **** 
  68:Include/benchmark.h **** #define RME_PARAM_O7(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*7))
  69:Include/benchmark.h **** #define RME_PARAM_O6(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*6))
  70:Include/benchmark.h **** #define RME_PARAM_O5(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*5))
  71:Include/benchmark.h **** #define RME_PARAM_O4(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*4))
  72:Include/benchmark.h **** #define RME_PARAM_O3(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*3))
  73:Include/benchmark.h **** #define RME_PARAM_O2(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*2))
  74:Include/benchmark.h **** #define RME_PARAM_O1(X)                     (((X)&RME_PARAM_O_MASK)<<(sizeof(ptr_t)*1))
  75:Include/benchmark.h **** #define RME_PARAM_O0(X)                     ((X)&RME_PARAM_O_MASK)
  76:Include/benchmark.h **** 
  77:Include/benchmark.h **** 
  78:Include/benchmark.h **** /* Bit mask */
  79:Include/benchmark.h **** #define RME_MASK_FULL                               (~((ptr_t)0U))
  80:Include/benchmark.h **** #define RME_MASK_WORD                               (~(RME_MASK_FULL<<RME_WORD_ORDER))
  81:Include/benchmark.h **** #define RME_MASK_WORD_O                             RME_MASK_END(RME_WORD_BIT_O1-1U)
  82:Include/benchmark.h **** #define RME_MASK_WORD_Q                             RME_MASK_END(RME_WORD_BIT_Q1-1U)
  83:Include/benchmark.h **** #define RME_MASK_WORD_D                             RME_MASK_END(RME_WORD_BIT_D1-1U)
  84:Include/benchmark.h **** /* Init thread infinite time marker */
  85:Include/benchmark.h **** #define RME_THD_INIT_TIME                           (RME_MASK_FULL>>1)
  86:Include/benchmark.h **** /* Other thread infinite time marker */
  87:Include/benchmark.h **** #define RME_THD_INF_TIME                            (RME_THD_INIT_TIME-1U)
  88:Include/benchmark.h **** 
  89:Include/benchmark.h **** /* Initial boot capabilities - This should be in accordnace with the kernel settings */
  90:Include/benchmark.h **** /* The capability table of the init process */
  91:Include/benchmark.h **** #define RME_BOOT_INIT_CPT                 		0
  92:Include/benchmark.h **** /* The top-level page table of the init process - always 4GB full range split into 8 pages */
  93:Include/benchmark.h **** #define RME_BOOT_INIT_PGT                 		1
  94:Include/benchmark.h **** /* The init process */
  95:Include/benchmark.h **** #define RME_BOOT_INIT_PRC                 		2
  96:Include/benchmark.h **** /* The init thread */
  97:Include/benchmark.h **** #define RME_BOOT_INIT_THD                 		3
  98:Include/benchmark.h **** /* The initial kernel function capability */
  99:Include/benchmark.h **** #define RME_BOOT_INIT_KFN          				4
 100:Include/benchmark.h **** /* The initial kernel memory capability */
 101:Include/benchmark.h **** #define RME_BOOT_INIT_KOM         				5
 102:Include/benchmark.h **** /* The initial timer endpoint */
 103:Include/benchmark.h **** #define RME_BOOT_INIT_TIMER      				6
 104:Include/benchmark.h **** /* The test objects */
 105:Include/benchmark.h **** #define RME_BOOT_BENCH_THD       				8
 106:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_TOP   				9
 107:Include/benchmark.h **** #define RME_BOOT_BENCH_PGT_SRAM  				10
 108:Include/benchmark.h **** #define RME_BOOT_BENCH_SEN_THD					14
 109:Include/benchmark.h **** #define RME_BOOT_BENCH_RCV_THD					15
 110:Include/benchmark.h **** #define RME_BOOT_BENCH_THD_MAIN					16
 111:Include/benchmark.h **** /* The top-level page table of the init process's SRAM */
 112:Include/benchmark.h **** #define RME_BOOT_INIT_PGT_SRAM    				11
 113:Include/benchmark.h **** /* the signal capability */
 114:Include/benchmark.h **** #define RME_BOOT_SIG_CPT						12
 115:Include/benchmark.h **** #define RME_BOOT_SIG_BENCH						13
 116:Include/benchmark.h **** /* Power of 2 */
 117:Include/benchmark.h **** #define RME_FIELD(VAL,POW)                      (((ptr_t)(VAL))<<(POW))
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 4


 118:Include/benchmark.h **** #define RME_POW2(POW)                           RME_FIELD(1U,POW)
 119:Include/benchmark.h **** /* The order of bits in one CPU machine word */
 120:Include/benchmark.h **** #define RME_WORD_ORDER            				(5U)
 121:Include/benchmark.h **** /* Word size */
 122:Include/benchmark.h **** #define RME_WORD_BIT                            RME_POW2(RME_WORD_ORDER)
 123:Include/benchmark.h **** /* Need to export the memory frontier! */
 124:Include/benchmark.h **** /* Need to export the flags as well ! */
 125:Include/benchmark.h **** /* Export the errno too */
 126:Include/benchmark.h **** #define RME_BOOT_BENCH_KOM_FRONTIER 			0x00009000U
 127:Include/benchmark.h **** /* The kernel-accessible virtual memory address,for this thread's register sets */
 128:Include/benchmark.h **** #define RME_BOOT_HYPER_KOM_VADDR                0x00000000U
 129:Include/benchmark.h **** //0x10005000
 130:Include/benchmark.h **** /* The stack safe size */
 131:Include/benchmark.h **** #define RME_STACK_SAFE_SIZE 					16
 132:Include/benchmark.h **** /* Doesn't want to receive the scheduler signal for the thread */
 133:Include/benchmark.h **** #define RME_CID_NULL   							0x8000
 134:Include/benchmark.h **** /* The maximum priority allowed for this thread. Once set, this cannot be changed. */
 135:Include/benchmark.h **** #define RME_THD_PRIO_MAX                        31
 136:Include/benchmark.h **** /*The thread ID*/
 137:Include/benchmark.h **** #define RME_TID_1                               1
 138:Include/benchmark.h **** #define RME_TID_2                               2
 139:Include/benchmark.h **** #define RME_TID_3                               3
 140:Include/benchmark.h **** #define RME_TID_4                               4
 141:Include/benchmark.h **** #define RME_TID_6                               6
 142:Include/benchmark.h **** 
 143:Include/benchmark.h **** /* End Define ****************************************************************/
 144:Include/benchmark.h **** 
 145:Include/benchmark.h **** 
 146:Include/benchmark.h **** 
 147:Include/benchmark.h **** /* Private Variables *********************************************************/
 148:Include/benchmark.h **** /* The stack of the threads - enough for 4 threads */
 149:Include/benchmark.h **** ptr_t RME_Stack[2048];
 150:Include/benchmark.h **** u16 Time[10000];
 151:Include/benchmark.h **** s8 RME_Bench_Buf[1024];
 152:Include/benchmark.h **** /* End Private Variables *****************************************************/
 153:Include/benchmark.h **** 
 154:Include/benchmark.h **** /* Function Prototypes *******************************************************/
 155:Include/benchmark.h **** extern ret_t RME_Svc(ptr_t Svc_Capid,ptr_t Param1, ptr_t Param2, ptr_t Param3);
 156:Include/benchmark.h **** /* System service stub */
 157:Include/benchmark.h **** #define RME_SVC(SVC,CID,ARG1,ARG2,ARG3)             RME_Svc(RME_FIELD(SVC,RME_WORD_BIT_D1)|((ptr_t)
 158:Include/benchmark.h **** extern cnt_t RME_Sprint_Uint(s8* Buffer,u32 Arg_Int);
 159:Include/benchmark.h **** extern void RME_Thd_Stub(void);
 160:Include/benchmark.h **** extern void RME_Inv_Stub(void);
 161:Include/benchmark.h **** ptr_t _RME_Stack_Init(ptr_t Stack, ptr_t Stub, ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Para
 162:Include/benchmark.h **** void RME_Benchmark(void);
 163:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1);
 164:Include/benchmark.h **** void RME_Same_Prc_Thd_Switch_Test(void);
 165:Include/benchmark.h **** /* End Function Prototypes ***************************************************/
 166:Include/benchmark.h **** 
 167:Include/benchmark.h **** /* Function:__USR_Putchar *****************************************************
 168:Include/benchmark.h **** Description : Output a character to console. In Cortex-M, under most circumstances,
 169:Include/benchmark.h ****               we should use the ITM for such outputs.
 170:Include/benchmark.h **** Input       : char Char - The character to print.
 171:Include/benchmark.h **** Output      : None.
 172:Include/benchmark.h **** Return      : rme_ptr_t - Always 0.
 173:Include/benchmark.h **** ******************************************************************************/
 174:Include/benchmark.h **** ptr_t __USR_Putchar(char Char)
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 5


 175:Include/benchmark.h **** {
  50              		.loc 2 175 1
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 8
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55 0000 04B02DE5 		str	fp, [sp, #-4]!
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 11, -4
  58 0004 00B08DE2 		add	fp, sp, #0
  59              		.cfi_def_cfa_register 11
  60 0008 0CD04DE2 		sub	sp, sp, #12
  61 000c 0030A0E1 		mov	r3, r0
  62 0010 05304BE5 		strb	r3, [fp, #-5]
  63              	.L2:
 176:Include/benchmark.h ****     RME_A7A_PUTCHAR(Char);
  64              		.loc 2 176 5 discriminator 1
  65 0014 2C3001E3 		movw	r3, #4140
  66 0018 00304EE3 		movt	r3, 57344
  67 001c 003093E5 		ldr	r3, [r3]
  68 0020 083003E2 		and	r3, r3, #8
  69 0024 000053E3 		cmp	r3, #0
  70 0028 F9FFFF0A 		beq	.L2
  71              		.loc 2 176 5 is_stmt 0 discriminator 2
  72 002c 303001E3 		movw	r3, #4144
  73 0030 00304EE3 		movt	r3, 57344
  74 0034 D5205BE1 		ldrsb	r2, [fp, #-5]
  75 0038 002083E5 		str	r2, [r3]
 177:Include/benchmark.h ****     return 0;
  76              		.loc 2 177 12 is_stmt 1
  77 003c 0030A0E3 		mov	r3, #0
 178:Include/benchmark.h **** }
  78              		.loc 2 178 1
  79 0040 0300A0E1 		mov	r0, r3
  80 0044 00D08BE2 		add	sp, fp, #0
  81              		.cfi_def_cfa_register 13
  82              		@ sp needed
  83 0048 04B09DE4 		ldr	fp, [sp], #4
  84              		.cfi_restore 11
  85              		.cfi_def_cfa_offset 0
  86 004c 1EFF2FE1 		bx	lr
  87              		.cfi_endproc
  88              	.LFE0:
  90              		.section	.text.USR_DBG_I,"ax",%progbits
  91              		.align	2
  92              		.global	USR_DBG_I
  93              		.syntax unified
  94              		.arm
  96              	USR_DBG_I:
  97              	.LFB1:
 179:Include/benchmark.h **** /* End Function __USR_Putchar ***************************************************/
 180:Include/benchmark.h **** 
 181:Include/benchmark.h **** 
 182:Include/benchmark.h **** /* Function:USR_DBG_I *****************************************************
 183:Include/benchmark.h **** Description : Print a signed integer on the debugging console. This integer is
 184:Include/benchmark.h ****               printed as decimal with sign.
 185:Include/benchmark.h **** Input       : rme_cnt_t Int - The integer to print.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 6


 186:Include/benchmark.h **** Output      : None.
 187:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 188:Include/benchmark.h **** ******************************************************************************/
 189:Include/benchmark.h **** cnt_t USR_DBG_I(cnt_t Int)
 190:Include/benchmark.h **** {
  98              		.loc 2 190 1
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 32
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102 0000 00482DE9 		push	{fp, lr}
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 11, -8
 105              		.cfi_offset 14, -4
 106 0004 04B08DE2 		add	fp, sp, #4
 107              		.cfi_def_cfa 11, 4
 108 0008 20D04DE2 		sub	sp, sp, #32
 109 000c 20000BE5 		str	r0, [fp, #-32]
 191:Include/benchmark.h ****     cnt_t Num;
 192:Include/benchmark.h ****     cnt_t Abs;
 193:Include/benchmark.h ****     cnt_t Iter;
 194:Include/benchmark.h ****     cnt_t Count;
 195:Include/benchmark.h ****     cnt_t Div;
 196:Include/benchmark.h **** 
 197:Include/benchmark.h ****     /* Exit on zero */
 198:Include/benchmark.h ****     if(Int==0)
 110              		.loc 2 198 7
 111 0010 20301BE5 		ldr	r3, [fp, #-32]
 112 0014 000053E3 		cmp	r3, #0
 113 0018 0300001A 		bne	.L5
 199:Include/benchmark.h ****     {
 200:Include/benchmark.h **** 
 201:Include/benchmark.h **** 
 202:Include/benchmark.h ****         __USR_Putchar('0');
 114              		.loc 2 202 9
 115 001c 3000A0E3 		mov	r0, #48
 116 0020 FEFFFFEB 		bl	__USR_Putchar
 203:Include/benchmark.h ****         return 1;
 117              		.loc 2 203 16
 118 0024 0130A0E3 		mov	r3, #1
 119 0028 500000EA 		b	.L6
 120              	.L5:
 204:Include/benchmark.h ****     }
 205:Include/benchmark.h ****     else
 206:Include/benchmark.h ****     {
 207:Include/benchmark.h **** 
 208:Include/benchmark.h ****         /* No action required */
 209:Include/benchmark.h ****     }
 210:Include/benchmark.h **** 
 211:Include/benchmark.h **** 
 212:Include/benchmark.h ****     /* Correct all negatives into positives */
 213:Include/benchmark.h ****     if(Int<0)
 121              		.loc 2 213 7
 122 002c 20301BE5 		ldr	r3, [fp, #-32]
 123 0030 000053E3 		cmp	r3, #0
 124 0034 070000AA 		bge	.L7
 214:Include/benchmark.h ****     {
 215:Include/benchmark.h **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 7


 216:Include/benchmark.h **** 
 217:Include/benchmark.h ****         __USR_Putchar('-');
 125              		.loc 2 217 9
 126 0038 2D00A0E3 		mov	r0, #45
 127 003c FEFFFFEB 		bl	__USR_Putchar
 218:Include/benchmark.h ****         Abs=-Int;
 128              		.loc 2 218 12
 129 0040 20301BE5 		ldr	r3, [fp, #-32]
 130 0044 003063E2 		rsb	r3, r3, #0
 131 0048 0C300BE5 		str	r3, [fp, #-12]
 219:Include/benchmark.h ****         Num=1;
 132              		.loc 2 219 12
 133 004c 0130A0E3 		mov	r3, #1
 134 0050 08300BE5 		str	r3, [fp, #-8]
 135 0054 030000EA 		b	.L8
 136              	.L7:
 220:Include/benchmark.h ****     }
 221:Include/benchmark.h ****     else
 222:Include/benchmark.h ****     {
 223:Include/benchmark.h **** 
 224:Include/benchmark.h **** 
 225:Include/benchmark.h ****         Abs=Int;
 137              		.loc 2 225 12
 138 0058 20301BE5 		ldr	r3, [fp, #-32]
 139 005c 0C300BE5 		str	r3, [fp, #-12]
 226:Include/benchmark.h ****         Num=0;
 140              		.loc 2 226 12
 141 0060 0030A0E3 		mov	r3, #0
 142 0064 08300BE5 		str	r3, [fp, #-8]
 143              	.L8:
 227:Include/benchmark.h ****     }
 228:Include/benchmark.h **** 
 229:Include/benchmark.h ****     /* How many digits are there? */
 230:Include/benchmark.h ****     Count=0;
 144              		.loc 2 230 10
 145 0068 0030A0E3 		mov	r3, #0
 146 006c 14300BE5 		str	r3, [fp, #-20]
 231:Include/benchmark.h ****     Div=1;
 147              		.loc 2 231 8
 148 0070 0130A0E3 		mov	r3, #1
 149 0074 18300BE5 		str	r3, [fp, #-24]
 232:Include/benchmark.h ****     Iter=Abs;
 150              		.loc 2 232 9
 151 0078 0C301BE5 		ldr	r3, [fp, #-12]
 152 007c 10300BE5 		str	r3, [fp, #-16]
 153              	.L12:
 233:Include/benchmark.h ****     while(1U)
 234:Include/benchmark.h ****     {
 235:Include/benchmark.h ****         Iter/=10;
 154              		.loc 2 235 13
 155 0080 10201BE5 		ldr	r2, [fp, #-16]
 156 0084 673606E3 		movw	r3, #26215
 157 0088 663646E3 		movt	r3, 26214
 158 008c 9312C3E0 		smull	r1, r3, r3, r2
 159 0090 4311A0E1 		asr	r1, r3, #2
 160 0094 C23FA0E1 		asr	r3, r2, #31
 161 0098 033041E0 		sub	r3, r1, r3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 8


 162 009c 10300BE5 		str	r3, [fp, #-16]
 236:Include/benchmark.h ****         Count++;
 163              		.loc 2 236 14
 164 00a0 14301BE5 		ldr	r3, [fp, #-20]
 165 00a4 013083E2 		add	r3, r3, #1
 166 00a8 14300BE5 		str	r3, [fp, #-20]
 237:Include/benchmark.h ****         if(Iter!=0)
 167              		.loc 2 237 11
 168 00ac 10301BE5 		ldr	r3, [fp, #-16]
 169 00b0 000053E3 		cmp	r3, #0
 170 00b4 0600000A 		beq	.L15
 238:Include/benchmark.h ****         {
 239:Include/benchmark.h **** 
 240:Include/benchmark.h **** 
 241:Include/benchmark.h ****             Div*=10;
 171              		.loc 2 241 16
 172 00b8 18201BE5 		ldr	r2, [fp, #-24]
 173 00bc 0230A0E1 		mov	r3, r2
 174 00c0 0331A0E1 		lsl	r3, r3, #2
 175 00c4 023083E0 		add	r3, r3, r2
 176 00c8 8330A0E1 		lsl	r3, r3, #1
 177 00cc 18300BE5 		str	r3, [fp, #-24]
 235:Include/benchmark.h ****         Count++;
 178              		.loc 2 235 13
 179 00d0 EAFFFFEA 		b	.L12
 180              	.L15:
 242:Include/benchmark.h ****         }
 243:Include/benchmark.h ****         else
 244:Include/benchmark.h ****         {
 245:Include/benchmark.h **** 
 246:Include/benchmark.h **** 
 247:Include/benchmark.h ****             break;
 181              		.loc 2 247 13
 182 00d4 00F020E3 		nop
 248:Include/benchmark.h ****         }
 249:Include/benchmark.h ****     }
 250:Include/benchmark.h ****     Num+=Count;
 183              		.loc 2 250 8
 184 00d8 08201BE5 		ldr	r2, [fp, #-8]
 185 00dc 14301BE5 		ldr	r3, [fp, #-20]
 186 00e0 033082E0 		add	r3, r2, r3
 187 00e4 08300BE5 		str	r3, [fp, #-8]
 251:Include/benchmark.h **** 
 252:Include/benchmark.h ****     /* Print the integer */
 253:Include/benchmark.h ****     Iter=Abs;
 188              		.loc 2 253 9
 189 00e8 0C301BE5 		ldr	r3, [fp, #-12]
 190 00ec 10300BE5 		str	r3, [fp, #-16]
 254:Include/benchmark.h **** 
 255:Include/benchmark.h ****     while(Count>0)
 191              		.loc 2 255 10
 192 00f0 1A0000EA 		b	.L13
 193              	.L14:
 256:Include/benchmark.h ****     {
 257:Include/benchmark.h ****         Count--;
 194              		.loc 2 257 14
 195 00f4 14301BE5 		ldr	r3, [fp, #-20]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 9


 196 00f8 013043E2 		sub	r3, r3, #1
 197 00fc 14300BE5 		str	r3, [fp, #-20]
 258:Include/benchmark.h ****         __USR_Putchar((s8)(Iter/Div)+'0');
 198              		.loc 2 258 32
 199 0100 18101BE5 		ldr	r1, [fp, #-24]
 200 0104 10001BE5 		ldr	r0, [fp, #-16]
 201 0108 FEFFFFEB 		bl	__aeabi_idiv
 202 010c 0030A0E1 		mov	r3, r0
 203              		.loc 2 258 23
 204 0110 7330EFE6 		uxtb	r3, r3
 205              		.loc 2 258 37
 206 0114 303083E2 		add	r3, r3, #48
 207 0118 7330EFE6 		uxtb	r3, r3
 208              		.loc 2 258 9
 209 011c 7330AFE6 		sxtb	r3, r3
 210 0120 0300A0E1 		mov	r0, r3
 211 0124 FEFFFFEB 		bl	__USR_Putchar
 259:Include/benchmark.h ****         Iter=Iter%Div;
 212              		.loc 2 259 13
 213 0128 10301BE5 		ldr	r3, [fp, #-16]
 214 012c 18101BE5 		ldr	r1, [fp, #-24]
 215 0130 0300A0E1 		mov	r0, r3
 216 0134 FEFFFFEB 		bl	__aeabi_idivmod
 217 0138 0130A0E1 		mov	r3, r1
 218 013c 10300BE5 		str	r3, [fp, #-16]
 260:Include/benchmark.h ****         Div/=10;
 219              		.loc 2 260 12
 220 0140 18201BE5 		ldr	r2, [fp, #-24]
 221 0144 673606E3 		movw	r3, #26215
 222 0148 663646E3 		movt	r3, 26214
 223 014c 9312C3E0 		smull	r1, r3, r3, r2
 224 0150 4311A0E1 		asr	r1, r3, #2
 225 0154 C23FA0E1 		asr	r3, r2, #31
 226 0158 033041E0 		sub	r3, r1, r3
 227 015c 18300BE5 		str	r3, [fp, #-24]
 228              	.L13:
 255:Include/benchmark.h ****     {
 229              		.loc 2 255 16
 230 0160 14301BE5 		ldr	r3, [fp, #-20]
 231 0164 000053E3 		cmp	r3, #0
 232 0168 E1FFFFCA 		bgt	.L14
 261:Include/benchmark.h ****     }
 262:Include/benchmark.h **** 
 263:Include/benchmark.h ****     return Num;
 233              		.loc 2 263 12
 234 016c 08301BE5 		ldr	r3, [fp, #-8]
 235              	.L6:
 264:Include/benchmark.h **** }
 236              		.loc 2 264 1
 237 0170 0300A0E1 		mov	r0, r3
 238 0174 04D04BE2 		sub	sp, fp, #4
 239              		.cfi_def_cfa 13, 8
 240              		@ sp needed
 241 0178 0088BDE8 		pop	{fp, pc}
 242              		.cfi_endproc
 243              	.LFE1:
 245              		.section	.text.USR_DBG_H,"ax",%progbits
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 10


 246              		.align	2
 247              		.global	USR_DBG_H
 248              		.syntax unified
 249              		.arm
 251              	USR_DBG_H:
 252              	.LFB2:
 265:Include/benchmark.h **** /* End Function:USR_DBG_I ************************************************/
 266:Include/benchmark.h **** 
 267:Include/benchmark.h **** /* Function:USR_DBG_H *****************************************************
 268:Include/benchmark.h **** Description : Print a unsigned integer on the debugging console. This integer is
 269:Include/benchmark.h ****               printed as hexadecimal.
 270:Include/benchmark.h **** Input       : rme_ptr_t Uint - The unsigned integer to print.
 271:Include/benchmark.h **** Output      : None.
 272:Include/benchmark.h **** Return      : rme_cnt_t - The length of the string printed.
 273:Include/benchmark.h **** ******************************************************************************/
 274:Include/benchmark.h **** cnt_t USR_DBG_H(ptr_t Uint)
 275:Include/benchmark.h **** {
 253              		.loc 2 275 1
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 24
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 00482DE9 		push	{fp, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 11, -8
 260              		.cfi_offset 14, -4
 261 0004 04B08DE2 		add	fp, sp, #4
 262              		.cfi_def_cfa 11, 4
 263 0008 18D04DE2 		sub	sp, sp, #24
 264 000c 18000BE5 		str	r0, [fp, #-24]
 276:Include/benchmark.h ****     ptr_t Iter;
 277:Include/benchmark.h ****     ptr_t Count;
 278:Include/benchmark.h ****     ptr_t Num;
 279:Include/benchmark.h **** 
 280:Include/benchmark.h ****     /* Exit on zero */
 281:Include/benchmark.h ****     if(Uint==0U)
 265              		.loc 2 281 7
 266 0010 18301BE5 		ldr	r3, [fp, #-24]
 267 0014 000053E3 		cmp	r3, #0
 268 0018 0300001A 		bne	.L17
 282:Include/benchmark.h ****     {
 283:Include/benchmark.h ****         __USR_Putchar('0');
 269              		.loc 2 283 9
 270 001c 3000A0E3 		mov	r0, #48
 271 0020 FEFFFFEB 		bl	__USR_Putchar
 284:Include/benchmark.h ****         return 1;
 272              		.loc 2 284 16
 273 0024 0130A0E3 		mov	r3, #1
 274 0028 330000EA 		b	.L18
 275              	.L17:
 285:Include/benchmark.h ****     }
 286:Include/benchmark.h ****     else
 287:Include/benchmark.h ****     {
 288:Include/benchmark.h ****         /* No action required */
 289:Include/benchmark.h ****     }
 290:Include/benchmark.h **** 
 291:Include/benchmark.h ****     /* Filter out all the zeroes */
 292:Include/benchmark.h ****     Count=0U;
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 11


 276              		.loc 2 292 10
 277 002c 0030A0E3 		mov	r3, #0
 278 0030 0C300BE5 		str	r3, [fp, #-12]
 293:Include/benchmark.h ****     Iter=Uint;
 279              		.loc 2 293 9
 280 0034 18301BE5 		ldr	r3, [fp, #-24]
 281 0038 08300BE5 		str	r3, [fp, #-8]
 294:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 282              		.loc 2 294 10
 283 003c 050000EA 		b	.L19
 284              	.L20:
 295:Include/benchmark.h ****     {
 296:Include/benchmark.h ****         Iter<<=4;
 285              		.loc 2 296 13
 286 0040 08301BE5 		ldr	r3, [fp, #-8]
 287 0044 0332A0E1 		lsl	r3, r3, #4
 288 0048 08300BE5 		str	r3, [fp, #-8]
 297:Include/benchmark.h ****         Count++;
 289              		.loc 2 297 14
 290 004c 0C301BE5 		ldr	r3, [fp, #-12]
 291 0050 013083E2 		add	r3, r3, #1
 292 0054 0C300BE5 		str	r3, [fp, #-12]
 293              	.L19:
 294:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 294              		.loc 2 294 16
 295 0058 08301BE5 		ldr	r3, [fp, #-8]
 296 005c 233EA0E1 		lsr	r3, r3, #28
 294:Include/benchmark.h ****     while((Iter>>(RME_WORD_BIT-4U))==0U)
 297              		.loc 2 294 36
 298 0060 000053E3 		cmp	r3, #0
 299 0064 F5FFFF0A 		beq	.L20
 298:Include/benchmark.h ****     }
 299:Include/benchmark.h **** 
 300:Include/benchmark.h ****     /* Count is the number of pts to print */
 301:Include/benchmark.h ****     Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
 300              		.loc 2 301 10
 301 0068 0C301BE5 		ldr	r3, [fp, #-12]
 302 006c 083063E2 		rsb	r3, r3, #8
 303 0070 0C300BE5 		str	r3, [fp, #-12]
 302:Include/benchmark.h ****     Num=Count;
 304              		.loc 2 302 8
 305 0074 0C301BE5 		ldr	r3, [fp, #-12]
 306 0078 10300BE5 		str	r3, [fp, #-16]
 303:Include/benchmark.h ****     while(Count>0U)
 307              		.loc 2 303 10
 308 007c 1A0000EA 		b	.L21
 309              	.L23:
 304:Include/benchmark.h ****     {
 305:Include/benchmark.h ****         Count--;
 310              		.loc 2 305 14
 311 0080 0C301BE5 		ldr	r3, [fp, #-12]
 312 0084 013043E2 		sub	r3, r3, #1
 313 0088 0C300BE5 		str	r3, [fp, #-12]
 306:Include/benchmark.h ****         Iter=(Uint>>(Count<<2U))&0x0FU;
 314              		.loc 2 306 27
 315 008c 0C301BE5 		ldr	r3, [fp, #-12]
 316 0090 0331A0E1 		lsl	r3, r3, #2
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 12


 317              		.loc 2 306 19
 318 0094 18201BE5 		ldr	r2, [fp, #-24]
 319 0098 3233A0E1 		lsr	r3, r2, r3
 320              		.loc 2 306 13
 321 009c 0F3003E2 		and	r3, r3, #15
 322 00a0 08300BE5 		str	r3, [fp, #-8]
 307:Include/benchmark.h ****         if(Iter<10U)
 323              		.loc 2 307 11
 324 00a4 08301BE5 		ldr	r3, [fp, #-8]
 325 00a8 090053E3 		cmp	r3, #9
 326 00ac 0700008A 		bhi	.L22
 308:Include/benchmark.h ****         {
 309:Include/benchmark.h **** 
 310:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'0');
 327              		.loc 2 310 27
 328 00b0 08301BE5 		ldr	r3, [fp, #-8]
 329 00b4 7330EFE6 		uxtb	r3, r3
 330              		.loc 2 310 35
 331 00b8 303083E2 		add	r3, r3, #48
 332 00bc 7330EFE6 		uxtb	r3, r3
 333              		.loc 2 310 13
 334 00c0 7330AFE6 		sxtb	r3, r3
 335 00c4 0300A0E1 		mov	r0, r3
 336 00c8 FEFFFFEB 		bl	__USR_Putchar
 337 00cc 060000EA 		b	.L21
 338              	.L22:
 311:Include/benchmark.h ****         }
 312:Include/benchmark.h ****         else
 313:Include/benchmark.h ****         {
 314:Include/benchmark.h **** 
 315:Include/benchmark.h ****             __USR_Putchar((s8)Iter+'A'-10);
 339              		.loc 2 315 27
 340 00d0 08301BE5 		ldr	r3, [fp, #-8]
 341 00d4 7330EFE6 		uxtb	r3, r3
 342              		.loc 2 315 39
 343 00d8 373083E2 		add	r3, r3, #55
 344 00dc 7330EFE6 		uxtb	r3, r3
 345              		.loc 2 315 13
 346 00e0 7330AFE6 		sxtb	r3, r3
 347 00e4 0300A0E1 		mov	r0, r3
 348 00e8 FEFFFFEB 		bl	__USR_Putchar
 349              	.L21:
 303:Include/benchmark.h ****     {
 350              		.loc 2 303 16
 351 00ec 0C301BE5 		ldr	r3, [fp, #-12]
 352 00f0 000053E3 		cmp	r3, #0
 353 00f4 E1FFFF1A 		bne	.L23
 316:Include/benchmark.h ****         }
 317:Include/benchmark.h ****     }
 318:Include/benchmark.h **** 
 319:Include/benchmark.h ****     return (cnt_t)Num;
 354              		.loc 2 319 12
 355 00f8 10301BE5 		ldr	r3, [fp, #-16]
 356              	.L18:
 320:Include/benchmark.h **** }
 357              		.loc 2 320 1
 358 00fc 0300A0E1 		mov	r0, r3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 13


 359 0100 04D04BE2 		sub	sp, fp, #4
 360              		.cfi_def_cfa 13, 8
 361              		@ sp needed
 362 0104 0088BDE8 		pop	{fp, pc}
 363              		.cfi_endproc
 364              	.LFE2:
 366              		.section	.text.USR_DBG_S,"ax",%progbits
 367              		.align	2
 368              		.global	USR_DBG_S
 369              		.syntax unified
 370              		.arm
 372              	USR_DBG_S:
 373              	.LFB3:
 321:Include/benchmark.h **** /* End Function:USR_DBG_H ************************************************/
 322:Include/benchmark.h **** cnt_t USR_DBG_S(const s8* String)
 323:Include/benchmark.h **** {
 374              		.loc 2 323 1
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 16
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 00482DE9 		push	{fp, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 11, -8
 381              		.cfi_offset 14, -4
 382 0004 04B08DE2 		add	fp, sp, #4
 383              		.cfi_def_cfa 11, 4
 384 0008 10D04DE2 		sub	sp, sp, #16
 385 000c 10000BE5 		str	r0, [fp, #-16]
 324:Include/benchmark.h ****     ptr_t Count;
 325:Include/benchmark.h **** 
 326:Include/benchmark.h ****     for(Count=0U;Count<255;Count++)
 386              		.loc 2 326 14
 387 0010 0030A0E3 		mov	r3, #0
 388 0014 08300BE5 		str	r3, [fp, #-8]
 389              		.loc 2 326 5
 390 0018 0E0000EA 		b	.L25
 391              	.L28:
 327:Include/benchmark.h ****     {
 328:Include/benchmark.h ****         if(String[Count]==(s8)'\0')
 392              		.loc 2 328 18
 393 001c 10201BE5 		ldr	r2, [fp, #-16]
 394 0020 08301BE5 		ldr	r3, [fp, #-8]
 395 0024 033082E0 		add	r3, r2, r3
 396 0028 D030D3E1 		ldrsb	r3, [r3]
 397              		.loc 2 328 11
 398 002c 000053E3 		cmp	r3, #0
 399 0030 0C00000A 		beq	.L30
 329:Include/benchmark.h ****         {
 330:Include/benchmark.h **** 
 331:Include/benchmark.h ****             break;
 332:Include/benchmark.h ****         }
 333:Include/benchmark.h ****         else
 334:Include/benchmark.h ****         {
 335:Include/benchmark.h ****             /* No action required */
 336:Include/benchmark.h ****         }
 337:Include/benchmark.h **** 
 338:Include/benchmark.h ****         __USR_Putchar(String[Count]);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 14


 400              		.loc 2 338 29
 401 0034 10201BE5 		ldr	r2, [fp, #-16]
 402 0038 08301BE5 		ldr	r3, [fp, #-8]
 403 003c 033082E0 		add	r3, r2, r3
 404              		.loc 2 338 9
 405 0040 D030D3E1 		ldrsb	r3, [r3]
 406 0044 0300A0E1 		mov	r0, r3
 407 0048 FEFFFFEB 		bl	__USR_Putchar
 326:Include/benchmark.h ****     {
 408              		.loc 2 326 33 discriminator 2
 409 004c 08301BE5 		ldr	r3, [fp, #-8]
 410 0050 013083E2 		add	r3, r3, #1
 411 0054 08300BE5 		str	r3, [fp, #-8]
 412              	.L25:
 326:Include/benchmark.h ****     {
 413              		.loc 2 326 23 discriminator 1
 414 0058 08301BE5 		ldr	r3, [fp, #-8]
 415 005c FE0053E3 		cmp	r3, #254
 416 0060 EDFFFF9A 		bls	.L28
 417 0064 000000EA 		b	.L27
 418              	.L30:
 331:Include/benchmark.h ****         }
 419              		.loc 2 331 13
 420 0068 00F020E3 		nop
 421              	.L27:
 339:Include/benchmark.h ****     }
 340:Include/benchmark.h **** 
 341:Include/benchmark.h ****     return (cnt_t)Count;
 422              		.loc 2 341 12
 423 006c 08301BE5 		ldr	r3, [fp, #-8]
 342:Include/benchmark.h **** }
 424              		.loc 2 342 1
 425 0070 0300A0E1 		mov	r0, r3
 426 0074 04D04BE2 		sub	sp, fp, #4
 427              		.cfi_def_cfa 13, 8
 428              		@ sp needed
 429 0078 0088BDE8 		pop	{fp, pc}
 430              		.cfi_endproc
 431              	.LFE3:
 433              		.section	.text.RME_Thd_Crt,"ax",%progbits
 434              		.align	2
 435              		.global	RME_Thd_Crt
 436              		.syntax unified
 437              		.arm
 439              	RME_Thd_Crt:
 440              	.LFB4:
 343:Include/benchmark.h **** 
 344:Include/benchmark.h **** 
 345:Include/benchmark.h **** 
 346:Include/benchmark.h **** /* Function:RME_Thd_Crt *******************************************************
 347:Include/benchmark.h **** Description : Create a thread. A thread is the minimal kernel-level execution
 348:Include/benchmark.h ****               unit.
 349:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table.
 350:Include/benchmark.h ****                                   2-Level.
 351:Include/benchmark.h ****               RME_cid_t Cap_Kom - The kernel memory capability.
 352:Include/benchmark.h ****                                   2-Level.
 353:Include/benchmark.h ****               RME_cid_t Cap_Thd - The capability slot that you want this newly
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 15


 354:Include/benchmark.h ****                                   created thread capability to be in.
 355:Include/benchmark.h ****                                   1-Level.
 356:Include/benchmark.h ****               RME_cid_t Cap_Prc - The capability to the process that it is in.
 357:Include/benchmark.h ****                                   2-Level.
 358:Include/benchmark.h ****               RME_ptr_t Prio_Max - The maximum priority allowed for this
 359:Include/benchmark.h ****                                    thread. Once set, this cannot be changed.
 360:Include/benchmark.h ****               RME_ptr_t Raddr - The relative virtual address to store the
 361:Include/benchmark.h ****                                 thread kernel object.
 362:Include/benchmark.h ****               RME_ptr_t Attr - The context attributes.
 363:Include/benchmark.h **** Output      : None.
 364:Include/benchmark.h **** Return      : RME_ret_t - If successful, the Thread ID; or an error code.
 365:Include/benchmark.h **** ******************************************************************************/
 366:Include/benchmark.h **** ret_t RME_Thd_Crt(cid_t Cap_Cpt,
 367:Include/benchmark.h ****                       cid_t Cap_Kom,
 368:Include/benchmark.h ****                       cid_t Cap_Thd,
 369:Include/benchmark.h ****                       cid_t Cap_Prc,
 370:Include/benchmark.h ****                       ptr_t Prio_Max,
 371:Include/benchmark.h ****                       ptr_t Raddr,
 372:Include/benchmark.h ****                       ptr_t Attr)
 373:Include/benchmark.h **** {
 441              		.loc 2 373 1
 442              		.cfi_startproc
 443              		@ args = 12, pretend = 0, frame = 16
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445 0000 00482DE9 		push	{fp, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 11, -8
 448              		.cfi_offset 14, -4
 449 0004 04B08DE2 		add	fp, sp, #4
 450              		.cfi_def_cfa 11, 4
 451 0008 10D04DE2 		sub	sp, sp, #16
 452 000c 08000BE5 		str	r0, [fp, #-8]
 453 0010 0C100BE5 		str	r1, [fp, #-12]
 454 0014 10200BE5 		str	r2, [fp, #-16]
 455 0018 14300BE5 		str	r3, [fp, #-20]
 374:Include/benchmark.h ****     return RME_SVC(RME_THD_SVC(Attr,0U,RME_SVC_THD_CRT),
 456              		.loc 2 374 12
 457 001c 0C309BE5 		ldr	r3, [fp, #12]
 458 0020 832BA0E1 		lsl	r2, r3, #23
 459 0024 08301BE5 		ldr	r3, [fp, #-8]
 460 0028 033082E1 		orr	r3, r2, r3
 461 002c 190883E3 		orr	r0, r3, #1638400
 462 0030 0C301BE5 		ldr	r3, [fp, #-12]
 463 0034 0328A0E1 		lsl	r2, r3, #16
 464 0038 10301BE5 		ldr	r3, [fp, #-16]
 465 003c 7330FFE6 		uxth	r3, r3
 466 0040 031082E1 		orr	r1, r2, r3
 467 0044 14301BE5 		ldr	r3, [fp, #-20]
 468 0048 0328A0E1 		lsl	r2, r3, #16
 469 004c 04309BE5 		ldr	r3, [fp, #4]
 470 0050 7330FFE6 		uxth	r3, r3
 471 0054 032082E1 		orr	r2, r2, r3
 472 0058 08309BE5 		ldr	r3, [fp, #8]
 473 005c FEFFFFEB 		bl	RME_Svc
 474 0060 0030A0E1 		mov	r3, r0
 375:Include/benchmark.h ****                    Cap_Cpt,
 376:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Kom)|RME_PARAM_D0(Cap_Thd),
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 16


 377:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Prc)|RME_PARAM_D0(Prio_Max),
 378:Include/benchmark.h ****                    Raddr);
 379:Include/benchmark.h **** }
 475              		.loc 2 379 1
 476 0064 0300A0E1 		mov	r0, r3
 477 0068 04D04BE2 		sub	sp, fp, #4
 478              		.cfi_def_cfa 13, 8
 479              		@ sp needed
 480 006c 0088BDE8 		pop	{fp, pc}
 481              		.cfi_endproc
 482              	.LFE4:
 484              		.section	.text.RME_Thd_Exec_Set,"ax",%progbits
 485              		.align	2
 486              		.global	RME_Thd_Exec_Set
 487              		.syntax unified
 488              		.arm
 490              	RME_Thd_Exec_Set:
 491              	.LFB5:
 380:Include/benchmark.h **** /* End Function:RME_Thd_Crt **************************************************/
 381:Include/benchmark.h **** 
 382:Include/benchmark.h **** /* Function:RME_Thd_Exec_Set **************************************************
 383:Include/benchmark.h **** Description : Set a thread's entry point and stack. The registers will be
 384:Include/benchmark.h ****               initialized with these contents.
 385:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 386:Include/benchmark.h ****                                   2-Level.
 387:Include/benchmark.h ****               void* Entry - The entry address of the thread.
 388:Include/benchmark.h ****               void* Stack - The stack address to use for execution.
 389:Include/benchmark.h ****               void* Param - The parameter to pass to the thread.
 390:Include/benchmark.h **** Output      : None.
 391:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 392:Include/benchmark.h **** ******************************************************************************/
 393:Include/benchmark.h **** ret_t RME_Thd_Exec_Set(cid_t Cap_Thd,
 394:Include/benchmark.h ****                            ptr_t Entry,
 395:Include/benchmark.h ****                            ptr_t Stack,
 396:Include/benchmark.h ****                            ptr_t Param)
 397:Include/benchmark.h **** {
 492              		.loc 2 397 1
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 16
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 00482DE9 		push	{fp, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 11, -8
 499              		.cfi_offset 14, -4
 500 0004 04B08DE2 		add	fp, sp, #4
 501              		.cfi_def_cfa 11, 4
 502 0008 10D04DE2 		sub	sp, sp, #16
 503 000c 08000BE5 		str	r0, [fp, #-8]
 504 0010 0C100BE5 		str	r1, [fp, #-12]
 505 0014 10200BE5 		str	r2, [fp, #-16]
 506 0018 14300BE5 		str	r3, [fp, #-20]
 398:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_EXEC_SET,
 507              		.loc 2 398 12
 508 001c 08301BE5 		ldr	r3, [fp, #-8]
 509 0020 060883E3 		orr	r0, r3, #393216
 510 0024 14301BE5 		ldr	r3, [fp, #-20]
 511 0028 10201BE5 		ldr	r2, [fp, #-16]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 17


 512 002c 0C101BE5 		ldr	r1, [fp, #-12]
 513 0030 FEFFFFEB 		bl	RME_Svc
 514 0034 0030A0E1 		mov	r3, r0
 399:Include/benchmark.h ****                    Cap_Thd,
 400:Include/benchmark.h ****                    (ptr_t)Entry,
 401:Include/benchmark.h ****                    (ptr_t)Stack,
 402:Include/benchmark.h ****                    (ptr_t)Param);
 403:Include/benchmark.h **** }
 515              		.loc 2 403 1
 516 0038 0300A0E1 		mov	r0, r3
 517 003c 04D04BE2 		sub	sp, fp, #4
 518              		.cfi_def_cfa 13, 8
 519              		@ sp needed
 520 0040 0088BDE8 		pop	{fp, pc}
 521              		.cfi_endproc
 522              	.LFE5:
 524              		.section	.text.RME_Thd_Time_Xfer,"ax",%progbits
 525              		.align	2
 526              		.global	RME_Thd_Time_Xfer
 527              		.syntax unified
 528              		.arm
 530              	RME_Thd_Time_Xfer:
 531              	.LFB6:
 404:Include/benchmark.h **** /* End Function:RME_Thd_Exec_Set *********************************************/
 405:Include/benchmark.h **** 
 406:Include/benchmark.h **** /* Function:RME_Thd_Time_Xfer *************************************************
 407:Include/benchmark.h **** Description : Transfer time from one thread to another. This can only be called
 408:Include/benchmark.h ****               from the core that the thread is on, and the the two threads
 409:Include/benchmark.h ****               involved in the time transfer must be on the same core.
 410:Include/benchmark.h ****               If the time transfered is more than or equal to what the source
 411:Include/benchmark.h ****               have, the source will be out of time or blocked. If the source is
 412:Include/benchmark.h ****               both out of time and blocked, we do not send the notification;
 413:Include/benchmark.h ****               Instead, we send the notification when the receive endpoint
 414:Include/benchmark.h ****               actually receive something.
 415:Include/benchmark.h ****               It is possible to transfer time to threads have a lower priority,
 416:Include/benchmark.h ****               and it is also possible to transfer time to threads that have a
 417:Include/benchmark.h ****               higher priority. In the latter case, and if the source is
 418:Include/benchmark.h ****               currently running, a preemption will occur.
 419:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd_Dst - The destination thread.
 420:Include/benchmark.h ****                                       2-Level.
 421:Include/benchmark.h ****               RME_cid_t Cap_Thd_Src - The source thread.
 422:Include/benchmark.h ****                                       2-Level.
 423:Include/benchmark.h ****               RME_ptr_t Time - The time to transfer, in slices. A slice is the
 424:Include/benchmark.h ****                                minimal amount of time transfered in the system
 425:Include/benchmark.h ****                                usually on the order of 100us or 1ms.
 426:Include/benchmark.h ****                                Use RME_THD_INIT_TIME for revoking transfer.
 427:Include/benchmark.h ****                                Use RME_THD_INF_TIME for infinite trasnfer.
 428:Include/benchmark.h **** Output      : None.
 429:Include/benchmark.h **** Return      : RME_ret_t - If successful, the destination time amount; or an
 430:Include/benchmark.h ****                           error code.
 431:Include/benchmark.h **** ******************************************************************************/
 432:Include/benchmark.h **** ret_t RME_Thd_Time_Xfer(cid_t Cap_Thd_Dst,
 433:Include/benchmark.h ****                         cid_t Cap_Thd_Src,
 434:Include/benchmark.h ****                         ptr_t Time)
 435:Include/benchmark.h **** {
 532              		.loc 2 435 1
 533              		.cfi_startproc
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 18


 534              		@ args = 0, pretend = 0, frame = 16
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536 0000 00482DE9 		push	{fp, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 11, -8
 539              		.cfi_offset 14, -4
 540 0004 04B08DE2 		add	fp, sp, #4
 541              		.cfi_def_cfa 11, 4
 542 0008 10D04DE2 		sub	sp, sp, #16
 543 000c 08000BE5 		str	r0, [fp, #-8]
 544 0010 0C100BE5 		str	r1, [fp, #-12]
 545 0014 10200BE5 		str	r2, [fp, #-16]
 436:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_TIME_XFER,
 546              		.loc 2 436 12
 547 0018 08101BE5 		ldr	r1, [fp, #-8]
 548 001c 0C201BE5 		ldr	r2, [fp, #-12]
 549 0020 10301BE5 		ldr	r3, [fp, #-16]
 550 0024 0207A0E3 		mov	r0, #524288
 551 0028 FEFFFFEB 		bl	RME_Svc
 552 002c 0030A0E1 		mov	r3, r0
 437:Include/benchmark.h ****                    0U,
 438:Include/benchmark.h ****                    Cap_Thd_Dst,
 439:Include/benchmark.h ****                    Cap_Thd_Src,
 440:Include/benchmark.h ****                    Time);
 441:Include/benchmark.h **** }
 553              		.loc 2 441 1
 554 0030 0300A0E1 		mov	r0, r3
 555 0034 04D04BE2 		sub	sp, fp, #4
 556              		.cfi_def_cfa 13, 8
 557              		@ sp needed
 558 0038 0088BDE8 		pop	{fp, pc}
 559              		.cfi_endproc
 560              	.LFE6:
 562              		.section	.text.RME_Thd_Sched_Bind,"ax",%progbits
 563              		.align	2
 564              		.global	RME_Thd_Sched_Bind
 565              		.syntax unified
 566              		.arm
 568              	RME_Thd_Sched_Bind:
 569              	.LFB7:
 442:Include/benchmark.h **** /* End Function:RME_Thd_Time_Xfer ********************************************/
 443:Include/benchmark.h **** 
 444:Include/benchmark.h **** 
 445:Include/benchmark.h **** /* Function:RME_Thd_Sched_Bind ************************************************
 446:Include/benchmark.h **** Description : Set a thread's priority level, and its scheduler thread. When
 447:Include/benchmark.h ****               there are any state changes on this thread, a notification will
 448:Include/benchmark.h ****               be sent to its scheduler thread. If the state of the thread
 449:Include/benchmark.h ****               changes for multiple times, then only the most recent state will
 450:Include/benchmark.h ****               be reflected in the scheduler's receive queue.
 451:Include/benchmark.h ****               The scheduler and the threads that it schedule must be on the
 452:Include/benchmark.h ****               same core. When a thread wants to go from one core to another,
 453:Include/benchmark.h ****               its notification to the scheduler must all be processed, and it
 454:Include/benchmark.h ****               must have no scheduler notifications in itself.
 455:Include/benchmark.h ****               This must be called on the same core with the Cap_Thd_Sched, and
 456:Include/benchmark.h ****               the Cap_Thd itself must be free.
 457:Include/benchmark.h ****               It is impossible to set a thread's priority beyond its maximum
 458:Include/benchmark.h ****               priority.
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 19


 459:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread.
 460:Include/benchmark.h ****                                   2-Level.
 461:Include/benchmark.h ****               RME_cid_t Cap_Thd_Sched - The scheduler thread.
 462:Include/benchmark.h ****                                         2-Level.
 463:Include/benchmark.h ****               RME_cid_t Cap_Sig - The signal endpoint for scheduler
 464:Include/benchmark.h ****                                   notifications. This signal endpoint will be
 465:Include/benchmark.h ****                                   sent to whenever this thread has a fault, or
 466:Include/benchmark.h ****                                   timeouts. This is purely optional; if it is
 467:Include/benchmark.h ****                                   not needed, pass in RME_CID_NULL.
 468:Include/benchmark.h ****               RME_tid_t TID - The thread ID. This is user-supplied, and the
 469:Include/benchmark.h ****                               kernel will not check whether there are two
 470:Include/benchmark.h ****                               threads that have the same TID.
 471:Include/benchmark.h ****               RME_ptr_t Prio - The priority level, higher is more critical.
 472:Include/benchmark.h ****               rme_ptr_t Haddr - The kernel-accessible virtual memory address
 473:Include/benchmark.h ****                                 for this thread's register sets, only used by
 474:Include/benchmark.h ****                                 hypervisor-managed threads. For other threads,
 475:Include/benchmark.h ****                                 please pass in NULL instead.
 476:Include/benchmark.h **** 
 477:Include/benchmark.h **** Output      : None.
 478:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 479:Include/benchmark.h **** ******************************************************************************/
 480:Include/benchmark.h **** ret_t RME_Thd_Sched_Bind(cid_t Cap_Thd,
 481:Include/benchmark.h ****                          cid_t Cap_Thd_Sched,
 482:Include/benchmark.h ****                          cid_t Cap_Sig,
 483:Include/benchmark.h ****                          tid_t TID,
 484:Include/benchmark.h ****                          ptr_t Prio,
 485:Include/benchmark.h ****                          ptr_t Haddr)
 486:Include/benchmark.h **** {
 570              		.loc 2 486 1
 571              		.cfi_startproc
 572              		@ args = 8, pretend = 0, frame = 16
 573              		@ frame_needed = 1, uses_anonymous_args = 0
 574 0000 00482DE9 		push	{fp, lr}
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 11, -8
 577              		.cfi_offset 14, -4
 578 0004 04B08DE2 		add	fp, sp, #4
 579              		.cfi_def_cfa 11, 4
 580 0008 10D04DE2 		sub	sp, sp, #16
 581 000c 08000BE5 		str	r0, [fp, #-8]
 582 0010 0C100BE5 		str	r1, [fp, #-12]
 583 0014 10200BE5 		str	r2, [fp, #-16]
 584 0018 14300BE5 		str	r3, [fp, #-20]
 487:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SCHED_BIND,
 585              		.loc 2 487 12
 586 001c 08301BE5 		ldr	r3, [fp, #-8]
 587 0020 1B0883E3 		orr	r0, r3, #1769472
 588 0024 0C301BE5 		ldr	r3, [fp, #-12]
 589 0028 0328A0E1 		lsl	r2, r3, #16
 590 002c 10301BE5 		ldr	r3, [fp, #-16]
 591 0030 7330FFE6 		uxth	r3, r3
 592 0034 031082E1 		orr	r1, r2, r3
 593 0038 14301BE5 		ldr	r3, [fp, #-20]
 594 003c 0328A0E1 		lsl	r2, r3, #16
 595 0040 04309BE5 		ldr	r3, [fp, #4]
 596 0044 7330FFE6 		uxth	r3, r3
 597 0048 032082E1 		orr	r2, r2, r3
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 20


 598 004c 08309BE5 		ldr	r3, [fp, #8]
 599 0050 FEFFFFEB 		bl	RME_Svc
 600 0054 0030A0E1 		mov	r3, r0
 488:Include/benchmark.h ****                    Cap_Thd,
 489:Include/benchmark.h ****                    RME_PARAM_D1(Cap_Thd_Sched)|RME_PARAM_D0(Cap_Sig),
 490:Include/benchmark.h ****                    RME_PARAM_D1(TID)|RME_PARAM_D0(Prio),
 491:Include/benchmark.h ****                    Haddr);
 492:Include/benchmark.h **** }
 601              		.loc 2 492 1
 602 0058 0300A0E1 		mov	r0, r3
 603 005c 04D04BE2 		sub	sp, fp, #4
 604              		.cfi_def_cfa 13, 8
 605              		@ sp needed
 606 0060 0088BDE8 		pop	{fp, pc}
 607              		.cfi_endproc
 608              	.LFE7:
 610              		.section	.text.RME_Thd_Swt,"ax",%progbits
 611              		.align	2
 612              		.global	RME_Thd_Swt
 613              		.syntax unified
 614              		.arm
 616              	RME_Thd_Swt:
 617              	.LFB8:
 493:Include/benchmark.h **** /* End Function:RME_Thd_Sched_Bind *******************************************/
 494:Include/benchmark.h **** 
 495:Include/benchmark.h **** 
 496:Include/benchmark.h **** /* Function:RME_Thd_Swt *******************************************************
 497:Include/benchmark.h **** Description : Switch to another thread. The thread to switch to must have the
 498:Include/benchmark.h ****               same preemptive priority as this thread, and have time, and not
 499:Include/benchmark.h ****               blocked.
 500:Include/benchmark.h **** Input       : RME_cid_t Cap_Thd - The capability to the thread. If this is -1,
 501:Include/benchmark.h ****                                   the kernel will pickup whatever thread that
 502:Include/benchmark.h ****                                   has the highest priority and time to run.
 503:Include/benchmark.h ****                                   2-Level.
 504:Include/benchmark.h ****               RME_ptr_t Is_Yield - This is a flag to indicate whether this
 505:Include/benchmark.h ****                                    is a full yield. If it is, the kernel will
 506:Include/benchmark.h ****                                    discard all the time alloted on this
 507:Include/benchmark.h ****                                    thread.
 508:Include/benchmark.h **** Output      : None.
 509:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 510:Include/benchmark.h **** ******************************************************************************/
 511:Include/benchmark.h **** ret_t RME_Thd_Swt(cid_t Cap_Thd,
 512:Include/benchmark.h ****                   ptr_t Is_Yield)
 513:Include/benchmark.h **** {
 618              		.loc 2 513 1
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 8
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 0000 00482DE9 		push	{fp, lr}
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 11, -8
 625              		.cfi_offset 14, -4
 626 0004 04B08DE2 		add	fp, sp, #4
 627              		.cfi_def_cfa 11, 4
 628 0008 08D04DE2 		sub	sp, sp, #8
 629 000c 08000BE5 		str	r0, [fp, #-8]
 630 0010 0C100BE5 		str	r1, [fp, #-12]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 21


 514:Include/benchmark.h ****     return RME_SVC(RME_SVC_THD_SWT,
 631              		.loc 2 514 12
 632 0014 08101BE5 		ldr	r1, [fp, #-8]
 633 0018 0030A0E3 		mov	r3, #0
 634 001c 0C201BE5 		ldr	r2, [fp, #-12]
 635 0020 0908A0E3 		mov	r0, #589824
 636 0024 FEFFFFEB 		bl	RME_Svc
 637 0028 0030A0E1 		mov	r3, r0
 515:Include/benchmark.h ****                    0U,
 516:Include/benchmark.h ****                    Cap_Thd,
 517:Include/benchmark.h ****                    Is_Yield,
 518:Include/benchmark.h ****                    0U);
 519:Include/benchmark.h **** }
 638              		.loc 2 519 1
 639 002c 0300A0E1 		mov	r0, r3
 640 0030 04D04BE2 		sub	sp, fp, #4
 641              		.cfi_def_cfa 13, 8
 642              		@ sp needed
 643 0034 0088BDE8 		pop	{fp, pc}
 644              		.cfi_endproc
 645              	.LFE8:
 647              		.section	.text.RME_Sig_Crt,"ax",%progbits
 648              		.align	2
 649              		.global	RME_Sig_Crt
 650              		.syntax unified
 651              		.arm
 653              	RME_Sig_Crt:
 654              	.LFB9:
 520:Include/benchmark.h **** /* End Function:RME_Thd_Swt **************************************************/
 521:Include/benchmark.h **** /*asynchronous communication function*/
 522:Include/benchmark.h **** /* Function:RME_Sig_Crt *******************************************************
 523:Include/benchmark.h **** Description : Create a signal endpoint.
 524:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to use
 525:Include/benchmark.h ****                                   for this signal.
 526:Include/benchmark.h ****                                   2-Level.
 527:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability slot that you want this newly
 528:Include/benchmark.h ****                                   created signal capability to be in.
 529:Include/benchmark.h ****                                   1-Level.
 530:Include/benchmark.h **** Output      : None.
 531:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 532:Include/benchmark.h **** ******************************************************************************/
 533:Include/benchmark.h **** ret_t RME_Sig_Crt(cid_t Cap_Cpt,
 534:Include/benchmark.h ****                   cid_t Cap_Sig)
 535:Include/benchmark.h **** {
 655              		.loc 2 535 1
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 00482DE9 		push	{fp, lr}
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 11, -8
 662              		.cfi_offset 14, -4
 663 0004 04B08DE2 		add	fp, sp, #4
 664              		.cfi_def_cfa 11, 4
 665 0008 08D04DE2 		sub	sp, sp, #8
 666 000c 08000BE5 		str	r0, [fp, #-8]
 667 0010 0C100BE5 		str	r1, [fp, #-12]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 22


 536:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_CRT,
 668              		.loc 2 536 12
 669 0014 08301BE5 		ldr	r3, [fp, #-8]
 670 0018 1D0883E3 		orr	r0, r3, #1900544
 671 001c 0C101BE5 		ldr	r1, [fp, #-12]
 672 0020 0030A0E3 		mov	r3, #0
 673 0024 0020A0E3 		mov	r2, #0
 674 0028 FEFFFFEB 		bl	RME_Svc
 675 002c 0030A0E1 		mov	r3, r0
 537:Include/benchmark.h ****                    Cap_Cpt,
 538:Include/benchmark.h ****                    Cap_Sig,
 539:Include/benchmark.h ****                    0U,
 540:Include/benchmark.h ****                    0U);
 541:Include/benchmark.h **** }
 676              		.loc 2 541 1
 677 0030 0300A0E1 		mov	r0, r3
 678 0034 04D04BE2 		sub	sp, fp, #4
 679              		.cfi_def_cfa 13, 8
 680              		@ sp needed
 681 0038 0088BDE8 		pop	{fp, pc}
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.section	.text.RME_Sig_Del,"ax",%progbits
 686              		.align	2
 687              		.global	RME_Sig_Del
 688              		.syntax unified
 689              		.arm
 691              	RME_Sig_Del:
 692              	.LFB10:
 542:Include/benchmark.h **** /* End Function:RME_Sig_Crt **************************************************/
 543:Include/benchmark.h **** /* Function:RME_Sig_Del *******************************************************
 544:Include/benchmark.h **** Description : Delete a signal endpoint.
 545:Include/benchmark.h **** Input       : RME_cid_t Cap_Cpt - The capability to the capability table to
 546:Include/benchmark.h ****                                   delete from.
 547:Include/benchmark.h ****                                   2-Level.
 548:Include/benchmark.h ****               RME_cid_t Cap_Sig - The capability to the signal.
 549:Include/benchmark.h ****                                   1-Level.
 550:Include/benchmark.h **** Output      : None.
 551:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0; or an error code.
 552:Include/benchmark.h **** ******************************************************************************/
 553:Include/benchmark.h **** ret_t RME_Sig_Del(cid_t Cap_Cpt,
 554:Include/benchmark.h ****                   cid_t Cap_Sig)
 555:Include/benchmark.h **** {
 693              		.loc 2 555 1
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 8
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 0000 00482DE9 		push	{fp, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 11, -8
 700              		.cfi_offset 14, -4
 701 0004 04B08DE2 		add	fp, sp, #4
 702              		.cfi_def_cfa 11, 4
 703 0008 08D04DE2 		sub	sp, sp, #8
 704 000c 08000BE5 		str	r0, [fp, #-8]
 705 0010 0C100BE5 		str	r1, [fp, #-12]
 556:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_DEL,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 23


 706              		.loc 2 556 12
 707 0014 08301BE5 		ldr	r3, [fp, #-8]
 708 0018 1E0883E3 		orr	r0, r3, #1966080
 709 001c 0C101BE5 		ldr	r1, [fp, #-12]
 710 0020 0030A0E3 		mov	r3, #0
 711 0024 0020A0E3 		mov	r2, #0
 712 0028 FEFFFFEB 		bl	RME_Svc
 713 002c 0030A0E1 		mov	r3, r0
 557:Include/benchmark.h ****                    Cap_Cpt,
 558:Include/benchmark.h ****                    Cap_Sig,
 559:Include/benchmark.h ****                    0U,
 560:Include/benchmark.h ****                    0U);
 561:Include/benchmark.h **** }
 714              		.loc 2 561 1
 715 0030 0300A0E1 		mov	r0, r3
 716 0034 04D04BE2 		sub	sp, fp, #4
 717              		.cfi_def_cfa 13, 8
 718              		@ sp needed
 719 0038 0088BDE8 		pop	{fp, pc}
 720              		.cfi_endproc
 721              	.LFE10:
 723              		.section	.text.RME_Sig_Snd,"ax",%progbits
 724              		.align	2
 725              		.global	RME_Sig_Snd
 726              		.syntax unified
 727              		.arm
 729              	RME_Sig_Snd:
 730              	.LFB11:
 562:Include/benchmark.h **** /* End Function:RME_Sig_Del **************************************************/
 563:Include/benchmark.h **** /* Function:RME_Sig_Snd ******************************************************
 564:Include/benchmark.h **** Description : Try to send to a signal endpoint. This system call can cause
 565:Include/benchmark.h ****               a potential context switch.
 566:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 567:Include/benchmark.h ****                                   2-Level.
 568:Include/benchmark.h **** Output      : None.
 569:Include/benchmark.h **** Return      : RME_ret_t - If successful, 0, or an error code.
 570:Include/benchmark.h **** ******************************************************************************/
 571:Include/benchmark.h **** ret_t RME_Sig_Snd(cid_t Cap_Sig)
 572:Include/benchmark.h **** {
 731              		.loc 2 572 1
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 8
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735 0000 00482DE9 		push	{fp, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 11, -8
 738              		.cfi_offset 14, -4
 739 0004 04B08DE2 		add	fp, sp, #4
 740              		.cfi_def_cfa 11, 4
 741 0008 08D04DE2 		sub	sp, sp, #8
 742 000c 08000BE5 		str	r0, [fp, #-8]
 573:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_SND,
 743              		.loc 2 573 12
 744 0010 08101BE5 		ldr	r1, [fp, #-8]
 745 0014 0030A0E3 		mov	r3, #0
 746 0018 0020A0E3 		mov	r2, #0
 747 001c 0208A0E3 		mov	r0, #131072
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 24


 748 0020 FEFFFFEB 		bl	RME_Svc
 749 0024 0030A0E1 		mov	r3, r0
 574:Include/benchmark.h ****                    0U,
 575:Include/benchmark.h ****                    Cap_Sig,
 576:Include/benchmark.h ****                    0U,
 577:Include/benchmark.h ****                    0U);
 578:Include/benchmark.h **** }
 750              		.loc 2 578 1
 751 0028 0300A0E1 		mov	r0, r3
 752 002c 04D04BE2 		sub	sp, fp, #4
 753              		.cfi_def_cfa 13, 8
 754              		@ sp needed
 755 0030 0088BDE8 		pop	{fp, pc}
 756              		.cfi_endproc
 757              	.LFE11:
 759              		.section	.text.RME_Sig_Rcv,"ax",%progbits
 760              		.align	2
 761              		.global	RME_Sig_Rcv
 762              		.syntax unified
 763              		.arm
 765              	RME_Sig_Rcv:
 766              	.LFB12:
 579:Include/benchmark.h **** /* End Function:RME_Sig_Snd **************************************************/
 580:Include/benchmark.h **** /* Function:RME_Sig_Rcv *******************************************************
 581:Include/benchmark.h **** Description : Try to receive from a signal endpoint. The rules for signal
 582:Include/benchmark.h ****               endpoint receive is:
 583:Include/benchmark.h ****               1.If a receive endpoint have many send endpoints, everyone can
 584:Include/benchmark.h ****                 send to it, and sending to it will increase the count by 1.
 585:Include/benchmark.h ****               2.If some thread blocks on a receive endpoint, the wakeup is only
 586:Include/benchmark.h ****                 possible from the same core that thread is on.
 587:Include/benchmark.h ****               3.It is not recommended to let 2 cores operate on the rcv
 588:Include/benchmark.h ****                 endpoint simutaneously.
 589:Include/benchmark.h ****               This system call can potentially trigger a context switch.
 590:Include/benchmark.h **** Input       : RME_cid_t Cap_Sig - The capability to the signal.
 591:Include/benchmark.h ****                                   2-Level.
 592:Include/benchmark.h ****               RME_ptr_t Option - The receive option.
 593:Include/benchmark.h **** Output      : None.
 594:Include/benchmark.h **** Return      : RME_ret_t - If successful, a non-negative number containing the
 595:Include/benchmark.h ****                           number of signals received; or an error code.
 596:Include/benchmark.h **** ******************************************************************************/
 597:Include/benchmark.h **** ret_t RME_Sig_Rcv(cid_t Cap_Sig,
 598:Include/benchmark.h ****                   ptr_t Option)
 599:Include/benchmark.h **** {
 767              		.loc 2 599 1
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 8
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771 0000 00482DE9 		push	{fp, lr}
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 11, -8
 774              		.cfi_offset 14, -4
 775 0004 04B08DE2 		add	fp, sp, #4
 776              		.cfi_def_cfa 11, 4
 777 0008 08D04DE2 		sub	sp, sp, #8
 778 000c 08000BE5 		str	r0, [fp, #-8]
 779 0010 0C100BE5 		str	r1, [fp, #-12]
 600:Include/benchmark.h ****     return RME_SVC(RME_SVC_SIG_RCV,
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 25


 780              		.loc 2 600 12
 781 0014 08101BE5 		ldr	r1, [fp, #-8]
 782 0018 0030A0E3 		mov	r3, #0
 783 001c 0C201BE5 		ldr	r2, [fp, #-12]
 784 0020 0308A0E3 		mov	r0, #196608
 785 0024 FEFFFFEB 		bl	RME_Svc
 786 0028 0030A0E1 		mov	r3, r0
 601:Include/benchmark.h ****                    0U,
 602:Include/benchmark.h ****                    Cap_Sig,
 603:Include/benchmark.h ****                    Option,
 604:Include/benchmark.h ****                    0U);
 605:Include/benchmark.h **** }
 787              		.loc 2 605 1
 788 002c 0300A0E1 		mov	r0, r3
 789 0030 04D04BE2 		sub	sp, fp, #4
 790              		.cfi_def_cfa 13, 8
 791              		@ sp needed
 792 0034 0088BDE8 		pop	{fp, pc}
 793              		.cfi_endproc
 794              	.LFE12:
 796              		.global	Cur_addr
 797              		.section	.bss.Cur_addr,"aw",%nobits
 798              		.align	2
 801              	Cur_addr:
 802 0000 00000000 		.space	4
 803              		.section	.text._RME_Tsc_Init,"ax",%progbits
 804              		.align	2
 805              		.global	_RME_Tsc_Init
 806              		.syntax unified
 807              		.arm
 809              	_RME_Tsc_Init:
 810              	.LFB13:
   1:Source/rme_benchmark.c **** /******************************************************************************
   2:Source/rme_benchmark.c **** Filename    : benchmark.c
   3:Source/rme_benchmark.c **** Author      : pry
   4:Source/rme_benchmark.c **** Date        : 04/09/2017
   5:Source/rme_benchmark.c **** Licence     : The Unlicense; see LICENSE for details.
   6:Source/rme_benchmark.c **** Description : The benchmark file for RME.
   7:Source/rme_benchmark.c **** ******************************************************************************/
   8:Source/rme_benchmark.c **** 
   9:Source/rme_benchmark.c **** /* Include *******************************************************************/
  10:Source/rme_benchmark.c **** #include"benchmark.h"
  11:Source/rme_benchmark.c **** 
  12:Source/rme_benchmark.c **** ptr_t Cur_addr;
  13:Source/rme_benchmark.c **** 
  14:Source/rme_benchmark.c **** /* Need to export error codes, and size of each object, in words! */
  15:Source/rme_benchmark.c **** /* End Include ***************************************************************/
  16:Source/rme_benchmark.c **** 
  17:Source/rme_benchmark.c **** /* Function:_RME_Tsc_Init *****************************************************
  18:Source/rme_benchmark.c **** Description : The initialization of timestamp counter. 19 secs before overflowing.
  19:Source/rme_benchmark.c **** Input       : None.
  20:Source/rme_benchmark.c **** Output      : None.
  21:Source/rme_benchmark.c **** Return      : None.
  22:Source/rme_benchmark.c **** ******************************************************************************/
  23:Source/rme_benchmark.c **** void _RME_Tsc_Init(void)
  24:Source/rme_benchmark.c **** {
 811              		.loc 1 24 1
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 26


 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816 0000 04B02DE5 		str	fp, [sp, #-4]!
 817              		.cfi_def_cfa_offset 4
 818              		.cfi_offset 11, -4
 819 0004 00B08DE2 		add	fp, sp, #0
 820              		.cfi_def_cfa_register 11
  25:Source/rme_benchmark.c **** //    TIM_HandleTypeDef TIM2_Handle;
  26:Source/rme_benchmark.c **** //    
  27:Source/rme_benchmark.c **** //    /* Initialize timer 2 to run at the same speed as the CPU */
  28:Source/rme_benchmark.c **** //    TIM2_Handle.Instance=TIM2;
  29:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Prescaler=0;
  30:Source/rme_benchmark.c **** //    TIM2_Handle.Init.CounterMode=TIM_COUNTERMODE_UP;
  31:Source/rme_benchmark.c **** //    TIM2_Handle.Init.Period=(ptr_t)(-1);
  32:Source/rme_benchmark.c **** //    TIM2_Handle.Init.ClockDivision=TIM_CLOCKDIVISION_DIV1;
  33:Source/rme_benchmark.c **** //    HAL_TIM_Base_Init(&TIM2_Handle);
  34:Source/rme_benchmark.c **** //    __HAL_RCC_TIM2_CLK_ENABLE();
  35:Source/rme_benchmark.c **** //    __HAL_TIM_ENABLE(&TIM2_Handle);
  36:Source/rme_benchmark.c **** }
 821              		.loc 1 36 1
 822 0008 00F020E3 		nop
 823 000c 00D08BE2 		add	sp, fp, #0
 824              		.cfi_def_cfa_register 13
 825              		@ sp needed
 826 0010 04B09DE4 		ldr	fp, [sp], #4
 827              		.cfi_restore 11
 828              		.cfi_def_cfa_offset 0
 829 0014 1EFF2FE1 		bx	lr
 830              		.cfi_endproc
 831              	.LFE13:
 833              		.section	.rodata
 834              		.align	2
 835              	.LC0:
 836 0000 0D0A2068 		.ascii	"\015\012 hello! this is thread \000"
 836      656C6C6F 
 836      21207468 
 836      69732069 
 836      73207468 
 837              		.section	.text.RME_Same_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 838              		.align	2
 839              		.global	RME_Same_Prc_Thd_Switch_Test_Thd
 840              		.syntax unified
 841              		.arm
 843              	RME_Same_Prc_Thd_Switch_Test_Thd:
 844              	.LFB14:
  37:Source/rme_benchmark.c **** /* End Function:_RME_Tsc_Init ************************************************/
  38:Source/rme_benchmark.c **** 
  39:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
  40:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
  41:Source/rme_benchmark.c **** Input       : None.
  42:Source/rme_benchmark.c **** Output      : None.
  43:Source/rme_benchmark.c **** Return      : None.
  44:Source/rme_benchmark.c **** ******************************************************************************/
  45:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1)
  46:Source/rme_benchmark.c **** {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 27


 845              		.loc 1 46 1
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 16
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849 0000 00482DE9 		push	{fp, lr}
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 11, -8
 852              		.cfi_offset 14, -4
 853 0004 04B08DE2 		add	fp, sp, #4
 854              		.cfi_def_cfa 11, 4
 855 0008 10D04DE2 		sub	sp, sp, #16
 856 000c 10000BE5 		str	r0, [fp, #-16]
  47:Source/rme_benchmark.c ****     ret_t Retval;
  48:Source/rme_benchmark.c **** 
  49:Source/rme_benchmark.c ****     USR_DBG_S("\r\n hello! this is thread ");
 857              		.loc 1 49 5
 858 0010 000000E3 		movw	r0, #:lower16:.LC0
 859 0014 000040E3 		movt	r0, #:upper16:.LC0
 860 0018 FEFFFFEB 		bl	USR_DBG_S
  50:Source/rme_benchmark.c ****     USR_DBG_I(Param1);
 861              		.loc 1 50 5
 862 001c 10301BE5 		ldr	r3, [fp, #-16]
 863 0020 0300A0E1 		mov	r0, r3
 864 0024 FEFFFFEB 		bl	USR_DBG_I
 865              	.L51:
  51:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
  52:Source/rme_benchmark.c ****     while(1)
  53:Source/rme_benchmark.c ****     {
  54:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
  55:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
  56:Source/rme_benchmark.c ****                           0,
  57:Source/rme_benchmark.c ****                           0);*/
  58:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 866              		.loc 1 58 16 discriminator 1
 867 0028 0010A0E3 		mov	r1, #0
 868 002c 0300A0E3 		mov	r0, #3
 869 0030 FEFFFFEB 		bl	RME_Thd_Swt
 870 0034 08000BE5 		str	r0, [fp, #-8]
 871              		.loc 1 58 15
 872 0038 FAFFFFEA 		b	.L51
 873              		.cfi_endproc
 874              	.LFE14:
 876              		.section	.rodata
 877 001a 0000     		.align	2
 878              	.LC1:
 879 001c 0D0A2D2D 		.ascii	"\015\012-----create a thread , TID= \000"
 879      2D2D2D63 
 879      72656174 
 879      65206120 
 879      74687265 
 880 003b 00       		.align	2
 881              	.LC2:
 882 003c 0D0A2870 		.ascii	"\015\012(ptr_t)(&RME_Stack[2047])= \000"
 882      74725F74 
 882      29282652 
 882      4D455F53 
 882      7461636B 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 28


 883 005a 0000     		.align	2
 884              	.LC3:
 885 005c 0D0A496E 		.ascii	"\015\012Initialize the thread's stack Stack_Addr= \000"
 885      69746961 
 885      6C697A65 
 885      20746865 
 885      20746872 
 886 0089 000000   		.align	2
 887              	.LC4:
 888 008c 0D0A6372 		.ascii	"\015\012create a thread      retval= \000"
 888      65617465 
 888      20612074 
 888      68726561 
 888      64202020 
 889              		.align	2
 890              	.LC5:
 891 00ac 0D0A4269 		.ascii	"\015\012Bind the thread to the processor retval= \000"
 891      6E642074 
 891      68652074 
 891      68726561 
 891      6420746F 
 892              		.align	2
 893              	.LC6:
 894 00d8 0D0A5365 		.ascii	"\015\012Set the execution information retval= \000"
 894      74207468 
 894      65206578 
 894      65637574 
 894      696F6E20 
 895 0101 000000   		.align	2
 896              	.LC7:
 897 0104 0D0A00   		.ascii	"\015\012\000"
 898 0107 00       		.align	2
 899              	.LC8:
 900 0108 0D0A4465 		.ascii	"\015\012Delegate some timeslice to it retval= \000"
 900      6C656761 
 900      74652073 
 900      6F6D6520 
 900      74696D65 
 901              		.section	.text.RME_Thd_Create,"ax",%progbits
 902              		.align	2
 903              		.global	RME_Thd_Create
 904              		.syntax unified
 905              		.arm
 907              	RME_Thd_Create:
 908              	.LFB15:
  59:Source/rme_benchmark.c ****     }
  60:Source/rme_benchmark.c **** }
  61:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test_Thd ****************************/
  62:Source/rme_benchmark.c **** 
  63:Source/rme_benchmark.c **** 
  64:Source/rme_benchmark.c **** void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_t T
  65:Source/rme_benchmark.c **** {
 909              		.loc 1 65 1
 910              		.cfi_startproc
 911              		@ args = 12, pretend = 0, frame = 24
 912              		@ frame_needed = 1, uses_anonymous_args = 0
 913 0000 00482DE9 		push	{fp, lr}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 29


 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 11, -8
 916              		.cfi_offset 14, -4
 917 0004 04B08DE2 		add	fp, sp, #4
 918              		.cfi_def_cfa 11, 4
 919 0008 28D04DE2 		sub	sp, sp, #40
 920 000c 10000BE5 		str	r0, [fp, #-16]
 921 0010 14100BE5 		str	r1, [fp, #-20]
 922 0014 18200BE5 		str	r2, [fp, #-24]
 923 0018 1C300BE5 		str	r3, [fp, #-28]
  66:Source/rme_benchmark.c **** 	            ret_t Retval;
  67:Source/rme_benchmark.c **** 			    cnt_t Count;
  68:Source/rme_benchmark.c **** 			    ptr_t Stack_Addr;
  69:Source/rme_benchmark.c **** 			    ptr_t Temp;
  70:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\n-----create a thread , TID= ");
 924              		.loc 1 70 8
 925 001c 000000E3 		movw	r0, #:lower16:.LC1
 926 0020 000040E3 		movt	r0, #:upper16:.LC1
 927 0024 FEFFFFEB 		bl	USR_DBG_S
  71:Source/rme_benchmark.c **** 			    USR_DBG_H(Tid);
 928              		.loc 1 71 8
 929 0028 14001BE5 		ldr	r0, [fp, #-20]
 930 002c FEFFFFEB 		bl	USR_DBG_H
  72:Source/rme_benchmark.c **** 			    /* Initialize the thread's stack before entering it */
  73:Source/rme_benchmark.c **** 			    Stack_Addr=(ptr_t)&RME_Stack[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 931              		.loc 1 73 18
 932 0030 1C319FE5 		ldr	r3, .L53
 933 0034 08300BE5 		str	r3, [fp, #-8]
  74:Source/rme_benchmark.c **** 			                               (ptr_t)RME_Thd_Stub,
  75:Source/rme_benchmark.c **** 			                               1, 2, 3, 4); */
  76:Source/rme_benchmark.c **** 
  77:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 934              		.loc 1 77 8
 935 0038 000000E3 		movw	r0, #:lower16:.LC2
 936 003c 000040E3 		movt	r0, #:upper16:.LC2
 937 0040 FEFFFFEB 		bl	USR_DBG_S
  78:Source/rme_benchmark.c **** 			    USR_DBG_H((ptr_t)(&RME_Stack[2047]));
 938              		.loc 1 78 8
 939 0044 0C319FE5 		ldr	r3, .L53+4
 940 0048 0300A0E1 		mov	r0, r3
 941 004c FEFFFFEB 		bl	USR_DBG_H
  79:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 942              		.loc 1 79 8
 943 0050 000000E3 		movw	r0, #:lower16:.LC3
 944 0054 000040E3 		movt	r0, #:upper16:.LC3
 945 0058 FEFFFFEB 		bl	USR_DBG_S
  80:Source/rme_benchmark.c **** 			    USR_DBG_H(Stack_Addr);
 946              		.loc 1 80 8
 947 005c 08001BE5 		ldr	r0, [fp, #-8]
 948 0060 FEFFFFEB 		bl	USR_DBG_H
  81:Source/rme_benchmark.c **** 
  82:Source/rme_benchmark.c **** 			    /* create a thread */
  83:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,Cap_Thd,
 949              		.loc 1 83 15
 950 0064 0030A0E3 		mov	r3, #0
 951 0068 08308DE5 		str	r3, [sp, #8]
 952 006c 04309BE5 		ldr	r3, [fp, #4]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 30


 953 0070 04308DE5 		str	r3, [sp, #4]
 954 0074 1F30A0E3 		mov	r3, #31
 955 0078 00308DE5 		str	r3, [sp]
 956 007c 0230A0E3 		mov	r3, #2
 957 0080 10201BE5 		ldr	r2, [fp, #-16]
 958 0084 0510A0E3 		mov	r1, #5
 959 0088 0000A0E3 		mov	r0, #0
 960 008c FEFFFFEB 		bl	RME_Thd_Crt
 961 0090 0C000BE5 		str	r0, [fp, #-12]
  84:Source/rme_benchmark.c **** 			                       RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,Raddr,0);
  85:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\ncreate a thread      retval= ");
 962              		.loc 1 85 8
 963 0094 000000E3 		movw	r0, #:lower16:.LC4
 964 0098 000040E3 		movt	r0, #:upper16:.LC4
 965 009c FEFFFFEB 		bl	USR_DBG_S
  86:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 966              		.loc 1 86 8
 967 00a0 0C001BE5 		ldr	r0, [fp, #-12]
 968 00a4 FEFFFFEB 		bl	USR_DBG_I
  87:Source/rme_benchmark.c **** 
  88:Source/rme_benchmark.c **** 			    /* Bind the thread to the processor */
  89:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Sched_Bind(Cap_Thd,RME_BOOT_INIT_THD,RME_CID_NULL,
 969              		.loc 1 89 15
 970 00a8 14201BE5 		ldr	r2, [fp, #-20]
 971 00ac 0030A0E3 		mov	r3, #0
 972 00b0 04308DE5 		str	r3, [sp, #4]
 973 00b4 18301BE5 		ldr	r3, [fp, #-24]
 974 00b8 00308DE5 		str	r3, [sp]
 975 00bc 0230A0E1 		mov	r3, r2
 976 00c0 0229A0E3 		mov	r2, #32768
 977 00c4 0310A0E3 		mov	r1, #3
 978 00c8 10001BE5 		ldr	r0, [fp, #-16]
 979 00cc FEFFFFEB 		bl	RME_Thd_Sched_Bind
 980 00d0 0C000BE5 		str	r0, [fp, #-12]
  90:Source/rme_benchmark.c **** 			    		  	  	  	  	  Tid,Prc,RME_BOOT_HYPER_KOM_VADDR);
  91:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nBind the thread to the processor retval= ");
 981              		.loc 1 91 8
 982 00d4 000000E3 		movw	r0, #:lower16:.LC5
 983 00d8 000040E3 		movt	r0, #:upper16:.LC5
 984 00dc FEFFFFEB 		bl	USR_DBG_S
  92:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 985              		.loc 1 92 8
 986 00e0 0C001BE5 		ldr	r0, [fp, #-12]
 987 00e4 FEFFFFEB 		bl	USR_DBG_I
  93:Source/rme_benchmark.c **** 			    /* Set the execution information */
  94:Source/rme_benchmark.c **** 
  95:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Exec_Set(Cap_Thd,Entry,Stack_Addr,Tid);
 988              		.loc 1 95 15
 989 00e8 14301BE5 		ldr	r3, [fp, #-20]
 990 00ec 08201BE5 		ldr	r2, [fp, #-8]
 991 00f0 1C101BE5 		ldr	r1, [fp, #-28]
 992 00f4 10001BE5 		ldr	r0, [fp, #-16]
 993 00f8 FEFFFFEB 		bl	RME_Thd_Exec_Set
 994 00fc 0C000BE5 		str	r0, [fp, #-12]
  96:Source/rme_benchmark.c **** 			    //RME_Stack[2000]=1234;
  97:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nSet the execution information retval= ");
 995              		.loc 1 97 8
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 31


 996 0100 000000E3 		movw	r0, #:lower16:.LC6
 997 0104 000040E3 		movt	r0, #:upper16:.LC6
 998 0108 FEFFFFEB 		bl	USR_DBG_S
  98:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 999              		.loc 1 98 8
 1000 010c 0C001BE5 		ldr	r0, [fp, #-12]
 1001 0110 FEFFFFEB 		bl	USR_DBG_I
  99:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\n");
 1002              		.loc 1 99 8
 1003 0114 000000E3 		movw	r0, #:lower16:.LC7
 1004 0118 000040E3 		movt	r0, #:upper16:.LC7
 1005 011c FEFFFFEB 		bl	USR_DBG_S
 100:Source/rme_benchmark.c **** 			    /* Delegate some timeslice to it */
 101:Source/rme_benchmark.c **** 			    Retval=RME_Thd_Time_Xfer(Cap_Thd,RME_BOOT_INIT_THD,Time);
 1006              		.loc 1 101 15
 1007 0120 0C209BE5 		ldr	r2, [fp, #12]
 1008 0124 0310A0E3 		mov	r1, #3
 1009 0128 10001BE5 		ldr	r0, [fp, #-16]
 1010 012c FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1011 0130 0C000BE5 		str	r0, [fp, #-12]
 102:Source/rme_benchmark.c **** 			    USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1012              		.loc 1 102 8
 1013 0134 000000E3 		movw	r0, #:lower16:.LC8
 1014 0138 000040E3 		movt	r0, #:upper16:.LC8
 1015 013c FEFFFFEB 		bl	USR_DBG_S
 103:Source/rme_benchmark.c **** 			    USR_DBG_I(Retval);
 1016              		.loc 1 103 8
 1017 0140 0C001BE5 		ldr	r0, [fp, #-12]
 1018 0144 FEFFFFEB 		bl	USR_DBG_I
 104:Source/rme_benchmark.c **** 
 105:Source/rme_benchmark.c **** }
 1019              		.loc 1 105 1
 1020 0148 00F020E3 		nop
 1021 014c 04D04BE2 		sub	sp, fp, #4
 1022              		.cfi_def_cfa 13, 8
 1023              		@ sp needed
 1024 0150 0088BDE8 		pop	{fp, pc}
 1025              	.L54:
 1026              		.align	2
 1027              	.L53:
 1028 0154 401F0000 		.word	RME_Stack+8000
 1029 0158 FC1F0000 		.word	RME_Stack+8188
 1030              		.cfi_endproc
 1031              	.LFE15:
 1033              		.section	.rodata
 1034 0131 000000   		.align	2
 1035              	.LC9:
 1036 0134 0D0A4865 		.ascii	"\015\012Hello this is thread send\000"
 1036      6C6C6F20 
 1036      74686973 
 1036      20697320 
 1036      74687265 
 1037              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_send,"ax",%progbits
 1038              		.align	2
 1039              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_send
 1040              		.syntax unified
 1041              		.arm
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 32


 1043              	RME_Same_Prc_Thd_Sig_Test_Thd_send:
 1044              	.LFB16:
 106:Source/rme_benchmark.c **** 
 107:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_send(void)
 108:Source/rme_benchmark.c **** {
 1045              		.loc 1 108 1
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0000 00482DE9 		push	{fp, lr}
 1050              		.cfi_def_cfa_offset 8
 1051              		.cfi_offset 11, -8
 1052              		.cfi_offset 14, -4
 1053 0004 04B08DE2 		add	fp, sp, #4
 1054              		.cfi_def_cfa 11, 4
 109:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nHello this is thread send");
 1055              		.loc 1 109 2
 1056 0008 000000E3 		movw	r0, #:lower16:.LC9
 1057 000c 000040E3 		movt	r0, #:upper16:.LC9
 1058 0010 FEFFFFEB 		bl	USR_DBG_S
 110:Source/rme_benchmark.c **** 	RME_Sig_Snd(RME_BOOT_SIG_BENCH);
 1059              		.loc 1 110 2
 1060 0014 0D00A0E3 		mov	r0, #13
 1061 0018 FEFFFFEB 		bl	RME_Sig_Snd
 111:Source/rme_benchmark.c **** 	RME_Thd_Swt(RME_BOOT_BENCH_RCV_THD,0);
 1062              		.loc 1 111 2
 1063 001c 0010A0E3 		mov	r1, #0
 1064 0020 0F00A0E3 		mov	r0, #15
 1065 0024 FEFFFFEB 		bl	RME_Thd_Swt
 112:Source/rme_benchmark.c **** }
 1066              		.loc 1 112 1
 1067 0028 00F020E3 		nop
 1068 002c 0088BDE8 		pop	{fp, pc}
 1069              		.cfi_endproc
 1070              	.LFE16:
 1072              		.section	.rodata
 1073              		.align	2
 1074              	.LC10:
 1075 0150 0D0A4865 		.ascii	"\015\012Hello this is thread recv\000"
 1075      6C6C6F20 
 1075      74686973 
 1075      20697320 
 1075      74687265 
 1076              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_recv,"ax",%progbits
 1077              		.align	2
 1078              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_recv
 1079              		.syntax unified
 1080              		.arm
 1082              	RME_Same_Prc_Thd_Sig_Test_Thd_recv:
 1083              	.LFB17:
 113:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_recv(void)
 114:Source/rme_benchmark.c **** {
 1084              		.loc 1 114 1
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 0
 1087              		@ frame_needed = 1, uses_anonymous_args = 0
 1088 0000 00482DE9 		push	{fp, lr}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 33


 1089              		.cfi_def_cfa_offset 8
 1090              		.cfi_offset 11, -8
 1091              		.cfi_offset 14, -4
 1092 0004 04B08DE2 		add	fp, sp, #4
 1093              		.cfi_def_cfa 11, 4
 115:Source/rme_benchmark.c **** 	USR_DBG_S("\r\nHello this is thread recv");
 1094              		.loc 1 115 2
 1095 0008 000000E3 		movw	r0, #:lower16:.LC10
 1096 000c 000040E3 		movt	r0, #:upper16:.LC10
 1097 0010 FEFFFFEB 		bl	USR_DBG_S
 116:Source/rme_benchmark.c **** 	RME_Sig_Rcv(RME_BOOT_SIG_BENCH,RME_RCV_BS);
 1098              		.loc 1 116 2
 1099 0014 0010A0E3 		mov	r1, #0
 1100 0018 0D00A0E3 		mov	r0, #13
 1101 001c FEFFFFEB 		bl	RME_Sig_Rcv
 117:Source/rme_benchmark.c **** 	RME_Thd_Swt(RME_BOOT_BENCH_SEN_THD,0);
 1102              		.loc 1 117 2
 1103 0020 0010A0E3 		mov	r1, #0
 1104 0024 0E00A0E3 		mov	r0, #14
 1105 0028 FEFFFFEB 		bl	RME_Thd_Swt
 118:Source/rme_benchmark.c **** }
 1106              		.loc 1 118 1
 1107 002c 00F020E3 		nop
 1108 0030 0088BDE8 		pop	{fp, pc}
 1109              		.cfi_endproc
 1110              	.LFE17:
 1112              		.section	.rodata
 1113              		.align	2
 1114              	.LC11:
 1115 016c 0D0A2F2A 		.ascii	"\015\012/****************\000"
 1115      2A2A2A2A 
 1115      2A2A2A2A 
 1115      2A2A2A2A 
 1115      2A2A2A00 
 1116              		.align	2
 1117              	.LC12:
 1118 0180 62656769 		.ascii	"begin RME_Same_Prc_Thd_Sig_Test_Thd_main\000"
 1118      6E20524D 
 1118      455F5361 
 1118      6D655F50 
 1118      72635F54 
 1119 01a9 000000   		.align	2
 1120              	.LC13:
 1121 01ac 2A2A2A2A 		.ascii	"****************/\000"
 1121      2A2A2A2A 
 1121      2A2A2A2A 
 1121      2A2A2A2A 
 1121      2F00
 1122 01be 0000     		.align	2
 1123              	.LC14:
 1124 01c0 0D0A4865 		.ascii	"\015\012Hello this is thread main\000"
 1124      6C6C6F20 
 1124      74686973 
 1124      20697320 
 1124      74687265 
 1125              		.align	2
 1126              	.LC15:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 34


 1127 01dc 0D0A6372 		.ascii	"\015\012create a signal end point      retval= \000"
 1127      65617465 
 1127      20612073 
 1127      69676E61 
 1127      6C20656E 
 1128              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_main,"ax",%progbits
 1129              		.align	2
 1130              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_main
 1131              		.syntax unified
 1132              		.arm
 1134              	RME_Same_Prc_Thd_Sig_Test_Thd_main:
 1135              	.LFB18:
 119:Source/rme_benchmark.c **** 
 120:Source/rme_benchmark.c **** 
 121:Source/rme_benchmark.c **** 
 122:Source/rme_benchmark.c **** 
 123:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test_Thd *********************************
 124:Source/rme_benchmark.c **** Description : The thread for testing same-process thread signal send and receive performance.
 125:Source/rme_benchmark.c **** Input       : None.
 126:Source/rme_benchmark.c **** Output      : None.
 127:Source/rme_benchmark.c **** Return      : None.
 128:Source/rme_benchmark.c **** ******************************************************************************/
 129:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_main(ptr_t TID)
 130:Source/rme_benchmark.c **** {
 1136              		.loc 1 130 1
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 16
 1139              		@ frame_needed = 1, uses_anonymous_args = 0
 1140 0000 00482DE9 		push	{fp, lr}
 1141              		.cfi_def_cfa_offset 8
 1142              		.cfi_offset 11, -8
 1143              		.cfi_offset 14, -4
 1144 0004 04B08DE2 		add	fp, sp, #4
 1145              		.cfi_def_cfa 11, 4
 1146 0008 20D04DE2 		sub	sp, sp, #32
 1147 000c 10000BE5 		str	r0, [fp, #-16]
 131:Source/rme_benchmark.c **** 				USR_DBG_S("\r\n");
 1148              		.loc 1 131 5
 1149 0010 000000E3 		movw	r0, #:lower16:.LC7
 1150 0014 000040E3 		movt	r0, #:upper16:.LC7
 1151 0018 FEFFFFEB 		bl	USR_DBG_S
 132:Source/rme_benchmark.c **** 		    	USR_DBG_S("\r\n/****************");
 1152              		.loc 1 132 8
 1153 001c 000000E3 		movw	r0, #:lower16:.LC11
 1154 0020 000040E3 		movt	r0, #:upper16:.LC11
 1155 0024 FEFFFFEB 		bl	USR_DBG_S
 133:Source/rme_benchmark.c **** 		    	USR_DBG_S("begin RME_Same_Prc_Thd_Sig_Test_Thd_main");
 1156              		.loc 1 133 8
 1157 0028 000000E3 		movw	r0, #:lower16:.LC12
 1158 002c 000040E3 		movt	r0, #:upper16:.LC12
 1159 0030 FEFFFFEB 		bl	USR_DBG_S
 134:Source/rme_benchmark.c **** 		    	USR_DBG_S("****************/");
 1160              		.loc 1 134 8
 1161 0034 000000E3 		movw	r0, #:lower16:.LC13
 1162 0038 000040E3 		movt	r0, #:upper16:.LC13
 1163 003c FEFFFFEB 		bl	USR_DBG_S
 135:Source/rme_benchmark.c **** 		    	USR_DBG_S("\r\nHello this is thread main");
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 35


 1164              		.loc 1 135 8
 1165 0040 000000E3 		movw	r0, #:lower16:.LC14
 1166 0044 000040E3 		movt	r0, #:upper16:.LC14
 1167 0048 FEFFFFEB 		bl	USR_DBG_S
 136:Source/rme_benchmark.c **** 		    	ret_t Retval;
 137:Source/rme_benchmark.c **** 		    	/* create a signal end point */
 138:Source/rme_benchmark.c **** 		    	Retval=RME_Sig_Crt(RME_BOOT_SIG_CPT,RME_BOOT_SIG_BENCH);
 1168              		.loc 1 138 15
 1169 004c 0D10A0E3 		mov	r1, #13
 1170 0050 0C00A0E3 		mov	r0, #12
 1171 0054 FEFFFFEB 		bl	RME_Sig_Crt
 1172 0058 08000BE5 		str	r0, [fp, #-8]
 139:Source/rme_benchmark.c **** 		    	USR_DBG_S("\r\ncreate a signal end point      retval= ");
 1173              		.loc 1 139 8
 1174 005c 000000E3 		movw	r0, #:lower16:.LC15
 1175 0060 000040E3 		movt	r0, #:upper16:.LC15
 1176 0064 FEFFFFEB 		bl	USR_DBG_S
 140:Source/rme_benchmark.c **** 		    	USR_DBG_I(Retval);
 1177              		.loc 1 140 8
 1178 0068 08001BE5 		ldr	r0, [fp, #-8]
 1179 006c FEFFFFEB 		bl	USR_DBG_I
 141:Source/rme_benchmark.c **** 			    /* create signal test thread */
 142:Source/rme_benchmark.c **** 		    	//void RME_Thd_Create(cid_t Cap_Thd,ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Si
 143:Source/rme_benchmark.c **** 			    RME_Thd_Create(RME_BOOT_BENCH_SEN_THD,RME_TID_3,2,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_send,
 1180              		.loc 1 143 8
 1181 0070 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1182 0074 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1183 0078 003000E3 		movw	r3, #:lower16:Cur_addr
 1184 007c 003040E3 		movt	r3, #:upper16:Cur_addr
 1185 0080 003093E5 		ldr	r3, [r3]
 1186 0084 0611E0E3 		mvn	r1, #-2147483647
 1187 0088 08108DE5 		str	r1, [sp, #8]
 1188 008c 0D10A0E3 		mov	r1, #13
 1189 0090 04108DE5 		str	r1, [sp, #4]
 1190 0094 00308DE5 		str	r3, [sp]
 1191 0098 0230A0E1 		mov	r3, r2
 1192 009c 0220A0E3 		mov	r2, #2
 1193 00a0 0310A0E3 		mov	r1, #3
 1194 00a4 0E00A0E3 		mov	r0, #14
 1195 00a8 FEFFFFEB 		bl	RME_Thd_Create
 144:Source/rme_benchmark.c **** 			    			   Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME);
 145:Source/rme_benchmark.c **** 			    Cur_addr+=512;
 1196              		.loc 1 145 16
 1197 00ac 003000E3 		movw	r3, #:lower16:Cur_addr
 1198 00b0 003040E3 		movt	r3, #:upper16:Cur_addr
 1199 00b4 003093E5 		ldr	r3, [r3]
 1200 00b8 022C83E2 		add	r2, r3, #512
 1201 00bc 003000E3 		movw	r3, #:lower16:Cur_addr
 1202 00c0 003040E3 		movt	r3, #:upper16:Cur_addr
 1203 00c4 002083E5 		str	r2, [r3]
 146:Source/rme_benchmark.c **** 			    RME_Thd_Create(RME_BOOT_BENCH_RCV_THD,RME_TID_4,2,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_send,
 1204              		.loc 1 146 8
 1205 00c8 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1206 00cc 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_send
 1207 00d0 003000E3 		movw	r3, #:lower16:Cur_addr
 1208 00d4 003040E3 		movt	r3, #:upper16:Cur_addr
 1209 00d8 003093E5 		ldr	r3, [r3]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 36


 1210 00dc 0611E0E3 		mvn	r1, #-2147483647
 1211 00e0 08108DE5 		str	r1, [sp, #8]
 1212 00e4 0D10A0E3 		mov	r1, #13
 1213 00e8 04108DE5 		str	r1, [sp, #4]
 1214 00ec 00308DE5 		str	r3, [sp]
 1215 00f0 0230A0E1 		mov	r3, r2
 1216 00f4 0220A0E3 		mov	r2, #2
 1217 00f8 0410A0E3 		mov	r1, #4
 1218 00fc 0F00A0E3 		mov	r0, #15
 1219 0100 FEFFFFEB 		bl	RME_Thd_Create
 147:Source/rme_benchmark.c **** 			    			   Cur_addr,RME_BOOT_SIG_BENCH,RME_THD_INF_TIME);
 148:Source/rme_benchmark.c **** 			    RME_Thd_Swt(RME_BOOT_BENCH_SEN_THD,0);
 1220              		.loc 1 148 8
 1221 0104 0010A0E3 		mov	r1, #0
 1222 0108 0E00A0E3 		mov	r0, #14
 1223 010c FEFFFFEB 		bl	RME_Thd_Swt
 149:Source/rme_benchmark.c **** 
 150:Source/rme_benchmark.c **** 
 151:Source/rme_benchmark.c **** }
 1224              		.loc 1 151 1
 1225 0110 00F020E3 		nop
 1226 0114 04D04BE2 		sub	sp, fp, #4
 1227              		.cfi_def_cfa 13, 8
 1228              		@ sp needed
 1229 0118 0088BDE8 		pop	{fp, pc}
 1230              		.cfi_endproc
 1231              	.LFE18:
 1233              		.section	.rodata
 1234 0206 0000     		.align	2
 1235              	.LC16:
 1236 0208 62656769 		.ascii	"begin RME_Same_Prc_Thd_Sig_Test_Thd_init\000"
 1236      6E20524D 
 1236      455F5361 
 1236      6D655F50 
 1236      72635F54 
 1237 0231 000000   		.align	2
 1238              	.LC17:
 1239 0234 0D0A4865 		.ascii	"\015\012Hello this is thread init\000"
 1239      6C6C6F20 
 1239      74686973 
 1239      20697320 
 1239      74687265 
 1240              		.section	.text.RME_Same_Prc_Thd_Sig_Test_Thd_init,"ax",%progbits
 1241              		.align	2
 1242              		.global	RME_Same_Prc_Thd_Sig_Test_Thd_init
 1243              		.syntax unified
 1244              		.arm
 1246              	RME_Same_Prc_Thd_Sig_Test_Thd_init:
 1247              	.LFB19:
 152:Source/rme_benchmark.c **** 
 153:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Test_Thd_init(void)
 154:Source/rme_benchmark.c **** {
 1248              		.loc 1 154 1
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 1, uses_anonymous_args = 0
 1252 0000 00482DE9 		push	{fp, lr}
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 37


 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 11, -8
 1255              		.cfi_offset 14, -4
 1256 0004 04B08DE2 		add	fp, sp, #4
 1257              		.cfi_def_cfa 11, 4
 1258 0008 10D04DE2 		sub	sp, sp, #16
 155:Source/rme_benchmark.c **** 	                USR_DBG_S("\r\n");
 1259              		.loc 1 155 18
 1260 000c 000000E3 		movw	r0, #:lower16:.LC7
 1261 0010 000040E3 		movt	r0, #:upper16:.LC7
 1262 0014 FEFFFFEB 		bl	USR_DBG_S
 156:Source/rme_benchmark.c **** 			    	USR_DBG_S("\r\n/****************");
 1263              		.loc 1 156 9
 1264 0018 000000E3 		movw	r0, #:lower16:.LC11
 1265 001c 000040E3 		movt	r0, #:upper16:.LC11
 1266 0020 FEFFFFEB 		bl	USR_DBG_S
 157:Source/rme_benchmark.c **** 			    	USR_DBG_S("begin RME_Same_Prc_Thd_Sig_Test_Thd_init");
 1267              		.loc 1 157 9
 1268 0024 000000E3 		movw	r0, #:lower16:.LC16
 1269 0028 000040E3 		movt	r0, #:upper16:.LC16
 1270 002c FEFFFFEB 		bl	USR_DBG_S
 158:Source/rme_benchmark.c **** 			    	USR_DBG_S("****************/");
 1271              		.loc 1 158 9
 1272 0030 000000E3 		movw	r0, #:lower16:.LC13
 1273 0034 000040E3 		movt	r0, #:upper16:.LC13
 1274 0038 FEFFFFEB 		bl	USR_DBG_S
 159:Source/rme_benchmark.c **** 			    	USR_DBG_S("\r\nHello this is thread init");
 1275              		.loc 1 159 9
 1276 003c 000000E3 		movw	r0, #:lower16:.LC17
 1277 0040 000040E3 		movt	r0, #:upper16:.LC17
 1278 0044 FEFFFFEB 		bl	USR_DBG_S
 160:Source/rme_benchmark.c **** 			    	RME_Thd_Create(RME_BOOT_BENCH_THD_MAIN,RME_TID_2,1,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_mai
 1279              		.loc 1 160 9
 1280 0048 002000E3 		movw	r2, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_main
 1281 004c 002040E3 		movt	r2, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_main
 1282 0050 003000E3 		movw	r3, #:lower16:Cur_addr
 1283 0054 003040E3 		movt	r3, #:upper16:Cur_addr
 1284 0058 003093E5 		ldr	r3, [r3]
 1285 005c 0611E0E3 		mvn	r1, #-2147483647
 1286 0060 08108DE5 		str	r1, [sp, #8]
 1287 0064 0219A0E3 		mov	r1, #32768
 1288 0068 04108DE5 		str	r1, [sp, #4]
 1289 006c 00308DE5 		str	r3, [sp]
 1290 0070 0230A0E1 		mov	r3, r2
 1291 0074 0120A0E3 		mov	r2, #1
 1292 0078 0210A0E3 		mov	r1, #2
 1293 007c 1000A0E3 		mov	r0, #16
 1294 0080 FEFFFFEB 		bl	RME_Thd_Create
 161:Source/rme_benchmark.c **** 				    Cur_addr,RME_CID_NULL,RME_THD_INF_TIME);
 162:Source/rme_benchmark.c **** 			    	Cur_addr+=512;
 1295              		.loc 1 162 17
 1296 0084 003000E3 		movw	r3, #:lower16:Cur_addr
 1297 0088 003040E3 		movt	r3, #:upper16:Cur_addr
 1298 008c 003093E5 		ldr	r3, [r3]
 1299 0090 022C83E2 		add	r2, r3, #512
 1300 0094 003000E3 		movw	r3, #:lower16:Cur_addr
 1301 0098 003040E3 		movt	r3, #:upper16:Cur_addr
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 38


 1302 009c 002083E5 		str	r2, [r3]
 163:Source/rme_benchmark.c **** 			    	RME_Thd_Swt(RME_BOOT_BENCH_THD_MAIN,0);
 1303              		.loc 1 163 9
 1304 00a0 0010A0E3 		mov	r1, #0
 1305 00a4 1000A0E3 		mov	r0, #16
 1306 00a8 FEFFFFEB 		bl	RME_Thd_Swt
 164:Source/rme_benchmark.c **** }
 1307              		.loc 1 164 1
 1308 00ac 00F020E3 		nop
 1309 00b0 04D04BE2 		sub	sp, fp, #4
 1310              		.cfi_def_cfa 13, 8
 1311              		@ sp needed
 1312 00b4 0088BDE8 		pop	{fp, pc}
 1313              		.cfi_endproc
 1314              	.LFE19:
 1316              		.section	.rodata
 1317              		.align	2
 1318              	.LC18:
 1319 0250 62656769 		.ascii	"begin RME_Same_Prc_Thd_Sig_Testinit\000"
 1319      6E20524D 
 1319      455F5361 
 1319      6D655F50 
 1319      72635F54 
 1320              		.align	2
 1321              	.LC19:
 1322 0274 0D0A5472 		.ascii	"\015\012Try to switch to main thread - should fail "
 1322      7920746F 
 1322      20737769 
 1322      74636820 
 1322      746F206D 
 1323 02a1 20726574 		.ascii	" retval= \000"
 1323      76616C3D 
 1323      2000
 1324              		.section	.text.RME_Same_Prc_Thd_Sig_Testinit,"ax",%progbits
 1325              		.align	2
 1326              		.global	RME_Same_Prc_Thd_Sig_Testinit
 1327              		.syntax unified
 1328              		.arm
 1330              	RME_Same_Prc_Thd_Sig_Testinit:
 1331              	.LFB20:
 165:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Testinit *************************************
 166:Source/rme_benchmark.c **** Description : The same-process thread signal send and receive test code.
 167:Source/rme_benchmark.c **** Input       : None.
 168:Source/rme_benchmark.c **** Output      : None.
 169:Source/rme_benchmark.c **** Return      : None.
 170:Source/rme_benchmark.c **** ******************************************************************************/
 171:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Sig_Testinit(void)
 172:Source/rme_benchmark.c **** {
 1332              		.loc 1 172 1
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 8
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336 0000 00482DE9 		push	{fp, lr}
 1337              		.cfi_def_cfa_offset 8
 1338              		.cfi_offset 11, -8
 1339              		.cfi_offset 14, -4
 1340 0004 04B08DE2 		add	fp, sp, #4
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 39


 1341              		.cfi_def_cfa 11, 4
 1342 0008 18D04DE2 		sub	sp, sp, #24
 173:Source/rme_benchmark.c **** 	    	USR_DBG_S("\r\n");
 1343              		.loc 1 173 7
 1344 000c 000000E3 		movw	r0, #:lower16:.LC7
 1345 0010 000040E3 		movt	r0, #:upper16:.LC7
 1346 0014 FEFFFFEB 		bl	USR_DBG_S
 174:Source/rme_benchmark.c **** 	    	USR_DBG_S("\r\n/****************");
 1347              		.loc 1 174 7
 1348 0018 000000E3 		movw	r0, #:lower16:.LC11
 1349 001c 000040E3 		movt	r0, #:upper16:.LC11
 1350 0020 FEFFFFEB 		bl	USR_DBG_S
 175:Source/rme_benchmark.c **** 	    	USR_DBG_S("begin RME_Same_Prc_Thd_Sig_Testinit");
 1351              		.loc 1 175 7
 1352 0024 000000E3 		movw	r0, #:lower16:.LC18
 1353 0028 000040E3 		movt	r0, #:upper16:.LC18
 1354 002c FEFFFFEB 		bl	USR_DBG_S
 176:Source/rme_benchmark.c **** 	    	USR_DBG_S("****************/");
 1355              		.loc 1 176 7
 1356 0030 000000E3 		movw	r0, #:lower16:.LC13
 1357 0034 000040E3 		movt	r0, #:upper16:.LC13
 1358 0038 FEFFFFEB 		bl	USR_DBG_S
 177:Source/rme_benchmark.c **** 	    	USR_DBG_S("\r\n");
 1359              		.loc 1 177 7
 1360 003c 000000E3 		movw	r0, #:lower16:.LC7
 1361 0040 000040E3 		movt	r0, #:upper16:.LC7
 1362 0044 FEFFFFEB 		bl	USR_DBG_S
 178:Source/rme_benchmark.c **** 		    ret_t Retval;
 179:Source/rme_benchmark.c **** 		    cnt_t Count;
 180:Source/rme_benchmark.c **** 		    ptr_t Stack_Addr;
 181:Source/rme_benchmark.c **** 		    ptr_t Temp;
 182:Source/rme_benchmark.c **** 		    /* Initialize the thread's stack before entering it */
 183:Source/rme_benchmark.c **** 		    Stack_Addr=(ptr_t)&RME_Stack[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 1363              		.loc 1 183 17
 1364 0048 64319FE5 		ldr	r3, .L60
 1365 004c 08300BE5 		str	r3, [fp, #-8]
 184:Source/rme_benchmark.c **** 		                               (ptr_t)RME_Thd_Stub,
 185:Source/rme_benchmark.c **** 		                               1, 2, 3, 4); */
 186:Source/rme_benchmark.c **** 
 187:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 1366              		.loc 1 187 7
 1367 0050 000000E3 		movw	r0, #:lower16:.LC2
 1368 0054 000040E3 		movt	r0, #:upper16:.LC2
 1369 0058 FEFFFFEB 		bl	USR_DBG_S
 188:Source/rme_benchmark.c **** 		    USR_DBG_H((ptr_t)(&RME_Stack[2047]));
 1370              		.loc 1 188 7
 1371 005c 54319FE5 		ldr	r3, .L60+4
 1372 0060 0300A0E1 		mov	r0, r3
 1373 0064 FEFFFFEB 		bl	USR_DBG_H
 189:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 1374              		.loc 1 189 7
 1375 0068 000000E3 		movw	r0, #:lower16:.LC3
 1376 006c 000040E3 		movt	r0, #:upper16:.LC3
 1377 0070 FEFFFFEB 		bl	USR_DBG_S
 190:Source/rme_benchmark.c **** 		    USR_DBG_H(Stack_Addr);
 1378              		.loc 1 190 7
 1379 0074 08001BE5 		ldr	r0, [fp, #-8]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 40


 1380 0078 FEFFFFEB 		bl	USR_DBG_H
 191:Source/rme_benchmark.c **** 
 192:Source/rme_benchmark.c **** 		    /* create a main thread */
 193:Source/rme_benchmark.c **** 		    Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,RME_BOOT_BENCH_THD,
 1381              		.loc 1 193 14
 1382 007c 003000E3 		movw	r3, #:lower16:Cur_addr
 1383 0080 003040E3 		movt	r3, #:upper16:Cur_addr
 1384 0084 003093E5 		ldr	r3, [r3]
 1385 0088 0020A0E3 		mov	r2, #0
 1386 008c 08208DE5 		str	r2, [sp, #8]
 1387 0090 04308DE5 		str	r3, [sp, #4]
 1388 0094 1F30A0E3 		mov	r3, #31
 1389 0098 00308DE5 		str	r3, [sp]
 1390 009c 0230A0E3 		mov	r3, #2
 1391 00a0 0820A0E3 		mov	r2, #8
 1392 00a4 0510A0E3 		mov	r1, #5
 1393 00a8 0000A0E3 		mov	r0, #0
 1394 00ac FEFFFFEB 		bl	RME_Thd_Crt
 1395 00b0 0C000BE5 		str	r0, [fp, #-12]
 194:Source/rme_benchmark.c **** 		                       RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,Cur_addr,0);
 195:Source/rme_benchmark.c **** 		    Cur_addr+=512;
 1396              		.loc 1 195 15
 1397 00b4 003000E3 		movw	r3, #:lower16:Cur_addr
 1398 00b8 003040E3 		movt	r3, #:upper16:Cur_addr
 1399 00bc 003093E5 		ldr	r3, [r3]
 1400 00c0 022C83E2 		add	r2, r3, #512
 1401 00c4 003000E3 		movw	r3, #:lower16:Cur_addr
 1402 00c8 003040E3 		movt	r3, #:upper16:Cur_addr
 1403 00cc 002083E5 		str	r2, [r3]
 196:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\ncreate a thread      retval= ");
 1404              		.loc 1 196 7
 1405 00d0 000000E3 		movw	r0, #:lower16:.LC4
 1406 00d4 000040E3 		movt	r0, #:upper16:.LC4
 1407 00d8 FEFFFFEB 		bl	USR_DBG_S
 197:Source/rme_benchmark.c **** 		    USR_DBG_I(Retval);
 1408              		.loc 1 197 7
 1409 00dc 0C001BE5 		ldr	r0, [fp, #-12]
 1410 00e0 FEFFFFEB 		bl	USR_DBG_I
 198:Source/rme_benchmark.c **** 
 199:Source/rme_benchmark.c **** 		    /* Bind the thread to the processor */
 200:Source/rme_benchmark.c **** 		    Retval=RME_Thd_Sched_Bind(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_CID_NULL,
 1411              		.loc 1 200 14
 1412 00e4 0030A0E3 		mov	r3, #0
 1413 00e8 04308DE5 		str	r3, [sp, #4]
 1414 00ec 0030A0E3 		mov	r3, #0
 1415 00f0 00308DE5 		str	r3, [sp]
 1416 00f4 0130A0E3 		mov	r3, #1
 1417 00f8 0229A0E3 		mov	r2, #32768
 1418 00fc 0310A0E3 		mov	r1, #3
 1419 0100 0800A0E3 		mov	r0, #8
 1420 0104 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 1421 0108 0C000BE5 		str	r0, [fp, #-12]
 201:Source/rme_benchmark.c **** 		                              RME_TID_1,0,RME_BOOT_HYPER_KOM_VADDR);
 202:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\nBind the thread to the processor retval= ");
 1422              		.loc 1 202 7
 1423 010c 000000E3 		movw	r0, #:lower16:.LC5
 1424 0110 000040E3 		movt	r0, #:upper16:.LC5
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 41


 1425 0114 FEFFFFEB 		bl	USR_DBG_S
 203:Source/rme_benchmark.c **** 		    USR_DBG_I(Retval);
 1426              		.loc 1 203 7
 1427 0118 0C001BE5 		ldr	r0, [fp, #-12]
 1428 011c FEFFFFEB 		bl	USR_DBG_I
 204:Source/rme_benchmark.c **** 		    /* Set the execution information */
 205:Source/rme_benchmark.c **** 
 206:Source/rme_benchmark.c **** 		    Retval=RME_Thd_Exec_Set(RME_BOOT_BENCH_THD,(ptr_t)RME_Same_Prc_Thd_Sig_Test_Thd_init,Stack_Ad
 1429              		.loc 1 206 14
 1430 0120 001000E3 		movw	r1, #:lower16:RME_Same_Prc_Thd_Sig_Test_Thd_init
 1431 0124 001040E3 		movt	r1, #:upper16:RME_Same_Prc_Thd_Sig_Test_Thd_init
 1432 0128 0130A0E3 		mov	r3, #1
 1433 012c 08201BE5 		ldr	r2, [fp, #-8]
 1434 0130 0800A0E3 		mov	r0, #8
 1435 0134 FEFFFFEB 		bl	RME_Thd_Exec_Set
 1436 0138 0C000BE5 		str	r0, [fp, #-12]
 207:Source/rme_benchmark.c **** 		    //RME_Stack[2000]=1234;
 208:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\nSet the execution information retval= ");
 1437              		.loc 1 208 7
 1438 013c 000000E3 		movw	r0, #:lower16:.LC6
 1439 0140 000040E3 		movt	r0, #:upper16:.LC6
 1440 0144 FEFFFFEB 		bl	USR_DBG_S
 209:Source/rme_benchmark.c **** 		    USR_DBG_I(Retval);
 1441              		.loc 1 209 7
 1442 0148 0C001BE5 		ldr	r0, [fp, #-12]
 1443 014c FEFFFFEB 		bl	USR_DBG_I
 210:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\n");
 1444              		.loc 1 210 7
 1445 0150 000000E3 		movw	r0, #:lower16:.LC7
 1446 0154 000040E3 		movt	r0, #:upper16:.LC7
 1447 0158 FEFFFFEB 		bl	USR_DBG_S
 211:Source/rme_benchmark.c **** 		    /* Delegate some timeslice to it */
 212:Source/rme_benchmark.c **** 
 213:Source/rme_benchmark.c **** 		    Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_THD_INF_TIME);
 1448              		.loc 1 213 14
 1449 015c 0621E0E3 		mvn	r2, #-2147483647
 1450 0160 0310A0E3 		mov	r1, #3
 1451 0164 0800A0E3 		mov	r0, #8
 1452 0168 FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1453 016c 0C000BE5 		str	r0, [fp, #-12]
 214:Source/rme_benchmark.c **** 
 215:Source/rme_benchmark.c **** 
 216:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1454              		.loc 1 216 7
 1455 0170 000000E3 		movw	r0, #:lower16:.LC8
 1456 0174 000040E3 		movt	r0, #:upper16:.LC8
 1457 0178 FEFFFFEB 		bl	USR_DBG_S
 217:Source/rme_benchmark.c **** 		    USR_DBG_I(Retval);
 1458              		.loc 1 217 7
 1459 017c 0C001BE5 		ldr	r0, [fp, #-12]
 1460 0180 FEFFFFEB 		bl	USR_DBG_I
 218:Source/rme_benchmark.c **** 
 219:Source/rme_benchmark.c **** 
 220:Source/rme_benchmark.c **** 		    /* switch to main test thd  */
 221:Source/rme_benchmark.c **** 		    //RME_Thd_Create(ptr_t Tid,ptr_t Prc,ptr_t Entry,ptr_t Raddr,cid_t Cap_Sig,ptr_t Time)
 222:Source/rme_benchmark.c **** 		    Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 1461              		.loc 1 222 14
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 42


 1462 0184 0010A0E3 		mov	r1, #0
 1463 0188 0800A0E3 		mov	r0, #8
 1464 018c FEFFFFEB 		bl	RME_Thd_Swt
 1465 0190 0C000BE5 		str	r0, [fp, #-12]
 223:Source/rme_benchmark.c **** 		    USR_DBG_S("\r\nTry to switch to main thread - should fail  retval= ");
 1466              		.loc 1 223 7
 1467 0194 000000E3 		movw	r0, #:lower16:.LC19
 1468 0198 000040E3 		movt	r0, #:upper16:.LC19
 1469 019c FEFFFFEB 		bl	USR_DBG_S
 224:Source/rme_benchmark.c **** 		    USR_DBG_I(Retval);
 1470              		.loc 1 224 7
 1471 01a0 0C001BE5 		ldr	r0, [fp, #-12]
 1472 01a4 FEFFFFEB 		bl	USR_DBG_I
 225:Source/rme_benchmark.c **** 
 226:Source/rme_benchmark.c **** }
 1473              		.loc 1 226 1
 1474 01a8 00F020E3 		nop
 1475 01ac 04D04BE2 		sub	sp, fp, #4
 1476              		.cfi_def_cfa 13, 8
 1477              		@ sp needed
 1478 01b0 0088BDE8 		pop	{fp, pc}
 1479              	.L61:
 1480              		.align	2
 1481              	.L60:
 1482 01b4 401F0000 		.word	RME_Stack+8000
 1483 01b8 FC1F0000 		.word	RME_Stack+8188
 1484              		.cfi_endproc
 1485              	.LFE20:
 1487              		.section	.rodata
 1488 02ab 00       		.align	2
 1489              	.LC20:
 1490 02ac 62656769 		.ascii	"begin RME_Same_Prc_Thd_Switch_Test\000"
 1490      6E20524D 
 1490      455F5361 
 1490      6D655F50 
 1490      72635F54 
 1491 02cf 00       		.align	2
 1492              	.LC21:
 1493 02d0 0D0A5472 		.ascii	"\015\012Try to switch to that thread - should fail "
 1493      7920746F 
 1493      20737769 
 1493      74636820 
 1493      746F2074 
 1494 02fd 20726574 		.ascii	" retval= \000"
 1494      76616C3D 
 1494      2000
 1495 0307 00       		.align	2
 1496              	.LC22:
 1497 0308 0D0A5472 		.ascii	"\015\012Try to switch to that thread  retval= \000"
 1497      7920746F 
 1497      20737769 
 1497      74636820 
 1497      746F2074 
 1498              		.section	.text.RME_Same_Prc_Thd_Switch_Test,"ax",%progbits
 1499              		.align	2
 1500              		.global	RME_Same_Prc_Thd_Switch_Test
 1501              		.syntax unified
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 43


 1502              		.arm
 1504              	RME_Same_Prc_Thd_Switch_Test:
 1505              	.LFB21:
 227:Source/rme_benchmark.c **** /* Function:RME_Same_Prc_Thd_Switch_Test *************************************
 228:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 229:Source/rme_benchmark.c **** Input       : None.
 230:Source/rme_benchmark.c **** Output      : None.
 231:Source/rme_benchmark.c **** Return      : None.
 232:Source/rme_benchmark.c **** ******************************************************************************/
 233:Source/rme_benchmark.c **** void RME_Same_Prc_Thd_Switch_Test(void)
 234:Source/rme_benchmark.c **** {
 1506              		.loc 1 234 1
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 16
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510 0000 00482DE9 		push	{fp, lr}
 1511              		.cfi_def_cfa_offset 8
 1512              		.cfi_offset 11, -8
 1513              		.cfi_offset 14, -4
 1514 0004 04B08DE2 		add	fp, sp, #4
 1515              		.cfi_def_cfa 11, 4
 1516 0008 20D04DE2 		sub	sp, sp, #32
 235:Source/rme_benchmark.c **** 	USR_DBG_S("\r\n/****************");
 1517              		.loc 1 235 2
 1518 000c 000000E3 		movw	r0, #:lower16:.LC11
 1519 0010 000040E3 		movt	r0, #:upper16:.LC11
 1520 0014 FEFFFFEB 		bl	USR_DBG_S
 236:Source/rme_benchmark.c **** 	USR_DBG_S("begin RME_Same_Prc_Thd_Switch_Test");
 1521              		.loc 1 236 2
 1522 0018 000000E3 		movw	r0, #:lower16:.LC20
 1523 001c 000040E3 		movt	r0, #:upper16:.LC20
 1524 0020 FEFFFFEB 		bl	USR_DBG_S
 237:Source/rme_benchmark.c **** 	USR_DBG_S("****************/");
 1525              		.loc 1 237 2
 1526 0024 000000E3 		movw	r0, #:lower16:.LC13
 1527 0028 000040E3 		movt	r0, #:upper16:.LC13
 1528 002c FEFFFFEB 		bl	USR_DBG_S
 238:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 239:Source/rme_benchmark.c ****     ret_t Retval;
 240:Source/rme_benchmark.c ****     cnt_t Count;
 241:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 242:Source/rme_benchmark.c ****     ptr_t Temp;
 243:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 244:Source/rme_benchmark.c ****     Stack_Addr=(ptr_t)&RME_Stack[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 1529              		.loc 1 244 15
 1530 0030 70319FE5 		ldr	r3, .L66
 1531 0034 0C300BE5 		str	r3, [fp, #-12]
 245:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 246:Source/rme_benchmark.c ****                                1, 2, 3, 4); */
 247:Source/rme_benchmark.c **** 
 248:Source/rme_benchmark.c ****     USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 1532              		.loc 1 248 5
 1533 0038 000000E3 		movw	r0, #:lower16:.LC2
 1534 003c 000040E3 		movt	r0, #:upper16:.LC2
 1535 0040 FEFFFFEB 		bl	USR_DBG_S
 249:Source/rme_benchmark.c ****     USR_DBG_H((ptr_t)(&RME_Stack[2047]));
 1536              		.loc 1 249 5
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 44


 1537 0044 60319FE5 		ldr	r3, .L66+4
 1538 0048 0300A0E1 		mov	r0, r3
 1539 004c FEFFFFEB 		bl	USR_DBG_H
 250:Source/rme_benchmark.c ****     USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 1540              		.loc 1 250 5
 1541 0050 000000E3 		movw	r0, #:lower16:.LC3
 1542 0054 000040E3 		movt	r0, #:upper16:.LC3
 1543 0058 FEFFFFEB 		bl	USR_DBG_S
 251:Source/rme_benchmark.c ****     USR_DBG_H(Stack_Addr);
 1544              		.loc 1 251 5
 1545 005c 0C001BE5 		ldr	r0, [fp, #-12]
 1546 0060 FEFFFFEB 		bl	USR_DBG_H
 252:Source/rme_benchmark.c **** 
 253:Source/rme_benchmark.c ****     /* There are still many bugs in the kernel. Need a white-box test to guarantee
 254:Source/rme_benchmark.c ****      * that it is free of bugs. Find a scheme to do that */
 255:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 256:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 257:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 258:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 259:Source/rme_benchmark.c ****     Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,RME_BOOT_BENCH_THD,
 1547              		.loc 1 259 12
 1548 0064 0030A0E3 		mov	r3, #0
 1549 0068 08308DE5 		str	r3, [sp, #8]
 1550 006c 093AA0E3 		mov	r3, #36864
 1551 0070 04308DE5 		str	r3, [sp, #4]
 1552 0074 1F30A0E3 		mov	r3, #31
 1553 0078 00308DE5 		str	r3, [sp]
 1554 007c 0230A0E3 		mov	r3, #2
 1555 0080 0820A0E3 		mov	r2, #8
 1556 0084 0510A0E3 		mov	r1, #5
 1557 0088 0000A0E3 		mov	r0, #0
 1558 008c FEFFFFEB 		bl	RME_Thd_Crt
 1559 0090 10000BE5 		str	r0, [fp, #-16]
 260:Source/rme_benchmark.c ****                        RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,RME_BOOT_BENCH_KOM_FRONTIER,0);
 261:Source/rme_benchmark.c ****     USR_DBG_S("\r\ncreate a thread      retval= ");
 1560              		.loc 1 261 5
 1561 0094 000000E3 		movw	r0, #:lower16:.LC4
 1562 0098 000040E3 		movt	r0, #:upper16:.LC4
 1563 009c FEFFFFEB 		bl	USR_DBG_S
 262:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1564              		.loc 1 262 5
 1565 00a0 10001BE5 		ldr	r0, [fp, #-16]
 1566 00a4 FEFFFFEB 		bl	USR_DBG_I
 263:Source/rme_benchmark.c **** 
 264:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 265:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,RME_BOOT_BENCH_THD,
 266:Source/rme_benchmark.c ****     		          RME_PARAM_D1(RME_BOOT_INIT_THD)|RME_PARAM_D0(RME_CID_NULL),
 267:Source/rme_benchmark.c **** 					  RME_PARAM_D1(RME_TID_2)|RME_PARAM_D0(RME_BOOT_INIT_PRC),
 268:Source/rme_benchmark.c **** 					  RME_BOOT_HYPER_KOM_VADDR);*/
 269:Source/rme_benchmark.c ****     Retval=RME_Thd_Sched_Bind(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_CID_NULL,
 1567              		.loc 1 269 12
 1568 00a8 0030A0E3 		mov	r3, #0
 1569 00ac 04308DE5 		str	r3, [sp, #4]
 1570 00b0 0030A0E3 		mov	r3, #0
 1571 00b4 00308DE5 		str	r3, [sp]
 1572 00b8 0230A0E3 		mov	r3, #2
 1573 00bc 0229A0E3 		mov	r2, #32768
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 45


 1574 00c0 0310A0E3 		mov	r1, #3
 1575 00c4 0800A0E3 		mov	r0, #8
 1576 00c8 FEFFFFEB 		bl	RME_Thd_Sched_Bind
 1577 00cc 10000BE5 		str	r0, [fp, #-16]
 270:Source/rme_benchmark.c ****                               RME_TID_2,0,RME_BOOT_HYPER_KOM_VADDR);
 271:Source/rme_benchmark.c ****     USR_DBG_S("\r\nBind the thread to the processor retval= ");
 1578              		.loc 1 271 5
 1579 00d0 000000E3 		movw	r0, #:lower16:.LC5
 1580 00d4 000040E3 		movt	r0, #:upper16:.LC5
 1581 00d8 FEFFFFEB 		bl	USR_DBG_S
 272:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1582              		.loc 1 272 5
 1583 00dc 10001BE5 		ldr	r0, [fp, #-16]
 1584 00e0 FEFFFFEB 		bl	USR_DBG_I
 273:Source/rme_benchmark.c ****     extern void RME_Deadloop(void);
 274:Source/rme_benchmark.c ****     /* Set the execution information */
 275:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,RME_BOOT_BENCH_THD,
 276:Source/rme_benchmark.c **** 	         	 	 (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 277:Source/rme_benchmark.c ****     		         //(ptr_t)RME_Deadloop,
 278:Source/rme_benchmark.c **** 					 Stack_Addr,RME_TID_2);*/
 279:Source/rme_benchmark.c ****     Retval=RME_Thd_Exec_Set(RME_BOOT_BENCH_THD,(ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,Stack_Addr,R
 1585              		.loc 1 279 12
 1586 00e4 001000E3 		movw	r1, #:lower16:RME_Same_Prc_Thd_Switch_Test_Thd
 1587 00e8 001040E3 		movt	r1, #:upper16:RME_Same_Prc_Thd_Switch_Test_Thd
 1588 00ec 0230A0E3 		mov	r3, #2
 1589 00f0 0C201BE5 		ldr	r2, [fp, #-12]
 1590 00f4 0800A0E3 		mov	r0, #8
 1591 00f8 FEFFFFEB 		bl	RME_Thd_Exec_Set
 1592 00fc 10000BE5 		str	r0, [fp, #-16]
 280:Source/rme_benchmark.c ****     //RME_Stack[2000]=1234;
 281:Source/rme_benchmark.c ****     USR_DBG_S("\r\nSet the execution information retval= ");
 1593              		.loc 1 281 5
 1594 0100 000000E3 		movw	r0, #:lower16:.LC6
 1595 0104 000040E3 		movt	r0, #:upper16:.LC6
 1596 0108 FEFFFFEB 		bl	USR_DBG_S
 282:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1597              		.loc 1 282 5
 1598 010c 10001BE5 		ldr	r0, [fp, #-16]
 1599 0110 FEFFFFEB 		bl	USR_DBG_I
 283:Source/rme_benchmark.c ****     USR_DBG_S("\r\n");
 1600              		.loc 1 283 5
 1601 0114 000000E3 		movw	r0, #:lower16:.LC7
 1602 0118 000040E3 		movt	r0, #:upper16:.LC7
 1603 011c FEFFFFEB 		bl	USR_DBG_S
 284:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 285:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,RME_BOOT_BENCH_THD,
 286:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 287:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 288:Source/rme_benchmark.c ****                       10000000);*/
 289:Source/rme_benchmark.c ****     Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_THD_INF_TIME);
 1604              		.loc 1 289 12
 1605 0120 0621E0E3 		mvn	r2, #-2147483647
 1606 0124 0310A0E3 		mov	r1, #3
 1607 0128 0800A0E3 		mov	r0, #8
 1608 012c FEFFFFEB 		bl	RME_Thd_Time_Xfer
 1609 0130 10000BE5 		str	r0, [fp, #-16]
 290:Source/rme_benchmark.c **** 
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 46


 291:Source/rme_benchmark.c ****     //Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,1000);
 292:Source/rme_benchmark.c ****     USR_DBG_S("\r\nDelegate some timeslice to it retval= ");
 1610              		.loc 1 292 5
 1611 0134 000000E3 		movw	r0, #:lower16:.LC8
 1612 0138 000040E3 		movt	r0, #:upper16:.LC8
 1613 013c FEFFFFEB 		bl	USR_DBG_S
 293:Source/rme_benchmark.c ****          USR_DBG_I(Retval);
 1614              		.loc 1 293 10
 1615 0140 10001BE5 		ldr	r0, [fp, #-16]
 1616 0144 FEFFFFEB 		bl	USR_DBG_I
 294:Source/rme_benchmark.c **** 
 295:Source/rme_benchmark.c ****     Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 1617              		.loc 1 295 12
 1618 0148 0010A0E3 		mov	r1, #0
 1619 014c 0800A0E3 		mov	r0, #8
 1620 0150 FEFFFFEB 		bl	RME_Thd_Swt
 1621 0154 10000BE5 		str	r0, [fp, #-16]
 296:Source/rme_benchmark.c ****     USR_DBG_S("\r\nTry to switch to that thread - should fail  retval= ");
 1622              		.loc 1 296 5
 1623 0158 000000E3 		movw	r0, #:lower16:.LC21
 1624 015c 000040E3 		movt	r0, #:upper16:.LC21
 1625 0160 FEFFFFEB 		bl	USR_DBG_S
 297:Source/rme_benchmark.c ****     USR_DBG_I(Retval);
 1626              		.loc 1 297 5
 1627 0164 10001BE5 		ldr	r0, [fp, #-16]
 1628 0168 FEFFFFEB 		bl	USR_DBG_I
 298:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 299:Source/rme_benchmark.c ****     * composite 324. opted max:323
 300:Source/rme_benchmark.c ****     * all:33.0
 301:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 302:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 303:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 304:Source/rme_benchmark.c ****     * total:16.57
 305:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 306:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 307:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 308:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 309:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 310:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 311:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 312:Source/rme_benchmark.c ****     */
 313:Source/rme_benchmark.c ****     //_RME_Tsc_Init();
 314:Source/rme_benchmark.c ****     //for(Count=0;Count<10000;Count++)
 315:Source/rme_benchmark.c ****     for(Count=0;Count<10;Count++)
 1629              		.loc 1 315 14
 1630 016c 0030A0E3 		mov	r3, #0
 1631 0170 08300BE5 		str	r3, [fp, #-8]
 1632              		.loc 1 315 5
 1633 0174 070000EA 		b	.L63
 1634              	.L64:
 316:Source/rme_benchmark.c ****     {
 317:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 318:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 319:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 320:Source/rme_benchmark.c ****                           0,
 321:Source/rme_benchmark.c ****                           0);*/
 322:Source/rme_benchmark.c ****         //Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 47


 323:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 324:Source/rme_benchmark.c ****        // Time[Count]=Temp-8;
 325:Source/rme_benchmark.c ****         USR_DBG_S("\r\nTry to switch to that thread  retval= ");
 1635              		.loc 1 325 9
 1636 0178 000000E3 		movw	r0, #:lower16:.LC22
 1637 017c 000040E3 		movt	r0, #:upper16:.LC22
 1638 0180 FEFFFFEB 		bl	USR_DBG_S
 326:Source/rme_benchmark.c ****         USR_DBG_I(Retval);
 1639              		.loc 1 326 9
 1640 0184 10001BE5 		ldr	r0, [fp, #-16]
 1641 0188 FEFFFFEB 		bl	USR_DBG_I
 315:Source/rme_benchmark.c ****     {
 1642              		.loc 1 315 31 discriminator 3
 1643 018c 08301BE5 		ldr	r3, [fp, #-8]
 1644 0190 013083E2 		add	r3, r3, #1
 1645 0194 08300BE5 		str	r3, [fp, #-8]
 1646              	.L63:
 315:Source/rme_benchmark.c ****     {
 1647              		.loc 1 315 22 discriminator 1
 1648 0198 08301BE5 		ldr	r3, [fp, #-8]
 1649 019c 090053E3 		cmp	r3, #9
 1650 01a0 F4FFFFDA 		ble	.L64
 1651              	.L65:
 327:Source/rme_benchmark.c ****     }
 328:Source/rme_benchmark.c ****     
 329:Source/rme_benchmark.c ****     // test sig_snd/sig_rcv
 330:Source/rme_benchmark.c **** 
 331:Source/rme_benchmark.c **** 
 332:Source/rme_benchmark.c **** 
 333:Source/rme_benchmark.c ****     while(1);
 1652              		.loc 1 333 10
 1653 01a4 FEFFFFEA 		b	.L65
 1654              	.L67:
 1655              		.align	2
 1656              	.L66:
 1657 01a8 401F0000 		.word	RME_Stack+8000
 1658 01ac FC1F0000 		.word	RME_Stack+8188
 1659              		.cfi_endproc
 1660              	.LFE21:
 1662              		.section	.text.RME_Diff_Prc_Thd_Switch_Test_Thd,"ax",%progbits
 1663              		.align	2
 1664              		.global	RME_Diff_Prc_Thd_Switch_Test_Thd
 1665              		.syntax unified
 1666              		.arm
 1668              	RME_Diff_Prc_Thd_Switch_Test_Thd:
 1669              	.LFB22:
 334:Source/rme_benchmark.c **** }
 335:Source/rme_benchmark.c **** /* End Function:RME_Same_Prc_Thd_Switch_Test ********************************/
 336:Source/rme_benchmark.c **** 
 337:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test_Thd *********************************
 338:Source/rme_benchmark.c **** Description : The thread for testing same-process thread switching performance.
 339:Source/rme_benchmark.c **** Input       : None.
 340:Source/rme_benchmark.c **** Output      : None.
 341:Source/rme_benchmark.c **** Return      : None.
 342:Source/rme_benchmark.c **** ******************************************************************************/
 343:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test_Thd(ptr_t Param1, ptr_t Param2, ptr_t Param3, ptr_t Param4)
 344:Source/rme_benchmark.c **** {
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 48


 1670              		.loc 1 344 1
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 24
 1673              		@ frame_needed = 1, uses_anonymous_args = 0
 1674 0000 00482DE9 		push	{fp, lr}
 1675              		.cfi_def_cfa_offset 8
 1676              		.cfi_offset 11, -8
 1677              		.cfi_offset 14, -4
 1678 0004 04B08DE2 		add	fp, sp, #4
 1679              		.cfi_def_cfa 11, 4
 1680 0008 18D04DE2 		sub	sp, sp, #24
 1681 000c 10000BE5 		str	r0, [fp, #-16]
 1682 0010 14100BE5 		str	r1, [fp, #-20]
 1683 0014 18200BE5 		str	r2, [fp, #-24]
 1684 0018 1C300BE5 		str	r3, [fp, #-28]
 1685              	.L69:
 345:Source/rme_benchmark.c ****     ret_t Retval;
 346:Source/rme_benchmark.c ****     /* Now we switch back to the init thread, immediately */
 347:Source/rme_benchmark.c ****     while(1)
 348:Source/rme_benchmark.c ****     {
 349:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 350:Source/rme_benchmark.c ****                           RME_BOOT_INIT_THD,
 351:Source/rme_benchmark.c ****                           0,
 352:Source/rme_benchmark.c ****                           0);*/
 353:Source/rme_benchmark.c ****         Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 1686              		.loc 1 353 16 discriminator 1
 1687 001c 0010A0E3 		mov	r1, #0
 1688 0020 0300A0E3 		mov	r0, #3
 1689 0024 FEFFFFEB 		bl	RME_Thd_Swt
 1690 0028 08000BE5 		str	r0, [fp, #-8]
 1691              		.loc 1 353 15
 1692 002c FAFFFFEA 		b	.L69
 1693              		.cfi_endproc
 1694              	.LFE22:
 1696              		.section	.text.RME_Diff_Prc_Thd_Switch_Test,"ax",%progbits
 1697              		.align	2
 1698              		.global	RME_Diff_Prc_Thd_Switch_Test
 1699              		.syntax unified
 1700              		.arm
 1702              	RME_Diff_Prc_Thd_Switch_Test:
 1703              	.LFB23:
 354:Source/rme_benchmark.c ****     }
 355:Source/rme_benchmark.c **** }
 356:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test_Thd ****************************/
 357:Source/rme_benchmark.c **** 
 358:Source/rme_benchmark.c **** /* Function:RME_Diff_Prc_Thd_Switch_Test *************************************
 359:Source/rme_benchmark.c **** Description : The same-process thread switch test code.
 360:Source/rme_benchmark.c **** Input       : None.
 361:Source/rme_benchmark.c **** Output      : None.
 362:Source/rme_benchmark.c **** Return      : None.
 363:Source/rme_benchmark.c **** ******************************************************************************/
 364:Source/rme_benchmark.c **** void RME_Diff_Prc_Thd_Switch_Test(void)
 365:Source/rme_benchmark.c **** {
 1704              		.loc 1 365 1
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 49


 1708 0000 00482DE9 		push	{fp, lr}
 1709              		.cfi_def_cfa_offset 8
 1710              		.cfi_offset 11, -8
 1711              		.cfi_offset 14, -4
 1712 0004 04B08DE2 		add	fp, sp, #4
 1713              		.cfi_def_cfa 11, 4
 1714 0008 18D04DE2 		sub	sp, sp, #24
 366:Source/rme_benchmark.c ****     /* Intra-process thread switching time */
 367:Source/rme_benchmark.c ****     ret_t Retval;
 368:Source/rme_benchmark.c ****     cnt_t Count;
 369:Source/rme_benchmark.c ****     ptr_t Stack_Addr;
 370:Source/rme_benchmark.c ****     ptr_t Temp;
 371:Source/rme_benchmark.c ****     ptr_t Frontier;
 372:Source/rme_benchmark.c ****     
 373:Source/rme_benchmark.c ****     Frontier=RME_BOOT_BENCH_KOM_FRONTIER;
 1715              		.loc 1 373 13
 1716 000c 093AA0E3 		mov	r3, #36864
 1717 0010 0C300BE5 		str	r3, [fp, #-12]
 374:Source/rme_benchmark.c ****     /* Initialize the thread's stack before entering it */
 375:Source/rme_benchmark.c ****     Stack_Addr=_RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 1718              		.loc 1 375 16
 1719 0014 54009FE5 		ldr	r0, .L74
 1720 0018 001000E3 		movw	r1, #:lower16:RME_Thd_Stub
 1721 001c 001040E3 		movt	r1, #:upper16:RME_Thd_Stub
 1722 0020 0430A0E3 		mov	r3, #4
 1723 0024 04308DE5 		str	r3, [sp, #4]
 1724 0028 0330A0E3 		mov	r3, #3
 1725 002c 00308DE5 		str	r3, [sp]
 1726 0030 0230A0E3 		mov	r3, #2
 1727 0034 0120A0E3 		mov	r2, #1
 1728 0038 FEFFFFEB 		bl	_RME_Stack_Init
 1729 003c 10000BE5 		str	r0, [fp, #-16]
 376:Source/rme_benchmark.c ****                                (ptr_t)RME_Thd_Stub,
 377:Source/rme_benchmark.c ****                                1, 2, 3, 4);
 378:Source/rme_benchmark.c ****     
 379:Source/rme_benchmark.c ****     /* Create the page table for the whole address space range */
 380:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 381:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|
 382:Source/rme_benchmark.c ****                       RME_PARAM_O1(29)|RME_PARAM_O0(3),
 383:Source/rme_benchmark.c ****                       Frontier,
 384:Source/rme_benchmark.c ****                       1);*/
 385:Source/rme_benchmark.c **** //    Frontier+=;
 386:Source/rme_benchmark.c **** //    /* Create the page table for the SRAM range */
 387:Source/rme_benchmark.c **** //    Retval=RME_CAP_OP(RME_SVC_PGT_CRT,RME_BOOT_INIT_CPT,
 388:Source/rme_benchmark.c **** //                      RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_Q1(RME_BOOT_BENCH_PGT_SRAM)|
 389:Source/rme_benchmark.c **** //                      RME_PARAM_O1(16)|RME_PARAM_O0(3),
 390:Source/rme_benchmark.c **** //                      Frontier,
 391:Source/rme_benchmark.c **** //                      0x20000001);*/
 392:Source/rme_benchmark.c **** //    Frontier+=;
 393:Source/rme_benchmark.c **** //    /* Map the pages into the top-level and the second-level */
 394:Source/rme_benchmark.c **** //    RME_CAP_OP(RME_SVC_PGT_ADD,0,
 395:Source/rme_benchmark.c **** //               RME_PARAM_Q1(RME_BOOT_BENCH_PGT_TOP)|0,
 396:Source/rme_benchmark.c **** //               RME_PARAM_D1(RME_BOOT_INIT_PGT)|0,
 397:Source/rme_benchmark.c **** //               |0)*/
 398:Source/rme_benchmark.c ****                       
 399:Source/rme_benchmark.c ****                   
 400:Source/rme_benchmark.c ****     
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 50


 401:Source/rme_benchmark.c ****     
 402:Source/rme_benchmark.c ****     
 403:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
 404:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
 405:Source/rme_benchmark.c ****                       RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
 406:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_KOM_FRONTIER);*/
 407:Source/rme_benchmark.c ****     
 408:Source/rme_benchmark.c ****     /* Bind the thread to the processor */
 409:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,0,
 410:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 411:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 412:Source/rme_benchmark.c ****                       0);*/
 413:Source/rme_benchmark.c ****     
 414:Source/rme_benchmark.c ****     /* Set the execution information */
 415:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,0,
 416:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 417:Source/rme_benchmark.c ****                       (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
 418:Source/rme_benchmark.c ****                       Stack_Addr);*/
 419:Source/rme_benchmark.c ****                       
 420:Source/rme_benchmark.c ****     /* Delegate some timeslice to it */
 421:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,0,
 422:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 423:Source/rme_benchmark.c ****                       RME_BOOT_INIT_THD,
 424:Source/rme_benchmark.c ****                       10000000);*/
 425:Source/rme_benchmark.c ****     
 426:Source/rme_benchmark.c ****     /* Try to switch to that thread - should fail */
 427:Source/rme_benchmark.c ****     /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 428:Source/rme_benchmark.c ****                       RME_BOOT_BENCH_THD,
 429:Source/rme_benchmark.c ****                       0,
 430:Source/rme_benchmark.c ****                       0);*/
 431:Source/rme_benchmark.c ****     /* Test result: intra-process ctxsw 358cycles/1.657us, frt w/mpu 163cycles/0.754us,
 432:Source/rme_benchmark.c ****     * composite 324. opted max:323
 433:Source/rme_benchmark.c ****     * all:33.0
 434:Source/rme_benchmark.c ****     * empty: 4.09 - 0.409us, most time spent on internals
 435:Source/rme_benchmark.c ****     * w/selections: 7.15 - maybe no need to check frozen cap from the proc.
 436:Source/rme_benchmark.c ****     * w/checkings:10.926 - 317us.
 437:Source/rme_benchmark.c ****     * total:16.57
 438:Source/rme_benchmark.c ****     * 16.2us now, after cleaning up two bad things
 439:Source/rme_benchmark.c ****     * 14.7us after CPUID optimizations. The quiescence hardly worked.
 440:Source/rme_benchmark.c ****     * no cache - 3 times slower, mainly due to the flash. ART does not really help.
 441:Source/rme_benchmark.c ****     * Performance cannot be further optimized anymore without compiler intrinsics.
 442:Source/rme_benchmark.c ****     * Something terribly wrong with systick. 38 second wrapwround
 443:Source/rme_benchmark.c ****     * This configuration, CPU works at 216MHz, correct, but the 
 444:Source/rme_benchmark.c ****     * The TSC is always 8 cycles between reads.
 445:Source/rme_benchmark.c ****     */
 446:Source/rme_benchmark.c ****     _RME_Tsc_Init();
 1730              		.loc 1 446 5
 1731 0040 FEFFFFEB 		bl	_RME_Tsc_Init
 447:Source/rme_benchmark.c ****     for(Count=0;Count<10000;Count++)
 1732              		.loc 1 447 14
 1733 0044 0030A0E3 		mov	r3, #0
 1734 0048 08300BE5 		str	r3, [fp, #-8]
 1735              		.loc 1 447 5
 1736 004c 020000EA 		b	.L71
 1737              	.L72:
 1738              		.loc 1 447 34 discriminator 3
 1739 0050 08301BE5 		ldr	r3, [fp, #-8]
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 51


 1740 0054 013083E2 		add	r3, r3, #1
 1741 0058 08300BE5 		str	r3, [fp, #-8]
 1742              	.L71:
 1743              		.loc 1 447 22 discriminator 1
 1744 005c 08301BE5 		ldr	r3, [fp, #-8]
 1745 0060 0F2702E3 		movw	r2, #9999
 1746 0064 020053E1 		cmp	r3, r2
 1747 0068 F8FFFFDA 		ble	.L72
 1748              	.L73:
 448:Source/rme_benchmark.c ****     {
 449:Source/rme_benchmark.c ****         //Temp=RME_TSC();
 450:Source/rme_benchmark.c ****         /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
 451:Source/rme_benchmark.c ****                           RME_BOOT_BENCH_THD,
 452:Source/rme_benchmark.c ****                           0,
 453:Source/rme_benchmark.c ****                           0);*/
 454:Source/rme_benchmark.c ****         //Temp=RME_TSC()-Temp;
 455:Source/rme_benchmark.c ****         //Time[Count]=Temp-8;
 456:Source/rme_benchmark.c ****     }
 457:Source/rme_benchmark.c ****     
 458:Source/rme_benchmark.c ****     while(1);
 1749              		.loc 1 458 10
 1750 006c FEFFFFEA 		b	.L73
 1751              	.L75:
 1752              		.align	2
 1753              	.L74:
 1754 0070 FC1F0000 		.word	RME_Stack+8188
 1755              		.cfi_endproc
 1756              	.LFE23:
 1758              		.section	.rodata
 1759 0331 000000   		.align	2
 1760              	.LC23:
 1761 0334 0D0A6265 		.ascii	"\015\012begin test \000"
 1761      67696E20 
 1761      74657374 
 1761      2000
 1762              		.section	.text.RME_Benchmark,"ax",%progbits
 1763              		.align	2
 1764              		.global	RME_Benchmark
 1765              		.syntax unified
 1766              		.arm
 1768              	RME_Benchmark:
 1769              	.LFB24:
 459:Source/rme_benchmark.c **** }
 460:Source/rme_benchmark.c **** /* End Function:RME_Diff_Prc_Thd_Switch_Test ********************************/
 461:Source/rme_benchmark.c **** 
 462:Source/rme_benchmark.c **** /* Function:RME_Benchmark *****************************************************
 463:Source/rme_benchmark.c **** Description : The benchmark entry, also the init thread.
 464:Source/rme_benchmark.c **** Input       : None.
 465:Source/rme_benchmark.c **** Output      : None.
 466:Source/rme_benchmark.c **** Return      : None.
 467:Source/rme_benchmark.c **** ******************************************************************************/
 468:Source/rme_benchmark.c **** void RME_Benchmark(void)
 469:Source/rme_benchmark.c **** {
 1770              		.loc 1 469 1
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 52


 1774 0000 00482DE9 		push	{fp, lr}
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 11, -8
 1777              		.cfi_offset 14, -4
 1778 0004 04B08DE2 		add	fp, sp, #4
 1779              		.cfi_def_cfa 11, 4
 470:Source/rme_benchmark.c **** 	Cur_addr=RME_BOOT_BENCH_KOM_FRONTIER;
 1780              		.loc 1 470 10
 1781 0008 003000E3 		movw	r3, #:lower16:Cur_addr
 1782 000c 003040E3 		movt	r3, #:upper16:Cur_addr
 1783 0010 092AA0E3 		mov	r2, #36864
 1784 0014 002083E5 		str	r2, [r3]
 471:Source/rme_benchmark.c ****     USR_DBG_S("\r\nbegin test ");
 1785              		.loc 1 471 5
 1786 0018 000000E3 		movw	r0, #:lower16:.LC23
 1787 001c 000040E3 		movt	r0, #:upper16:.LC23
 1788 0020 FEFFFFEB 		bl	USR_DBG_S
 472:Source/rme_benchmark.c ****     USR_DBG_H(0x111111);
 1789              		.loc 1 472 5
 1790 0024 110101E3 		movw	r0, #4369
 1791 0028 110040E3 		movt	r0, 17
 1792 002c FEFFFFEB 		bl	USR_DBG_H
 473:Source/rme_benchmark.c ****     RME_Same_Prc_Thd_Sig_Testinit();
 1793              		.loc 1 473 5
 1794 0030 FEFFFFEB 		bl	RME_Same_Prc_Thd_Sig_Testinit
 474:Source/rme_benchmark.c **** }
 1795              		.loc 1 474 1
 1796 0034 00F020E3 		nop
 1797 0038 0088BDE8 		pop	{fp, pc}
 1798              		.cfi_endproc
 1799              	.LFE24:
 1801              		.text
 1802              	.Letext0:
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 rme_benchmark.c
C:\Users\even\AppData\Local\Temp\ccbAb140.s:25     .bss.RME_Stack:00000000 RME_Stack
C:\Users\even\AppData\Local\Temp\ccbAb140.s:22     .bss.RME_Stack:00000000 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:32     .bss.Time:00000000 Time
C:\Users\even\AppData\Local\Temp\ccbAb140.s:29     .bss.Time:00000000 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:39     .bss.RME_Bench_Buf:00000000 RME_Bench_Buf
C:\Users\even\AppData\Local\Temp\ccbAb140.s:36     .bss.RME_Bench_Buf:00000000 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:42     .text.__USR_Putchar:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:47     .text.__USR_Putchar:00000000 __USR_Putchar
C:\Users\even\AppData\Local\Temp\ccbAb140.s:91     .text.USR_DBG_I:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:96     .text.USR_DBG_I:00000000 USR_DBG_I
C:\Users\even\AppData\Local\Temp\ccbAb140.s:246    .text.USR_DBG_H:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:251    .text.USR_DBG_H:00000000 USR_DBG_H
C:\Users\even\AppData\Local\Temp\ccbAb140.s:367    .text.USR_DBG_S:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:372    .text.USR_DBG_S:00000000 USR_DBG_S
C:\Users\even\AppData\Local\Temp\ccbAb140.s:434    .text.RME_Thd_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:439    .text.RME_Thd_Crt:00000000 RME_Thd_Crt
C:\Users\even\AppData\Local\Temp\ccbAb140.s:485    .text.RME_Thd_Exec_Set:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:490    .text.RME_Thd_Exec_Set:00000000 RME_Thd_Exec_Set
C:\Users\even\AppData\Local\Temp\ccbAb140.s:525    .text.RME_Thd_Time_Xfer:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:530    .text.RME_Thd_Time_Xfer:00000000 RME_Thd_Time_Xfer
C:\Users\even\AppData\Local\Temp\ccbAb140.s:563    .text.RME_Thd_Sched_Bind:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:568    .text.RME_Thd_Sched_Bind:00000000 RME_Thd_Sched_Bind
C:\Users\even\AppData\Local\Temp\ccbAb140.s:611    .text.RME_Thd_Swt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:616    .text.RME_Thd_Swt:00000000 RME_Thd_Swt
C:\Users\even\AppData\Local\Temp\ccbAb140.s:648    .text.RME_Sig_Crt:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:653    .text.RME_Sig_Crt:00000000 RME_Sig_Crt
C:\Users\even\AppData\Local\Temp\ccbAb140.s:686    .text.RME_Sig_Del:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:691    .text.RME_Sig_Del:00000000 RME_Sig_Del
C:\Users\even\AppData\Local\Temp\ccbAb140.s:724    .text.RME_Sig_Snd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:729    .text.RME_Sig_Snd:00000000 RME_Sig_Snd
C:\Users\even\AppData\Local\Temp\ccbAb140.s:760    .text.RME_Sig_Rcv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:765    .text.RME_Sig_Rcv:00000000 RME_Sig_Rcv
C:\Users\even\AppData\Local\Temp\ccbAb140.s:801    .bss.Cur_addr:00000000 Cur_addr
C:\Users\even\AppData\Local\Temp\ccbAb140.s:798    .bss.Cur_addr:00000000 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:804    .text._RME_Tsc_Init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:809    .text._RME_Tsc_Init:00000000 _RME_Tsc_Init
C:\Users\even\AppData\Local\Temp\ccbAb140.s:834    .rodata:00000000 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:835    .rodata:00000000 .LC0
C:\Users\even\AppData\Local\Temp\ccbAb140.s:838    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:843    .text.RME_Same_Prc_Thd_Switch_Test_Thd:00000000 RME_Same_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccbAb140.s:878    .rodata:0000001c .LC1
C:\Users\even\AppData\Local\Temp\ccbAb140.s:881    .rodata:0000003c .LC2
C:\Users\even\AppData\Local\Temp\ccbAb140.s:884    .rodata:0000005c .LC3
C:\Users\even\AppData\Local\Temp\ccbAb140.s:887    .rodata:0000008c .LC4
C:\Users\even\AppData\Local\Temp\ccbAb140.s:890    .rodata:000000ac .LC5
C:\Users\even\AppData\Local\Temp\ccbAb140.s:893    .rodata:000000d8 .LC6
C:\Users\even\AppData\Local\Temp\ccbAb140.s:896    .rodata:00000104 .LC7
C:\Users\even\AppData\Local\Temp\ccbAb140.s:899    .rodata:00000108 .LC8
C:\Users\even\AppData\Local\Temp\ccbAb140.s:902    .text.RME_Thd_Create:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:907    .text.RME_Thd_Create:00000000 RME_Thd_Create
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1028   .text.RME_Thd_Create:00000154 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1035   .rodata:00000134 .LC9
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1038   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1043   .text.RME_Same_Prc_Thd_Sig_Test_Thd_send:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_send
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1074   .rodata:00000150 .LC10
ARM GAS  C:\Users\even\AppData\Local\Temp\ccbAb140.s 			page 54


C:\Users\even\AppData\Local\Temp\ccbAb140.s:1077   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1082   .text.RME_Same_Prc_Thd_Sig_Test_Thd_recv:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_recv
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1114   .rodata:0000016c .LC11
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1117   .rodata:00000180 .LC12
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1120   .rodata:000001ac .LC13
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1123   .rodata:000001c0 .LC14
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1126   .rodata:000001dc .LC15
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1129   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1134   .text.RME_Same_Prc_Thd_Sig_Test_Thd_main:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_main
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1235   .rodata:00000208 .LC16
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1238   .rodata:00000234 .LC17
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1241   .text.RME_Same_Prc_Thd_Sig_Test_Thd_init:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1246   .text.RME_Same_Prc_Thd_Sig_Test_Thd_init:00000000 RME_Same_Prc_Thd_Sig_Test_Thd_init
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1318   .rodata:00000250 .LC18
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1321   .rodata:00000274 .LC19
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1325   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1330   .text.RME_Same_Prc_Thd_Sig_Testinit:00000000 RME_Same_Prc_Thd_Sig_Testinit
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1482   .text.RME_Same_Prc_Thd_Sig_Testinit:000001b4 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1489   .rodata:000002ac .LC20
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1492   .rodata:000002d0 .LC21
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1496   .rodata:00000308 .LC22
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1499   .text.RME_Same_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1504   .text.RME_Same_Prc_Thd_Switch_Test:00000000 RME_Same_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1657   .text.RME_Same_Prc_Thd_Switch_Test:000001a8 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1663   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1668   .text.RME_Diff_Prc_Thd_Switch_Test_Thd:00000000 RME_Diff_Prc_Thd_Switch_Test_Thd
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1697   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1702   .text.RME_Diff_Prc_Thd_Switch_Test:00000000 RME_Diff_Prc_Thd_Switch_Test
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1754   .text.RME_Diff_Prc_Thd_Switch_Test:00000070 $d
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1760   .rodata:00000334 .LC23
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1763   .text.RME_Benchmark:00000000 $a
C:\Users\even\AppData\Local\Temp\ccbAb140.s:1768   .text.RME_Benchmark:00000000 RME_Benchmark
                           .group:00000000 wm4.0.3b9f63523dc4e8d86e863c7e7e762be7
                           .group:00000000 wm4.rme.h.11.105c42759f88404be372052d8d99e5e6
                           .group:00000000 wm4.benchmark.h.4.a8363bfafd755305e142209197ddf004

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_idivmod
RME_Svc
RME_Thd_Stub
_RME_Stack_Init
