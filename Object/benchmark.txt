
BENCHMARK.elf:     file format elf32-littlearm


Disassembly of section .text:

08004000 <RME_Entry>:
//Description : The entry of the process.
//Input       : None.
//Output      : None.
//*****************************************************************************/
RME_Entry:
                 LDR     R0, =RME_Benchmark
 8004000:	e59f006c 	ldr	r0, [pc, #108]	@ 8004074 <__user_setup_stackheap+0x10>
                 BX      R0
 8004004:	e12fff10 	bx	r0

08004008 <RME_Deadloop>:
///* End Function:RME_Entry ***************************************************/

RME_Deadloop:
				NOP
 8004008:	e320f000 	nop	{0}
				NOP
 800400c:	e320f000 	nop	{0}
				NOP
 8004010:	e320f000 	nop	{0}
				MOV		R0,R1
 8004014:	e1a00001 	mov	r0, r1
				PUSH	{R0}
 8004018:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
				B   .
 800401c:	eafffffe 	b	800401c <RME_Deadloop+0x14>

08004020 <RME_Thd_Stub>:
//Input       : R4 - The entry address.
//              R5 - The stack address that we are using now.
//Output      : None.
//*****************************************************************************/
RME_Thd_Stub:
                BLX      R4                 // Branch to the actual entry address
 8004020:	e12fff34 	blx	r4
                //B        RME_Thd_Finish     // Jump to exiting code, should never return.
                B        .                  // Capture faults.
 8004024:	eafffffe 	b	8004024 <RME_Thd_Stub+0x4>

08004028 <RME_Inv_Stub>:
//Input       : R4 - The entry address.
//              R5 - The stack address that we are using now.
//Output      : None.
//*****************************************************************************/
RME_Inv_Stub:
                BLX      R4                 // Branch to the actual entry address
 8004028:	e12fff34 	blx	r4
                //BX       RME_Inv_Finish     // Jump to exiting code, should never return.
                B        .                  // Capture faults.
 800402c:	eafffffe 	b	800402c <RME_Inv_Stub+0x4>

08004030 <RME_Svc>:
//Output      : None.
//*****************************************************************************/
RME_Svc:
                // Manually pass the parameters according to ARM calling convention
                //a7a put parameters in r0-r3,so we do nothing
                SVC        #0x00   
 8004030:	ef000000 	svc	0x00000000
                BX         LR
 8004034:	e12fff1e 	bx	lr
                B          .        // Shouldn't reach here.
 8004038:	eafffffe 	b	8004038 <RME_Svc+0x8>

0800403c <RME_Inv>:
//              R6 - The first argument for the invocation.
//              R7 - Argument 3.
//Output      : None.
//*****************************************************************************/
RME_Inv:
                PUSH       {R4-R7}  // Manual clobbering
 800403c:	e92d00f0 	push	{r4, r5, r6, r7}
                MOV        R4,R0    // Manually pass the parameters according to ARM calling convention
 8004040:	e1a04000 	mov	r4, r0
                MOV        R5,R1
 8004044:	e1a05001 	mov	r5, r1
                MOV        R6,R2
 8004048:	e1a06002 	mov	r6, r2
                MOV        R7,R3
 800404c:	e1a07003 	mov	r7, r3
                SVC        #0x00   
 8004050:	ef000000 	svc	0x00000000
                MOV        R0,R4    // This is the return value
 8004054:	e1a00004 	mov	r0, r4
                POP        {R4-R7}  // Manual recovering
 8004058:	e8bd00f0 	pop	{r4, r5, r6, r7}
                BX         LR
 800405c:	e12fff1e 	bx	lr
                B          .        // Shouldn't reach here.
 8004060:	eafffffe 	b	8004060 <RME_Inv+0x24>

08004064 <__user_setup_stackheap>:
//Description : We place the function here to shut the SEMIHOSTING up.
//Input       : None.
//Output      : None.
//*****************************************************************************/
__user_setup_stackheap:
                MOV      R0,R1     // Stack as where we came in, and definitely no heap
 8004064:	e1a00001 	mov	r0, r1
                MOV      R2,R1
 8004068:	e1a02001 	mov	r2, r1
                BX       LR
 800406c:	e12fff1e 	bx	lr
                B        .         // Capture faults
 8004070:	eafffffe 	b	8004070 <__user_setup_stackheap+0xc>
                 LDR     R0, =RME_Benchmark
 8004074:	08004144 	.word	0x08004144

08004078 <__USR_Putchar>:
Input       : char Char - The character to print.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
ptr_t __USR_Putchar(char Char)
{
 8004078:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
 800407c:	e28db000 	add	fp, sp, #0
 8004080:	e24dd00c 	sub	sp, sp, #12
 8004084:	e1a03000 	mov	r3, r0
 8004088:	e54b3005 	strb	r3, [fp, #-5]
    RME_A7A_PUTCHAR(Char);
 800408c:	e301302c 	movw	r3, #4140	@ 0x102c
 8004090:	e34e3000 	movt	r3, #57344	@ 0xe000
 8004094:	e5933000 	ldr	r3, [r3]
 8004098:	e2033008 	and	r3, r3, #8
 800409c:	e3530000 	cmp	r3, #0
 80040a0:	0afffff9 	beq	800408c <__USR_Putchar+0x14>
 80040a4:	e3013030 	movw	r3, #4144	@ 0x1030
 80040a8:	e34e3000 	movt	r3, #57344	@ 0xe000
 80040ac:	e15b20d5 	ldrsb	r2, [fp, #-5]
 80040b0:	e5832000 	str	r2, [r3]
    return 0;
 80040b4:	e3a03000 	mov	r3, #0
}
 80040b8:	e1a00003 	mov	r0, r3
 80040bc:	e28bd000 	add	sp, fp, #0
 80040c0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
 80040c4:	e12fff1e 	bx	lr

080040c8 <USR_DBG_S>:

    return (cnt_t)Num;
}
/* End Function:USR_DBG_H ************************************************/
cnt_t USR_DBG_S(const s8* String)
{
 80040c8:	e92d4800 	push	{fp, lr}
 80040cc:	e28db004 	add	fp, sp, #4
 80040d0:	e24dd010 	sub	sp, sp, #16
 80040d4:	e50b0010 	str	r0, [fp, #-16]
    ptr_t Count;

    for(Count=0U;Count<255;Count++)
 80040d8:	e3a03000 	mov	r3, #0
 80040dc:	e50b3008 	str	r3, [fp, #-8]
 80040e0:	ea00000e 	b	8004120 <USR_DBG_S+0x58>
    {
        if(String[Count]==(s8)'\0')
 80040e4:	e51b2010 	ldr	r2, [fp, #-16]
 80040e8:	e51b3008 	ldr	r3, [fp, #-8]
 80040ec:	e0823003 	add	r3, r2, r3
 80040f0:	e1d330d0 	ldrsb	r3, [r3]
 80040f4:	e3530000 	cmp	r3, #0
 80040f8:	0a00000c 	beq	8004130 <USR_DBG_S+0x68>
        else
        {
            /* No action required */
        }

        __USR_Putchar(String[Count]);
 80040fc:	e51b2010 	ldr	r2, [fp, #-16]
 8004100:	e51b3008 	ldr	r3, [fp, #-8]
 8004104:	e0823003 	add	r3, r2, r3
 8004108:	e1d330d0 	ldrsb	r3, [r3]
 800410c:	e1a00003 	mov	r0, r3
 8004110:	ebffffd8 	bl	8004078 <__USR_Putchar>
    for(Count=0U;Count<255;Count++)
 8004114:	e51b3008 	ldr	r3, [fp, #-8]
 8004118:	e2833001 	add	r3, r3, #1
 800411c:	e50b3008 	str	r3, [fp, #-8]
 8004120:	e51b3008 	ldr	r3, [fp, #-8]
 8004124:	e35300fe 	cmp	r3, #254	@ 0xfe
 8004128:	9affffed 	bls	80040e4 <USR_DBG_S+0x1c>
 800412c:	ea000000 	b	8004134 <USR_DBG_S+0x6c>
            break;
 8004130:	e320f000 	nop	{0}
    }

    return (cnt_t)Count;
 8004134:	e51b3008 	ldr	r3, [fp, #-8]
}
 8004138:	e1a00003 	mov	r0, r3
 800413c:	e24bd004 	sub	sp, fp, #4
 8004140:	e8bd8800 	pop	{fp, pc}

08004144 <RME_Benchmark>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void RME_Benchmark(void)
{
 8004144:	e92d4800 	push	{fp, lr}
 8004148:	e28db004 	add	fp, sp, #4
	Cur_addr=RME_BOOT_BENCH_KOM_FRONTIER;
 800414c:	e3053000 	movw	r3, #20480	@ 0x5000
 8004150:	e3403800 	movt	r3, #2048	@ 0x800
 8004154:	e3a02a09 	mov	r2, #36864	@ 0x9000
 8004158:	e5832000 	str	r2, [r3]
    USR_DBG_S("\r\nTest begin!");
 800415c:	e3040434 	movw	r0, #17460	@ 0x4434
 8004160:	e3400800 	movt	r0, #2048	@ 0x800
 8004164:	ebffffd7 	bl	80040c8 <USR_DBG_S>
    //RME_Same_Prc_Thd_Sig_Testinit();
    USR_DBG_S("\r\nTest done!");
 8004168:	e3040444 	movw	r0, #17476	@ 0x4444
 800416c:	e3400800 	movt	r0, #2048	@ 0x800
 8004170:	ebffffd4 	bl	80040c8 <USR_DBG_S>
    while(1);
 8004174:	eafffffe 	b	8004174 <RME_Benchmark+0x30>
