
BENCHMARK.elf:     file format elf32-littlearm


Disassembly of section .text:

08004000 <RME_Entry>:
//Description : The entry of the process.
//Input       : None.
//Output      : None.
//*****************************************************************************/
RME_Entry:
                 LDR     R0, =RME_Benchmark
 8004000:	e59f006c 	ldr	r0, [pc, #108]	@ 8004074 <__user_setup_stackheap+0x10>
                 BX      R0
 8004004:	e12fff10 	bx	r0

08004008 <RME_Deadloop>:
///* End Function:RME_Entry ***************************************************/

RME_Deadloop:
				NOP
 8004008:	e320f000 	nop	{0}
				NOP
 800400c:	e320f000 	nop	{0}
				NOP
 8004010:	e320f000 	nop	{0}
				MOV		R0,R1
 8004014:	e1a00001 	mov	r0, r1
				PUSH	{R0}
 8004018:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
				B   .
 800401c:	eafffffe 	b	800401c <RME_Deadloop+0x14>

08004020 <RME_Thd_Stub>:
//Input       : R4 - The entry address.
//              R5 - The stack address that we are using now.
//Output      : None.
//*****************************************************************************/
RME_Thd_Stub:
                BLX      R4                 // Branch to the actual entry address
 8004020:	e12fff34 	blx	r4
                //B        RME_Thd_Finish     // Jump to exiting code, should never return.
                B        .                  // Capture faults.
 8004024:	eafffffe 	b	8004024 <RME_Thd_Stub+0x4>

08004028 <RME_Inv_Stub>:
//Input       : R4 - The entry address.
//              R5 - The stack address that we are using now.
//Output      : None.
//*****************************************************************************/
RME_Inv_Stub:
                BLX      R4                 // Branch to the actual entry address
 8004028:	e12fff34 	blx	r4
                //BX       RME_Inv_Finish     // Jump to exiting code, should never return.
                B        .                  // Capture faults.
 800402c:	eafffffe 	b	800402c <RME_Inv_Stub+0x4>

08004030 <RME_Svc>:
//Output      : None.
//*****************************************************************************/
RME_Svc:
                // Manually pass the parameters according to ARM calling convention
                //a7a put parameters in r0-r3,so we do nothing
                SVC        #0x00   
 8004030:	ef000000 	svc	0x00000000
                BX         LR
 8004034:	e12fff1e 	bx	lr
                B          .        // Shouldn't reach here.
 8004038:	eafffffe 	b	8004038 <RME_Svc+0x8>

0800403c <RME_Inv>:
//              R6 - The first argument for the invocation.
//              R7 - Argument 3.
//Output      : None.
//*****************************************************************************/
RME_Inv:
                PUSH       {R4-R7}  // Manual clobbering
 800403c:	e92d00f0 	push	{r4, r5, r6, r7}
                MOV        R4,R0    // Manually pass the parameters according to ARM calling convention
 8004040:	e1a04000 	mov	r4, r0
                MOV        R5,R1
 8004044:	e1a05001 	mov	r5, r1
                MOV        R6,R2
 8004048:	e1a06002 	mov	r6, r2
                MOV        R7,R3
 800404c:	e1a07003 	mov	r7, r3
                SVC        #0x00   
 8004050:	ef000000 	svc	0x00000000
                MOV        R0,R4    // This is the return value
 8004054:	e1a00004 	mov	r0, r4
                POP        {R4-R7}  // Manual recovering
 8004058:	e8bd00f0 	pop	{r4, r5, r6, r7}
                BX         LR
 800405c:	e12fff1e 	bx	lr
                B          .        // Shouldn't reach here.
 8004060:	eafffffe 	b	8004060 <RME_Inv+0x24>

08004064 <__user_setup_stackheap>:
//Description : We place the function here to shut the SEMIHOSTING up.
//Input       : None.
//Output      : None.
//*****************************************************************************/
__user_setup_stackheap:
                MOV      R0,R1     // Stack as where we came in, and definitely no heap
 8004064:	e1a00001 	mov	r0, r1
                MOV      R2,R1
 8004068:	e1a02001 	mov	r2, r1
                BX       LR
 800406c:	e12fff1e 	bx	lr
                B        .         // Capture faults
 8004070:	eafffffe 	b	8004070 <__user_setup_stackheap+0xc>
                 LDR     R0, =RME_Benchmark
 8004074:	08004720 	.word	0x08004720

08004078 <__USR_Putchar>:
Input       : char Char - The character to print.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
ptr_t __USR_Putchar(char Char)
{
 8004078:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
 800407c:	e28db000 	add	fp, sp, #0
 8004080:	e24dd00c 	sub	sp, sp, #12
 8004084:	e1a03000 	mov	r3, r0
 8004088:	e54b3005 	strb	r3, [fp, #-5]
    RME_A7A_PUTCHAR(Char);
 800408c:	e301302c 	movw	r3, #4140	@ 0x102c
 8004090:	e34e3000 	movt	r3, #57344	@ 0xe000
 8004094:	e5933000 	ldr	r3, [r3]
 8004098:	e2033008 	and	r3, r3, #8
 800409c:	e3530000 	cmp	r3, #0
 80040a0:	0afffff9 	beq	800408c <__USR_Putchar+0x14>
 80040a4:	e3013030 	movw	r3, #4144	@ 0x1030
 80040a8:	e34e3000 	movt	r3, #57344	@ 0xe000
 80040ac:	e15b20d5 	ldrsb	r2, [fp, #-5]
 80040b0:	e5832000 	str	r2, [r3]
    return 0;
 80040b4:	e3a03000 	mov	r3, #0
}
 80040b8:	e1a00003 	mov	r0, r3
 80040bc:	e28bd000 	add	sp, fp, #0
 80040c0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
 80040c4:	e12fff1e 	bx	lr

080040c8 <USR_DBG_I>:
Input       : rme_cnt_t Int - The integer to print.
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
cnt_t USR_DBG_I(cnt_t Int)
{
 80040c8:	e92d4800 	push	{fp, lr}
 80040cc:	e28db004 	add	fp, sp, #4
 80040d0:	e24dd020 	sub	sp, sp, #32
 80040d4:	e50b0020 	str	r0, [fp, #-32]	@ 0xffffffe0
    cnt_t Iter;
    cnt_t Count;
    cnt_t Div;

    /* Exit on zero */
    if(Int==0)
 80040d8:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
 80040dc:	e3530000 	cmp	r3, #0
 80040e0:	1a000003 	bne	80040f4 <USR_DBG_I+0x2c>
    {


        __USR_Putchar('0');
 80040e4:	e3a00030 	mov	r0, #48	@ 0x30
 80040e8:	ebffffe2 	bl	8004078 <__USR_Putchar>
        return 1;
 80040ec:	e3a03001 	mov	r3, #1
 80040f0:	ea000050 	b	8004238 <USR_DBG_I+0x170>
        /* No action required */
    }


    /* Correct all negatives into positives */
    if(Int<0)
 80040f4:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
 80040f8:	e3530000 	cmp	r3, #0
 80040fc:	aa000007 	bge	8004120 <USR_DBG_I+0x58>
    {


        __USR_Putchar('-');
 8004100:	e3a0002d 	mov	r0, #45	@ 0x2d
 8004104:	ebffffdb 	bl	8004078 <__USR_Putchar>
        Abs=-Int;
 8004108:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
 800410c:	e2633000 	rsb	r3, r3, #0
 8004110:	e50b300c 	str	r3, [fp, #-12]
        Num=1;
 8004114:	e3a03001 	mov	r3, #1
 8004118:	e50b3008 	str	r3, [fp, #-8]
 800411c:	ea000003 	b	8004130 <USR_DBG_I+0x68>
    }
    else
    {


        Abs=Int;
 8004120:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
 8004124:	e50b300c 	str	r3, [fp, #-12]
        Num=0;
 8004128:	e3a03000 	mov	r3, #0
 800412c:	e50b3008 	str	r3, [fp, #-8]
    }

    /* How many digits are there? */
    Count=0;
 8004130:	e3a03000 	mov	r3, #0
 8004134:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    Div=1;
 8004138:	e3a03001 	mov	r3, #1
 800413c:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
    Iter=Abs;
 8004140:	e51b300c 	ldr	r3, [fp, #-12]
 8004144:	e50b3010 	str	r3, [fp, #-16]
    while(1U)
    {
        Iter/=10;
 8004148:	e51b2010 	ldr	r2, [fp, #-16]
 800414c:	e3063667 	movw	r3, #26215	@ 0x6667
 8004150:	e3463666 	movt	r3, #26214	@ 0x6666
 8004154:	e0c31293 	smull	r1, r3, r3, r2
 8004158:	e1a01143 	asr	r1, r3, #2
 800415c:	e1a03fc2 	asr	r3, r2, #31
 8004160:	e0413003 	sub	r3, r1, r3
 8004164:	e50b3010 	str	r3, [fp, #-16]
        Count++;
 8004168:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 800416c:	e2833001 	add	r3, r3, #1
 8004170:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
        if(Iter!=0)
 8004174:	e51b3010 	ldr	r3, [fp, #-16]
 8004178:	e3530000 	cmp	r3, #0
 800417c:	0a000006 	beq	800419c <USR_DBG_I+0xd4>
        {


            Div*=10;
 8004180:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
 8004184:	e1a03002 	mov	r3, r2
 8004188:	e1a03103 	lsl	r3, r3, #2
 800418c:	e0833002 	add	r3, r3, r2
 8004190:	e1a03083 	lsl	r3, r3, #1
 8004194:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
        Iter/=10;
 8004198:	eaffffea 	b	8004148 <USR_DBG_I+0x80>
        }
        else
        {


            break;
 800419c:	e320f000 	nop	{0}
        }
    }
    Num+=Count;
 80041a0:	e51b2008 	ldr	r2, [fp, #-8]
 80041a4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 80041a8:	e0823003 	add	r3, r2, r3
 80041ac:	e50b3008 	str	r3, [fp, #-8]

    /* Print the integer */
    Iter=Abs;
 80041b0:	e51b300c 	ldr	r3, [fp, #-12]
 80041b4:	e50b3010 	str	r3, [fp, #-16]

    while(Count>0)
 80041b8:	ea00001a 	b	8004228 <USR_DBG_I+0x160>
    {
        Count--;
 80041bc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 80041c0:	e2433001 	sub	r3, r3, #1
 80041c4:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
        __USR_Putchar((s8)(Iter/Div)+'0');
 80041c8:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
 80041cc:	e51b0010 	ldr	r0, [fp, #-16]
 80041d0:	fa00015e 	blx	8004750 <__divsi3>
 80041d4:	e1a03000 	mov	r3, r0
 80041d8:	e6ef3073 	uxtb	r3, r3
 80041dc:	e2833030 	add	r3, r3, #48	@ 0x30
 80041e0:	e6ef3073 	uxtb	r3, r3
 80041e4:	e6af3073 	sxtb	r3, r3
 80041e8:	e1a00003 	mov	r0, r3
 80041ec:	ebffffa1 	bl	8004078 <__USR_Putchar>
        Iter=Iter%Div;
 80041f0:	e51b3010 	ldr	r3, [fp, #-16]
 80041f4:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
 80041f8:	e1a00003 	mov	r0, r3
 80041fc:	fa0001f8 	blx	80049e4 <__aeabi_idivmod>
 8004200:	e1a03001 	mov	r3, r1
 8004204:	e50b3010 	str	r3, [fp, #-16]
        Div/=10;
 8004208:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
 800420c:	e3063667 	movw	r3, #26215	@ 0x6667
 8004210:	e3463666 	movt	r3, #26214	@ 0x6666
 8004214:	e0c31293 	smull	r1, r3, r3, r2
 8004218:	e1a01143 	asr	r1, r3, #2
 800421c:	e1a03fc2 	asr	r3, r2, #31
 8004220:	e0413003 	sub	r3, r1, r3
 8004224:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
    while(Count>0)
 8004228:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 800422c:	e3530000 	cmp	r3, #0
 8004230:	caffffe1 	bgt	80041bc <USR_DBG_I+0xf4>
    }

    return Num;
 8004234:	e51b3008 	ldr	r3, [fp, #-8]
}
 8004238:	e1a00003 	mov	r0, r3
 800423c:	e24bd004 	sub	sp, fp, #4
 8004240:	e8bd8800 	pop	{fp, pc}

08004244 <USR_DBG_H>:
Input       : rme_ptr_t Uint - The unsigned integer to print.
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
cnt_t USR_DBG_H(ptr_t Uint)
{
 8004244:	e92d4800 	push	{fp, lr}
 8004248:	e28db004 	add	fp, sp, #4
 800424c:	e24dd018 	sub	sp, sp, #24
 8004250:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
    ptr_t Iter;
    ptr_t Count;
    ptr_t Num;

    /* Exit on zero */
    if(Uint==0U)
 8004254:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
 8004258:	e3530000 	cmp	r3, #0
 800425c:	1a000003 	bne	8004270 <USR_DBG_H+0x2c>
    {
        __USR_Putchar('0');
 8004260:	e3a00030 	mov	r0, #48	@ 0x30
 8004264:	ebffff83 	bl	8004078 <__USR_Putchar>
        return 1;
 8004268:	e3a03001 	mov	r3, #1
 800426c:	ea000033 	b	8004340 <USR_DBG_H+0xfc>
    {
        /* No action required */
    }

    /* Filter out all the zeroes */
    Count=0U;
 8004270:	e3a03000 	mov	r3, #0
 8004274:	e50b300c 	str	r3, [fp, #-12]
    Iter=Uint;
 8004278:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
 800427c:	e50b3008 	str	r3, [fp, #-8]
    while((Iter>>(RME_WORD_BIT-4U))==0U)
 8004280:	ea000005 	b	800429c <USR_DBG_H+0x58>
    {
        Iter<<=4;
 8004284:	e51b3008 	ldr	r3, [fp, #-8]
 8004288:	e1a03203 	lsl	r3, r3, #4
 800428c:	e50b3008 	str	r3, [fp, #-8]
        Count++;
 8004290:	e51b300c 	ldr	r3, [fp, #-12]
 8004294:	e2833001 	add	r3, r3, #1
 8004298:	e50b300c 	str	r3, [fp, #-12]
    while((Iter>>(RME_WORD_BIT-4U))==0U)
 800429c:	e51b3008 	ldr	r3, [fp, #-8]
 80042a0:	e1a03e23 	lsr	r3, r3, #28
 80042a4:	e3530000 	cmp	r3, #0
 80042a8:	0afffff5 	beq	8004284 <USR_DBG_H+0x40>
    }

    /* Count is the number of pts to print */
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
 80042ac:	e51b300c 	ldr	r3, [fp, #-12]
 80042b0:	e2633008 	rsb	r3, r3, #8
 80042b4:	e50b300c 	str	r3, [fp, #-12]
    Num=Count;
 80042b8:	e51b300c 	ldr	r3, [fp, #-12]
 80042bc:	e50b3010 	str	r3, [fp, #-16]
    while(Count>0U)
 80042c0:	ea00001a 	b	8004330 <USR_DBG_H+0xec>
    {
        Count--;
 80042c4:	e51b300c 	ldr	r3, [fp, #-12]
 80042c8:	e2433001 	sub	r3, r3, #1
 80042cc:	e50b300c 	str	r3, [fp, #-12]
        Iter=(Uint>>(Count<<2U))&0x0FU;
 80042d0:	e51b300c 	ldr	r3, [fp, #-12]
 80042d4:	e1a03103 	lsl	r3, r3, #2
 80042d8:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
 80042dc:	e1a03332 	lsr	r3, r2, r3
 80042e0:	e203300f 	and	r3, r3, #15
 80042e4:	e50b3008 	str	r3, [fp, #-8]
        if(Iter<10U)
 80042e8:	e51b3008 	ldr	r3, [fp, #-8]
 80042ec:	e3530009 	cmp	r3, #9
 80042f0:	8a000007 	bhi	8004314 <USR_DBG_H+0xd0>
        {

            __USR_Putchar((s8)Iter+'0');
 80042f4:	e51b3008 	ldr	r3, [fp, #-8]
 80042f8:	e6ef3073 	uxtb	r3, r3
 80042fc:	e2833030 	add	r3, r3, #48	@ 0x30
 8004300:	e6ef3073 	uxtb	r3, r3
 8004304:	e6af3073 	sxtb	r3, r3
 8004308:	e1a00003 	mov	r0, r3
 800430c:	ebffff59 	bl	8004078 <__USR_Putchar>
 8004310:	ea000006 	b	8004330 <USR_DBG_H+0xec>
        }
        else
        {

            __USR_Putchar((s8)Iter+'A'-10);
 8004314:	e51b3008 	ldr	r3, [fp, #-8]
 8004318:	e6ef3073 	uxtb	r3, r3
 800431c:	e2833037 	add	r3, r3, #55	@ 0x37
 8004320:	e6ef3073 	uxtb	r3, r3
 8004324:	e6af3073 	sxtb	r3, r3
 8004328:	e1a00003 	mov	r0, r3
 800432c:	ebffff51 	bl	8004078 <__USR_Putchar>
    while(Count>0U)
 8004330:	e51b300c 	ldr	r3, [fp, #-12]
 8004334:	e3530000 	cmp	r3, #0
 8004338:	1affffe1 	bne	80042c4 <USR_DBG_H+0x80>
        }
    }

    return (cnt_t)Num;
 800433c:	e51b3010 	ldr	r3, [fp, #-16]
}
 8004340:	e1a00003 	mov	r0, r3
 8004344:	e24bd004 	sub	sp, fp, #4
 8004348:	e8bd8800 	pop	{fp, pc}

0800434c <USR_DBG_S>:
/* End Function:USR_DBG_H ************************************************/
cnt_t USR_DBG_S(const s8* String)
{
 800434c:	e92d4800 	push	{fp, lr}
 8004350:	e28db004 	add	fp, sp, #4
 8004354:	e24dd010 	sub	sp, sp, #16
 8004358:	e50b0010 	str	r0, [fp, #-16]
    ptr_t Count;

    for(Count=0U;Count<255;Count++)
 800435c:	e3a03000 	mov	r3, #0
 8004360:	e50b3008 	str	r3, [fp, #-8]
 8004364:	ea00000e 	b	80043a4 <USR_DBG_S+0x58>
    {
        if(String[Count]==(s8)'\0')
 8004368:	e51b2010 	ldr	r2, [fp, #-16]
 800436c:	e51b3008 	ldr	r3, [fp, #-8]
 8004370:	e0823003 	add	r3, r2, r3
 8004374:	e1d330d0 	ldrsb	r3, [r3]
 8004378:	e3530000 	cmp	r3, #0
 800437c:	0a00000c 	beq	80043b4 <USR_DBG_S+0x68>
        else
        {
            /* No action required */
        }

        __USR_Putchar(String[Count]);
 8004380:	e51b2010 	ldr	r2, [fp, #-16]
 8004384:	e51b3008 	ldr	r3, [fp, #-8]
 8004388:	e0823003 	add	r3, r2, r3
 800438c:	e1d330d0 	ldrsb	r3, [r3]
 8004390:	e1a00003 	mov	r0, r3
 8004394:	ebffff37 	bl	8004078 <__USR_Putchar>
    for(Count=0U;Count<255;Count++)
 8004398:	e51b3008 	ldr	r3, [fp, #-8]
 800439c:	e2833001 	add	r3, r3, #1
 80043a0:	e50b3008 	str	r3, [fp, #-8]
 80043a4:	e51b3008 	ldr	r3, [fp, #-8]
 80043a8:	e35300fe 	cmp	r3, #254	@ 0xfe
 80043ac:	9affffed 	bls	8004368 <USR_DBG_S+0x1c>
 80043b0:	ea000000 	b	80043b8 <USR_DBG_S+0x6c>
            break;
 80043b4:	e320f000 	nop	{0}
    }

    return (cnt_t)Count;
 80043b8:	e51b3008 	ldr	r3, [fp, #-8]
}
 80043bc:	e1a00003 	mov	r0, r3
 80043c0:	e24bd004 	sub	sp, fp, #4
 80043c4:	e8bd8800 	pop	{fp, pc}

080043c8 <RME_Thd_Crt>:
                      cid_t Cap_Thd,
                      cid_t Cap_Prc,
                      ptr_t Prio_Max,
                      ptr_t Raddr,
                      ptr_t Attr)
{
 80043c8:	e92d4800 	push	{fp, lr}
 80043cc:	e28db004 	add	fp, sp, #4
 80043d0:	e24dd010 	sub	sp, sp, #16
 80043d4:	e50b0008 	str	r0, [fp, #-8]
 80043d8:	e50b100c 	str	r1, [fp, #-12]
 80043dc:	e50b2010 	str	r2, [fp, #-16]
 80043e0:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    return RME_SVC(RME_THD_SVC(Attr,0U,RME_SVC_THD_CRT),
 80043e4:	e59b300c 	ldr	r3, [fp, #12]
 80043e8:	e1a02b83 	lsl	r2, r3, #23
 80043ec:	e51b3008 	ldr	r3, [fp, #-8]
 80043f0:	e1823003 	orr	r3, r2, r3
 80043f4:	e3830819 	orr	r0, r3, #1638400	@ 0x190000
 80043f8:	e51b300c 	ldr	r3, [fp, #-12]
 80043fc:	e1a02803 	lsl	r2, r3, #16
 8004400:	e51b3010 	ldr	r3, [fp, #-16]
 8004404:	e6ff3073 	uxth	r3, r3
 8004408:	e1821003 	orr	r1, r2, r3
 800440c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 8004410:	e1a02803 	lsl	r2, r3, #16
 8004414:	e59b3004 	ldr	r3, [fp, #4]
 8004418:	e6ff3073 	uxth	r3, r3
 800441c:	e1822003 	orr	r2, r2, r3
 8004420:	e59b3008 	ldr	r3, [fp, #8]
 8004424:	ebffff01 	bl	8004030 <RME_Svc>
 8004428:	e1a03000 	mov	r3, r0
                   Cap_Cpt,
                   RME_PARAM_D1(Cap_Kom)|RME_PARAM_D0(Cap_Thd),
                   RME_PARAM_D1(Cap_Prc)|RME_PARAM_D0(Prio_Max),
                   Raddr);
}
 800442c:	e1a00003 	mov	r0, r3
 8004430:	e24bd004 	sub	sp, fp, #4
 8004434:	e8bd8800 	pop	{fp, pc}

08004438 <RME_Thd_Exec_Set>:
******************************************************************************/
ret_t RME_Thd_Exec_Set(cid_t Cap_Thd,
                           ptr_t Entry,
                           ptr_t Stack,
                           ptr_t Param)
{
 8004438:	e92d4800 	push	{fp, lr}
 800443c:	e28db004 	add	fp, sp, #4
 8004440:	e24dd010 	sub	sp, sp, #16
 8004444:	e50b0008 	str	r0, [fp, #-8]
 8004448:	e50b100c 	str	r1, [fp, #-12]
 800444c:	e50b2010 	str	r2, [fp, #-16]
 8004450:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    return RME_SVC(RME_SVC_THD_EXEC_SET,
 8004454:	e51b3008 	ldr	r3, [fp, #-8]
 8004458:	e3830806 	orr	r0, r3, #393216	@ 0x60000
 800445c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 8004460:	e51b2010 	ldr	r2, [fp, #-16]
 8004464:	e51b100c 	ldr	r1, [fp, #-12]
 8004468:	ebfffef0 	bl	8004030 <RME_Svc>
 800446c:	e1a03000 	mov	r3, r0
                   Cap_Thd,
                   (ptr_t)Entry,
                   (ptr_t)Stack,
                   (ptr_t)Param);
}
 8004470:	e1a00003 	mov	r0, r3
 8004474:	e24bd004 	sub	sp, fp, #4
 8004478:	e8bd8800 	pop	{fp, pc}

0800447c <RME_Thd_Time_Xfer>:
                          error code.
******************************************************************************/
ret_t RME_Thd_Time_Xfer(cid_t Cap_Thd_Dst,
                        cid_t Cap_Thd_Src,
                        ptr_t Time)
{
 800447c:	e92d4800 	push	{fp, lr}
 8004480:	e28db004 	add	fp, sp, #4
 8004484:	e24dd010 	sub	sp, sp, #16
 8004488:	e50b0008 	str	r0, [fp, #-8]
 800448c:	e50b100c 	str	r1, [fp, #-12]
 8004490:	e50b2010 	str	r2, [fp, #-16]
    return RME_SVC(RME_SVC_THD_TIME_XFER,
 8004494:	e51b1008 	ldr	r1, [fp, #-8]
 8004498:	e51b200c 	ldr	r2, [fp, #-12]
 800449c:	e51b3010 	ldr	r3, [fp, #-16]
 80044a0:	e3a00702 	mov	r0, #524288	@ 0x80000
 80044a4:	ebfffee1 	bl	8004030 <RME_Svc>
 80044a8:	e1a03000 	mov	r3, r0
                   0U,
                   Cap_Thd_Dst,
                   Cap_Thd_Src,
                   Time);
}
 80044ac:	e1a00003 	mov	r0, r3
 80044b0:	e24bd004 	sub	sp, fp, #4
 80044b4:	e8bd8800 	pop	{fp, pc}

080044b8 <RME_Thd_Sched_Bind>:
                         cid_t Cap_Thd_Sched,
                         cid_t Cap_Sig,
                         tid_t TID,
                         ptr_t Prio,
                         ptr_t Haddr)
{
 80044b8:	e92d4800 	push	{fp, lr}
 80044bc:	e28db004 	add	fp, sp, #4
 80044c0:	e24dd010 	sub	sp, sp, #16
 80044c4:	e50b0008 	str	r0, [fp, #-8]
 80044c8:	e50b100c 	str	r1, [fp, #-12]
 80044cc:	e50b2010 	str	r2, [fp, #-16]
 80044d0:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
    return RME_SVC(RME_SVC_THD_SCHED_BIND,
 80044d4:	e51b3008 	ldr	r3, [fp, #-8]
 80044d8:	e383081b 	orr	r0, r3, #1769472	@ 0x1b0000
 80044dc:	e51b300c 	ldr	r3, [fp, #-12]
 80044e0:	e1a02803 	lsl	r2, r3, #16
 80044e4:	e51b3010 	ldr	r3, [fp, #-16]
 80044e8:	e6ff3073 	uxth	r3, r3
 80044ec:	e1821003 	orr	r1, r2, r3
 80044f0:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
 80044f4:	e1a02803 	lsl	r2, r3, #16
 80044f8:	e59b3004 	ldr	r3, [fp, #4]
 80044fc:	e6ff3073 	uxth	r3, r3
 8004500:	e1822003 	orr	r2, r2, r3
 8004504:	e59b3008 	ldr	r3, [fp, #8]
 8004508:	ebfffec8 	bl	8004030 <RME_Svc>
 800450c:	e1a03000 	mov	r3, r0
                   Cap_Thd,
                   RME_PARAM_D1(Cap_Thd_Sched)|RME_PARAM_D0(Cap_Sig),
                   RME_PARAM_D1(TID)|RME_PARAM_D0(Prio),
                   Haddr);
}
 8004510:	e1a00003 	mov	r0, r3
 8004514:	e24bd004 	sub	sp, fp, #4
 8004518:	e8bd8800 	pop	{fp, pc}

0800451c <RME_Thd_Swt>:
Output      : None.
Return      : RME_ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t RME_Thd_Swt(cid_t Cap_Thd,
                      ptr_t Is_Yield)
{
 800451c:	e92d4800 	push	{fp, lr}
 8004520:	e28db004 	add	fp, sp, #4
 8004524:	e24dd008 	sub	sp, sp, #8
 8004528:	e50b0008 	str	r0, [fp, #-8]
 800452c:	e50b100c 	str	r1, [fp, #-12]
    return RME_SVC(RME_SVC_THD_SWT,
 8004530:	e51b1008 	ldr	r1, [fp, #-8]
 8004534:	e3a03000 	mov	r3, #0
 8004538:	e51b200c 	ldr	r2, [fp, #-12]
 800453c:	e3a00809 	mov	r0, #589824	@ 0x90000
 8004540:	ebfffeba 	bl	8004030 <RME_Svc>
 8004544:	e1a03000 	mov	r3, r0
                   0U,
                   Cap_Thd,
                   Is_Yield,
                   0U);
}
 8004548:	e1a00003 	mov	r0, r3
 800454c:	e24bd004 	sub	sp, fp, #4
 8004550:	e8bd8800 	pop	{fp, pc}

08004554 <RME_Same_Prc_Thd_Switch_Test_Thd>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void RME_Same_Prc_Thd_Switch_Test_Thd(ptr_t Param1)
{
 8004554:	e92d4800 	push	{fp, lr}
 8004558:	e28db004 	add	fp, sp, #4
 800455c:	e24dd010 	sub	sp, sp, #16
 8004560:	e50b0010 	str	r0, [fp, #-16]
    ret_t Retval;

    USR_DBG_S("\r\n hello! this is thread ");
 8004564:	e3040a04 	movw	r0, #18948	@ 0x4a04
 8004568:	e3400800 	movt	r0, #2048	@ 0x800
 800456c:	ebffff76 	bl	800434c <USR_DBG_S>
    USR_DBG_I(Param1);
 8004570:	e51b3010 	ldr	r3, [fp, #-16]
 8004574:	e1a00003 	mov	r0, r3
 8004578:	ebfffed2 	bl	80040c8 <USR_DBG_I>
    //{
        /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
                          RME_BOOT_INIT_THD,
                          0,
                          0);*/
        Retval=RME_Thd_Swt(RME_BOOT_INIT_THD,0);
 800457c:	e3a01000 	mov	r1, #0
 8004580:	e3a00003 	mov	r0, #3
 8004584:	ebffffe4 	bl	800451c <RME_Thd_Swt>
 8004588:	e50b0008 	str	r0, [fp, #-8]
    //}
}
 800458c:	e320f000 	nop	{0}
 8004590:	e24bd004 	sub	sp, fp, #4
 8004594:	e8bd8800 	pop	{fp, pc}

08004598 <RME_Same_Prc_Thd_Switch_Test>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void RME_Same_Prc_Thd_Switch_Test(void)
{
 8004598:	e92d4800 	push	{fp, lr}
 800459c:	e28db004 	add	fp, sp, #4
 80045a0:	e24dd020 	sub	sp, sp, #32
    ret_t Retval;
    cnt_t Count;
    ptr_t Stack_Addr;
    ptr_t Temp;
    /* Initialize the thread's stack before entering it */
    Stack_Addr=(ptr_t)&RME_Stack[2000];/* _RME_Stack_Init((ptr_t)(&RME_Stack[2047]),
 80045a4:	e59f316c 	ldr	r3, [pc, #364]	@ 8004718 <RME_Same_Prc_Thd_Switch_Test+0x180>
 80045a8:	e50b300c 	str	r3, [fp, #-12]
                               (ptr_t)RME_Thd_Stub,
                               1, 2, 3, 4); */

    USR_DBG_S("\r\n(ptr_t)(&RME_Stack[2047])= ");
 80045ac:	e3040a20 	movw	r0, #18976	@ 0x4a20
 80045b0:	e3400800 	movt	r0, #2048	@ 0x800
 80045b4:	ebffff64 	bl	800434c <USR_DBG_S>
    USR_DBG_H((ptr_t)(&RME_Stack[2047]));
 80045b8:	e59f315c 	ldr	r3, [pc, #348]	@ 800471c <RME_Same_Prc_Thd_Switch_Test+0x184>
 80045bc:	e1a00003 	mov	r0, r3
 80045c0:	ebffff1f 	bl	8004244 <USR_DBG_H>
    USR_DBG_S("\r\nInitialize the thread's stack Stack_Addr= ");
 80045c4:	e3040a40 	movw	r0, #19008	@ 0x4a40
 80045c8:	e3400800 	movt	r0, #2048	@ 0x800
 80045cc:	ebffff5e 	bl	800434c <USR_DBG_S>
    USR_DBG_H(Stack_Addr);
 80045d0:	e51b000c 	ldr	r0, [fp, #-12]
 80045d4:	ebffff1a 	bl	8004244 <USR_DBG_H>
     * that it is free of bugs. Find a scheme to do that */
    /*Retval=RME_CAP_OP(RME_SVC_THD_CRT,RME_BOOT_INIT_CPT,
                      RME_PARAM_D1(RME_BOOT_INIT_KOM)|RME_PARAM_D0(RME_BOOT_BENCH_THD),
                      RME_PARAM_D1(RME_BOOT_INIT_PRC)|RME_PARAM_D0(31),
                      RME_BOOT_BENCH_KOM_FRONTIER);*/
    Retval=RME_Thd_Crt(RME_BOOT_INIT_CPT,RME_BOOT_INIT_KOM,RME_BOOT_BENCH_THD,
 80045d8:	e3a03000 	mov	r3, #0
 80045dc:	e58d3008 	str	r3, [sp, #8]
 80045e0:	e3a03a09 	mov	r3, #36864	@ 0x9000
 80045e4:	e58d3004 	str	r3, [sp, #4]
 80045e8:	e3a0301f 	mov	r3, #31
 80045ec:	e58d3000 	str	r3, [sp]
 80045f0:	e3a03002 	mov	r3, #2
 80045f4:	e3a02008 	mov	r2, #8
 80045f8:	e3a01005 	mov	r1, #5
 80045fc:	e3a00000 	mov	r0, #0
 8004600:	ebffff70 	bl	80043c8 <RME_Thd_Crt>
 8004604:	e50b0010 	str	r0, [fp, #-16]
                       RME_BOOT_INIT_PRC,RME_THD_PRIO_MAX,RME_BOOT_BENCH_KOM_FRONTIER,0);
    USR_DBG_S("\r\ncreate a thread      retval= ");
 8004608:	e3040a70 	movw	r0, #19056	@ 0x4a70
 800460c:	e3400800 	movt	r0, #2048	@ 0x800
 8004610:	ebffff4d 	bl	800434c <USR_DBG_S>
    USR_DBG_I(Retval);
 8004614:	e51b0010 	ldr	r0, [fp, #-16]
 8004618:	ebfffeaa 	bl	80040c8 <USR_DBG_I>
    /* Bind the thread to the processor */
    /*Retval=RME_CAP_OP(RME_SVC_THD_SCHED_BIND,RME_BOOT_BENCH_THD,
    		          RME_PARAM_D1(RME_BOOT_INIT_THD)|RME_PARAM_D0(RME_CID_NULL),
					  RME_PARAM_D1(RME_TID_2)|RME_PARAM_D0(RME_BOOT_INIT_PRC),
					  RME_BOOT_HYPER_KOM_VADDR);*/
    Retval=RME_Thd_Sched_Bind(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_CID_NULL,
 800461c:	e3a03000 	mov	r3, #0
 8004620:	e58d3004 	str	r3, [sp, #4]
 8004624:	e3a03002 	mov	r3, #2
 8004628:	e58d3000 	str	r3, [sp]
 800462c:	e3a03002 	mov	r3, #2
 8004630:	e3a02902 	mov	r2, #32768	@ 0x8000
 8004634:	e3a01003 	mov	r1, #3
 8004638:	e3a00008 	mov	r0, #8
 800463c:	ebffff9d 	bl	80044b8 <RME_Thd_Sched_Bind>
 8004640:	e50b0010 	str	r0, [fp, #-16]
                              RME_TID_2,RME_BOOT_INIT_PRC,RME_BOOT_HYPER_KOM_VADDR);
    USR_DBG_S("\r\nBind the thread to the processor retval= ");
 8004644:	e3040a90 	movw	r0, #19088	@ 0x4a90
 8004648:	e3400800 	movt	r0, #2048	@ 0x800
 800464c:	ebffff3e 	bl	800434c <USR_DBG_S>
    USR_DBG_I(Retval);
 8004650:	e51b0010 	ldr	r0, [fp, #-16]
 8004654:	ebfffe9b 	bl	80040c8 <USR_DBG_I>
    /* Set the execution information */
    /*Retval=RME_CAP_OP(RME_SVC_THD_EXEC_SET,RME_BOOT_BENCH_THD,
	         	 	 (ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,
    		         //(ptr_t)RME_Deadloop,
					 Stack_Addr,RME_TID_2);*/
    Retval=RME_Thd_Exec_Set(RME_BOOT_BENCH_THD,(ptr_t)RME_Same_Prc_Thd_Switch_Test_Thd,Stack_Addr,RME_TID_2);
 8004658:	e3041554 	movw	r1, #17748	@ 0x4554
 800465c:	e3401800 	movt	r1, #2048	@ 0x800
 8004660:	e3a03002 	mov	r3, #2
 8004664:	e51b200c 	ldr	r2, [fp, #-12]
 8004668:	e3a00008 	mov	r0, #8
 800466c:	ebffff71 	bl	8004438 <RME_Thd_Exec_Set>
 8004670:	e50b0010 	str	r0, [fp, #-16]
    //RME_Stack[2000]=1234;
    USR_DBG_S("\r\nSet the execution information retval= ");
 8004674:	e3040abc 	movw	r0, #19132	@ 0x4abc
 8004678:	e3400800 	movt	r0, #2048	@ 0x800
 800467c:	ebffff32 	bl	800434c <USR_DBG_S>
    USR_DBG_I(Retval);
 8004680:	e51b0010 	ldr	r0, [fp, #-16]
 8004684:	ebfffe8f 	bl	80040c8 <USR_DBG_I>
    USR_DBG_S("\r\n");
 8004688:	e3040ae8 	movw	r0, #19176	@ 0x4ae8
 800468c:	e3400800 	movt	r0, #2048	@ 0x800
 8004690:	ebffff2d 	bl	800434c <USR_DBG_S>
    /*Retval=RME_CAP_OP(RME_SVC_THD_TIME_XFER,RME_BOOT_BENCH_THD,
                      RME_BOOT_BENCH_THD,
                      RME_BOOT_INIT_THD,
                      10000000);*/
    //Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,RME_THD_INF_TIME);
    Retval=RME_Thd_Time_Xfer(RME_BOOT_BENCH_THD,RME_BOOT_INIT_THD,1000);
 8004694:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
 8004698:	e3a01003 	mov	r1, #3
 800469c:	e3a00008 	mov	r0, #8
 80046a0:	ebffff75 	bl	800447c <RME_Thd_Time_Xfer>
 80046a4:	e50b0010 	str	r0, [fp, #-16]
    /* Try to switch to that thread - should fail */
    /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
                      RME_BOOT_BENCH_THD,
                      0,
                      0);*/
    Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 80046a8:	e3a01000 	mov	r1, #0
 80046ac:	e3a00008 	mov	r0, #8
 80046b0:	ebffff99 	bl	800451c <RME_Thd_Swt>
 80046b4:	e50b0010 	str	r0, [fp, #-16]
    USR_DBG_S("\r\nTry to switch to that thread - should fail  retval= ");
 80046b8:	e3040aec 	movw	r0, #19180	@ 0x4aec
 80046bc:	e3400800 	movt	r0, #2048	@ 0x800
 80046c0:	ebffff21 	bl	800434c <USR_DBG_S>
    USR_DBG_I(Retval);
 80046c4:	e51b0010 	ldr	r0, [fp, #-16]
 80046c8:	ebfffe7e 	bl	80040c8 <USR_DBG_I>
    * This configuration, CPU works at 216MHz, correct, but the 
    * The TSC is always 8 cycles between reads.
    */
    //_RME_Tsc_Init();
    //for(Count=0;Count<10000;Count++)
    for(Count=0;Count<10;Count++)
 80046cc:	e3a03000 	mov	r3, #0
 80046d0:	e50b3008 	str	r3, [fp, #-8]
 80046d4:	ea00000b 	b	8004708 <RME_Same_Prc_Thd_Switch_Test+0x170>
        //Temp=RME_TSC();
        /*Retval=RME_CAP_OP(RME_SVC_THD_SWT,0,
                          RME_BOOT_BENCH_THD,
                          0,
                          0);*/
        Retval=RME_Thd_Swt(RME_BOOT_BENCH_THD,0);
 80046d8:	e3a01000 	mov	r1, #0
 80046dc:	e3a00008 	mov	r0, #8
 80046e0:	ebffff8d 	bl	800451c <RME_Thd_Swt>
 80046e4:	e50b0010 	str	r0, [fp, #-16]
        //Temp=RME_TSC()-Temp;
       // Time[Count]=Temp-8;
        USR_DBG_S("\r\nTry to switch to that thread  retval= ");
 80046e8:	e3040b24 	movw	r0, #19236	@ 0x4b24
 80046ec:	e3400800 	movt	r0, #2048	@ 0x800
 80046f0:	ebffff15 	bl	800434c <USR_DBG_S>
        USR_DBG_I(Retval);
 80046f4:	e51b0010 	ldr	r0, [fp, #-16]
 80046f8:	ebfffe72 	bl	80040c8 <USR_DBG_I>
    for(Count=0;Count<10;Count++)
 80046fc:	e51b3008 	ldr	r3, [fp, #-8]
 8004700:	e2833001 	add	r3, r3, #1
 8004704:	e50b3008 	str	r3, [fp, #-8]
 8004708:	e51b3008 	ldr	r3, [fp, #-8]
 800470c:	e3530009 	cmp	r3, #9
 8004710:	dafffff0 	ble	80046d8 <RME_Same_Prc_Thd_Switch_Test+0x140>
    }
    
    // test sig_snd/sig_rcv

    while(1);
 8004714:	eafffffe 	b	8004714 <RME_Same_Prc_Thd_Switch_Test+0x17c>
 8004718:	08006f40 	.word	0x08006f40
 800471c:	08006ffc 	.word	0x08006ffc

08004720 <RME_Benchmark>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void RME_Benchmark(void)
{
 8004720:	e92d4800 	push	{fp, lr}
 8004724:	e28db004 	add	fp, sp, #4
    USR_DBG_S("\r\nbegin test ");
 8004728:	e3040b50 	movw	r0, #19280	@ 0x4b50
 800472c:	e3400800 	movt	r0, #2048	@ 0x800
 8004730:	ebffff05 	bl	800434c <USR_DBG_S>
    USR_DBG_H(0x111111);
 8004734:	e3010111 	movw	r0, #4369	@ 0x1111
 8004738:	e3400011 	movt	r0, #17
 800473c:	ebfffec0 	bl	8004244 <USR_DBG_H>
    RME_Same_Prc_Thd_Switch_Test();
 8004740:	ebffff94 	bl	8004598 <RME_Same_Prc_Thd_Switch_Test>
}
 8004744:	e320f000 	nop	{0}
 8004748:	e8bd8800 	pop	{fp, pc}
 800474c:	00000000 	andeq	r0, r0, r0

08004750 <__divsi3>:
 8004750:	2900      	cmp	r1, #0
 8004752:	f000 813e 	beq.w	80049d2 <.divsi3_skip_div0_test+0x27c>

08004756 <.divsi3_skip_div0_test>:
 8004756:	ea80 0c01 	eor.w	ip, r0, r1
 800475a:	bf48      	it	mi
 800475c:	4249      	negmi	r1, r1
 800475e:	1e4a      	subs	r2, r1, #1
 8004760:	f000 811f 	beq.w	80049a2 <.divsi3_skip_div0_test+0x24c>
 8004764:	0003      	movs	r3, r0
 8004766:	bf48      	it	mi
 8004768:	4243      	negmi	r3, r0
 800476a:	428b      	cmp	r3, r1
 800476c:	f240 811e 	bls.w	80049ac <.divsi3_skip_div0_test+0x256>
 8004770:	4211      	tst	r1, r2
 8004772:	f000 8123 	beq.w	80049bc <.divsi3_skip_div0_test+0x266>
 8004776:	fab3 f283 	clz	r2, r3
 800477a:	fab1 f081 	clz	r0, r1
 800477e:	eba0 0202 	sub.w	r2, r0, r2
 8004782:	f1c2 021f 	rsb	r2, r2, #31
 8004786:	a004      	add	r0, pc, #16	@ (adr r0, 8004798 <.divsi3_skip_div0_test+0x42>)
 8004788:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800478c:	f04f 0000 	mov.w	r0, #0
 8004790:	4697      	mov	pc, r2
 8004792:	bf00      	nop
 8004794:	f3af 8000 	nop.w
 8004798:	ebb3 7fc1 	cmp.w	r3, r1, lsl #31
 800479c:	bf00      	nop
 800479e:	eb40 0000 	adc.w	r0, r0, r0
 80047a2:	bf28      	it	cs
 80047a4:	eba3 73c1 	subcs.w	r3, r3, r1, lsl #31
 80047a8:	ebb3 7f81 	cmp.w	r3, r1, lsl #30
 80047ac:	bf00      	nop
 80047ae:	eb40 0000 	adc.w	r0, r0, r0
 80047b2:	bf28      	it	cs
 80047b4:	eba3 7381 	subcs.w	r3, r3, r1, lsl #30
 80047b8:	ebb3 7f41 	cmp.w	r3, r1, lsl #29
 80047bc:	bf00      	nop
 80047be:	eb40 0000 	adc.w	r0, r0, r0
 80047c2:	bf28      	it	cs
 80047c4:	eba3 7341 	subcs.w	r3, r3, r1, lsl #29
 80047c8:	ebb3 7f01 	cmp.w	r3, r1, lsl #28
 80047cc:	bf00      	nop
 80047ce:	eb40 0000 	adc.w	r0, r0, r0
 80047d2:	bf28      	it	cs
 80047d4:	eba3 7301 	subcs.w	r3, r3, r1, lsl #28
 80047d8:	ebb3 6fc1 	cmp.w	r3, r1, lsl #27
 80047dc:	bf00      	nop
 80047de:	eb40 0000 	adc.w	r0, r0, r0
 80047e2:	bf28      	it	cs
 80047e4:	eba3 63c1 	subcs.w	r3, r3, r1, lsl #27
 80047e8:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80047ec:	bf00      	nop
 80047ee:	eb40 0000 	adc.w	r0, r0, r0
 80047f2:	bf28      	it	cs
 80047f4:	eba3 6381 	subcs.w	r3, r3, r1, lsl #26
 80047f8:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 80047fc:	bf00      	nop
 80047fe:	eb40 0000 	adc.w	r0, r0, r0
 8004802:	bf28      	it	cs
 8004804:	eba3 6341 	subcs.w	r3, r3, r1, lsl #25
 8004808:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800480c:	bf00      	nop
 800480e:	eb40 0000 	adc.w	r0, r0, r0
 8004812:	bf28      	it	cs
 8004814:	eba3 6301 	subcs.w	r3, r3, r1, lsl #24
 8004818:	ebb3 5fc1 	cmp.w	r3, r1, lsl #23
 800481c:	bf00      	nop
 800481e:	eb40 0000 	adc.w	r0, r0, r0
 8004822:	bf28      	it	cs
 8004824:	eba3 53c1 	subcs.w	r3, r3, r1, lsl #23
 8004828:	ebb3 5f81 	cmp.w	r3, r1, lsl #22
 800482c:	bf00      	nop
 800482e:	eb40 0000 	adc.w	r0, r0, r0
 8004832:	bf28      	it	cs
 8004834:	eba3 5381 	subcs.w	r3, r3, r1, lsl #22
 8004838:	ebb3 5f41 	cmp.w	r3, r1, lsl #21
 800483c:	bf00      	nop
 800483e:	eb40 0000 	adc.w	r0, r0, r0
 8004842:	bf28      	it	cs
 8004844:	eba3 5341 	subcs.w	r3, r3, r1, lsl #21
 8004848:	ebb3 5f01 	cmp.w	r3, r1, lsl #20
 800484c:	bf00      	nop
 800484e:	eb40 0000 	adc.w	r0, r0, r0
 8004852:	bf28      	it	cs
 8004854:	eba3 5301 	subcs.w	r3, r3, r1, lsl #20
 8004858:	ebb3 4fc1 	cmp.w	r3, r1, lsl #19
 800485c:	bf00      	nop
 800485e:	eb40 0000 	adc.w	r0, r0, r0
 8004862:	bf28      	it	cs
 8004864:	eba3 43c1 	subcs.w	r3, r3, r1, lsl #19
 8004868:	ebb3 4f81 	cmp.w	r3, r1, lsl #18
 800486c:	bf00      	nop
 800486e:	eb40 0000 	adc.w	r0, r0, r0
 8004872:	bf28      	it	cs
 8004874:	eba3 4381 	subcs.w	r3, r3, r1, lsl #18
 8004878:	ebb3 4f41 	cmp.w	r3, r1, lsl #17
 800487c:	bf00      	nop
 800487e:	eb40 0000 	adc.w	r0, r0, r0
 8004882:	bf28      	it	cs
 8004884:	eba3 4341 	subcs.w	r3, r3, r1, lsl #17
 8004888:	ebb3 4f01 	cmp.w	r3, r1, lsl #16
 800488c:	bf00      	nop
 800488e:	eb40 0000 	adc.w	r0, r0, r0
 8004892:	bf28      	it	cs
 8004894:	eba3 4301 	subcs.w	r3, r3, r1, lsl #16
 8004898:	ebb3 3fc1 	cmp.w	r3, r1, lsl #15
 800489c:	bf00      	nop
 800489e:	eb40 0000 	adc.w	r0, r0, r0
 80048a2:	bf28      	it	cs
 80048a4:	eba3 33c1 	subcs.w	r3, r3, r1, lsl #15
 80048a8:	ebb3 3f81 	cmp.w	r3, r1, lsl #14
 80048ac:	bf00      	nop
 80048ae:	eb40 0000 	adc.w	r0, r0, r0
 80048b2:	bf28      	it	cs
 80048b4:	eba3 3381 	subcs.w	r3, r3, r1, lsl #14
 80048b8:	ebb3 3f41 	cmp.w	r3, r1, lsl #13
 80048bc:	bf00      	nop
 80048be:	eb40 0000 	adc.w	r0, r0, r0
 80048c2:	bf28      	it	cs
 80048c4:	eba3 3341 	subcs.w	r3, r3, r1, lsl #13
 80048c8:	ebb3 3f01 	cmp.w	r3, r1, lsl #12
 80048cc:	bf00      	nop
 80048ce:	eb40 0000 	adc.w	r0, r0, r0
 80048d2:	bf28      	it	cs
 80048d4:	eba3 3301 	subcs.w	r3, r3, r1, lsl #12
 80048d8:	ebb3 2fc1 	cmp.w	r3, r1, lsl #11
 80048dc:	bf00      	nop
 80048de:	eb40 0000 	adc.w	r0, r0, r0
 80048e2:	bf28      	it	cs
 80048e4:	eba3 23c1 	subcs.w	r3, r3, r1, lsl #11
 80048e8:	ebb3 2f81 	cmp.w	r3, r1, lsl #10
 80048ec:	bf00      	nop
 80048ee:	eb40 0000 	adc.w	r0, r0, r0
 80048f2:	bf28      	it	cs
 80048f4:	eba3 2381 	subcs.w	r3, r3, r1, lsl #10
 80048f8:	ebb3 2f41 	cmp.w	r3, r1, lsl #9
 80048fc:	bf00      	nop
 80048fe:	eb40 0000 	adc.w	r0, r0, r0
 8004902:	bf28      	it	cs
 8004904:	eba3 2341 	subcs.w	r3, r3, r1, lsl #9
 8004908:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 800490c:	bf00      	nop
 800490e:	eb40 0000 	adc.w	r0, r0, r0
 8004912:	bf28      	it	cs
 8004914:	eba3 2301 	subcs.w	r3, r3, r1, lsl #8
 8004918:	ebb3 1fc1 	cmp.w	r3, r1, lsl #7
 800491c:	bf00      	nop
 800491e:	eb40 0000 	adc.w	r0, r0, r0
 8004922:	bf28      	it	cs
 8004924:	eba3 13c1 	subcs.w	r3, r3, r1, lsl #7
 8004928:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800492c:	bf00      	nop
 800492e:	eb40 0000 	adc.w	r0, r0, r0
 8004932:	bf28      	it	cs
 8004934:	eba3 1381 	subcs.w	r3, r3, r1, lsl #6
 8004938:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
 800493c:	bf00      	nop
 800493e:	eb40 0000 	adc.w	r0, r0, r0
 8004942:	bf28      	it	cs
 8004944:	eba3 1341 	subcs.w	r3, r3, r1, lsl #5
 8004948:	ebb3 1f01 	cmp.w	r3, r1, lsl #4
 800494c:	bf00      	nop
 800494e:	eb40 0000 	adc.w	r0, r0, r0
 8004952:	bf28      	it	cs
 8004954:	eba3 1301 	subcs.w	r3, r3, r1, lsl #4
 8004958:	ebb3 0fc1 	cmp.w	r3, r1, lsl #3
 800495c:	bf00      	nop
 800495e:	eb40 0000 	adc.w	r0, r0, r0
 8004962:	bf28      	it	cs
 8004964:	eba3 03c1 	subcs.w	r3, r3, r1, lsl #3
 8004968:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 800496c:	bf00      	nop
 800496e:	eb40 0000 	adc.w	r0, r0, r0
 8004972:	bf28      	it	cs
 8004974:	eba3 0381 	subcs.w	r3, r3, r1, lsl #2
 8004978:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
 800497c:	bf00      	nop
 800497e:	eb40 0000 	adc.w	r0, r0, r0
 8004982:	bf28      	it	cs
 8004984:	eba3 0341 	subcs.w	r3, r3, r1, lsl #1
 8004988:	ebb3 0f01 	cmp.w	r3, r1
 800498c:	bf00      	nop
 800498e:	eb40 0000 	adc.w	r0, r0, r0
 8004992:	bf28      	it	cs
 8004994:	eba3 0301 	subcs.w	r3, r3, r1
 8004998:	f1bc 0f00 	cmp.w	ip, #0
 800499c:	bf48      	it	mi
 800499e:	4240      	negmi	r0, r0
 80049a0:	4770      	bx	lr
 80049a2:	ea9c 0f00 	teq	ip, r0
 80049a6:	bf48      	it	mi
 80049a8:	4240      	negmi	r0, r0
 80049aa:	4770      	bx	lr
 80049ac:	bf38      	it	cc
 80049ae:	2000      	movcc	r0, #0
 80049b0:	bf04      	itt	eq
 80049b2:	ea4f 70ec 	moveq.w	r0, ip, asr #31
 80049b6:	f040 0001 	orreq.w	r0, r0, #1
 80049ba:	4770      	bx	lr
 80049bc:	fab1 f281 	clz	r2, r1
 80049c0:	f1c2 021f 	rsb	r2, r2, #31
 80049c4:	f1bc 0f00 	cmp.w	ip, #0
 80049c8:	fa23 f002 	lsr.w	r0, r3, r2
 80049cc:	bf48      	it	mi
 80049ce:	4240      	negmi	r0, r0
 80049d0:	4770      	bx	lr
 80049d2:	2800      	cmp	r0, #0
 80049d4:	bfc8      	it	gt
 80049d6:	f06f 4000 	mvngt.w	r0, #2147483648	@ 0x80000000
 80049da:	bfb8      	it	lt
 80049dc:	f04f 4000 	movlt.w	r0, #2147483648	@ 0x80000000
 80049e0:	f000 b80e 	b.w	8004a00 <__aeabi_idiv0>

080049e4 <__aeabi_idivmod>:
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d0f4      	beq.n	80049d2 <.divsi3_skip_div0_test+0x27c>
 80049e8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 80049ec:	f7ff feb3 	bl	8004756 <.divsi3_skip_div0_test>
 80049f0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 80049f4:	fb02 f300 	mul.w	r3, r2, r0
 80049f8:	eba1 0103 	sub.w	r1, r1, r3
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop

08004a00 <__aeabi_idiv0>:
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
